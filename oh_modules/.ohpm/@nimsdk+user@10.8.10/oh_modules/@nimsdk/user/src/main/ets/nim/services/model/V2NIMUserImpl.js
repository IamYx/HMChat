import { NIMBaseImpl } from '@nimsdk/base'; import { COL_NAME, USER_INFO_TABLE } from './UserInfoTable'; export class V2NIMUserImpl extends NIMBaseImpl { constructor() { super(); this._accountId = ''; this._name = ''; this._avatar = undefined; this._sign = undefined; this._email = undefined; this._birthday = undefined; this._mobile = undefined; this._gender = undefined; this._serverExtension = undefined; this._createTime = 0; this._updateTime = undefined; } get accountId() { return this._accountId; } get name() { return this._name; } get avatar() { return this._avatar; } get sign() { return this._sign; } get email() { return this._email; } get birthday() { return this._birthday; } get mobile() { return this._mobile; } get gender() { return this._gender; } get serverExtension() { return this._serverExtension; } get createTime() { return this._createTime; } get updateTime() { return this._updateTime; } set accountId(a4) { this._accountId = a4; } set name(z3) { this._name = z3; } set avatar(y3) { this._avatar = y3; } set sign(x3) { this._sign = x3; } set email(w3) { this._email = w3; } set birthday(v3) { this._birthday = v3; } set mobile(u3) { this._mobile = u3; } set gender(t3) { this._gender = t3; } set serverExtension(s3) { this._serverExtension = s3; } set createTime(r3) { this._createTime = r3; } set updateTime(q3) { this._updateTime = q3; } static buildFromParams(accountId, name, avatar, sign, email, m3, n3, gender, p3, createTime, updateTime) { return V2NIMUserImpl.initByParams(() => new V2NIMUserImpl(), accountId, name, avatar, sign, email, m3, n3, gender, p3, createTime, updateTime); } static buildFromCloud(l3) { return V2NIMUserImpl.initByCloud(() => new V2NIMUserImpl(), l3); } static buildFromValueBucket(valuesBucket) { return V2NIMUserImpl.initByValueBucket(() => new V2NIMUserImpl(), valuesBucket); } fromParams(accountId, name, avatar, sign, email, i3, j3, gender, k3, createTime, updateTime) { this.accountId = accountId; this.name = name; this.avatar = avatar; this.sign = sign; this.email = email; this.birthday = i3; this.mobile = j3; this.gender = gender; this.serverExtension = k3; this.createTime = createTime; this.updateTime = updateTime; } fromCloud(h3) { this.accountId = h3.accountId; this.name = h3.name; this.avatar = h3.avatar; this.sign = h3.sign; this.email = h3.email; this.birthday = h3.birthday; this.mobile = h3.mobile; this.gender = h3.gender; this.serverExtension = h3.serverExtension; this.createTime = h3.createTime; this.updateTime = h3.updateTime; } fromValueBucket(valuesBucket) { this.accountId = valuesBucket[COL_NAME.ACCOUNT]; this.name = valuesBucket[COL_NAME.NAME]; this.avatar = valuesBucket[COL_NAME.AVATAR]; this.sign = valuesBucket[COL_NAME.SIGN]; this.email = valuesBucket[COL_NAME.EMAIL]; this.birthday = valuesBucket[COL_NAME.BIRTHDAY]; this.mobile = valuesBucket[COL_NAME.MOBILE]; this.gender = valuesBucket[COL_NAME.GENDER]; this.serverExtension = valuesBucket[COL_NAME.EXTENSION]; this.createTime = valuesBucket[COL_NAME.CREATE_TIME]; this.updateTime = valuesBucket[COL_NAME.UPDATE_TIME]; } static parseArrayFromCloud(e3) { const f3 = new Array(e3.length); for (let g3 = 0; g3 < e3.length; g3++) { f3[g3] = V2NIMUserImpl.buildFromCloud(e3[g3]); } return f3; } generateBucket() { let valueBucket = {}; USER_INFO_TABLE.columns.forEach((item) => { switch (item) { case COL_NAME.ACCOUNT: valueBucket[item] = this.accountId; break; case COL_NAME.NAME: if (this.name !== undefined) { valueBucket[item] = this.name; } break; case COL_NAME.AVATAR: if (this.avatar !== undefined) { valueBucket[item] = this.avatar; } break; case COL_NAME.SIGN: if (this.sign !== undefined) { valueBucket[item] = this.sign; } break; case COL_NAME.GENDER: if (this.gender !== undefined) { valueBucket[item] = this.gender; } break; case COL_NAME.EMAIL: if (this.email !== undefined) { valueBucket[item] = this.email; } break; case COL_NAME.BIRTHDAY: if (this.birthday !== undefined) { valueBucket[item] = this.birthday; } break; case COL_NAME.MOBILE: if (this.mobile !== undefined) { valueBucket[item] = this.mobile; } break; case COL_NAME.EXTENSION: if (this.serverExtension !== undefined) { valueBucket[item] = this.serverExtension; } break; case COL_NAME.UPDATE_TIME: if (this.updateTime !== undefined) { valueBucket[item] = this.updateTime; } break; case COL_NAME.CREATE_TIME: valueBucket[item] = this.createTime; break; default: break; } }); return valueBucket; } generateUpdateBucket() { let valueBucket = {}; USER_INFO_TABLE.columns.forEach((item) => { switch (item) { case COL_NAME.NAME: if (this.name !== undefined) { valueBucket[item] = this.name; } break; case COL_NAME.AVATAR: if (this.avatar !== undefined) { valueBucket[item] = this.avatar; } break; case COL_NAME.SIGN: if (this.sign !== undefined) { valueBucket[item] = this.sign; } break; case COL_NAME.GENDER: if (this.gender !== undefined) { valueBucket[item] = this.gender; } break; case COL_NAME.EMAIL: if (this.email !== undefined) { valueBucket[item] = this.email; } break; case COL_NAME.BIRTHDAY: if (this.birthday !== undefined) { valueBucket[item] = this.birthday; } break; case COL_NAME.MOBILE: if (this.mobile !== undefined) { valueBucket[item] = this.mobile; } break; case COL_NAME.EXTENSION: if (this.serverExtension !== undefined) { valueBucket[item] = this.serverExtension; } break; case COL_NAME.UPDATE_TIME: if (this.updateTime !== undefined) { valueBucket[item] = this.updateTime; } break; default: break; } }); return valueBucket; } toJSON() { return { accountId: this.accountId, name: this.name, avatar: this.avatar, sign: this.sign, email: this.email, birthday: this.birthday, mobile: this.mobile, gender: this.gender, serverExtension: this.serverExtension, createTime: this.createTime, updateTime: this.updateTime }; } } 