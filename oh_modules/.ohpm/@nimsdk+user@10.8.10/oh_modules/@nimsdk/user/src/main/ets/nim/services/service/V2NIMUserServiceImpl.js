import HashMap from "@ohos.util.HashMap"; import JSON from "@ohos.util.json"; import { cmdConfigUser, cmdMapUser, NIM_DATABASE_NAME_MAIN, registerParser, V2NIMErrorCode, V2NIMErrorImpl, V2NIMP2PMessageMuteMode, V2Service, validate } from '@nimsdk/base'; import { get } from '@nimsdk/vendor'; import { UserModel } from '../model/UserModel'; import { V2NIMUserImpl } from '../model/V2NIMUserImpl'; import { registerAspect } from './Aspect'; import { getUserListCloud, strArrayRule, stringRule, userProfileRule } from './Rules'; import { UserCloud } from './UserCloud'; const b1 = '[UserService]'; export default class V2NIMUserServiceImpl extends V2Service { constructor(j8, serviceName, k8) { super(serviceName, j8); registerParser(j8, { cmdMap: cmdMapUser, cmdConfig: cmdConfigUser }); j8.userService = this; this.setListener(); registerAspect(V2NIMUserServiceImpl, j8); } get model() { if (this._model) { return this._model; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: `V2NIMUserServiceImpl model is unavailable` } }); } } get cloud() { if (this._cloud) { return this._cloud; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'V2NIMFriendService cloud is unavailable' } }); } } async getUserList(i8) { this.core.logger.info(b1, 'call API getUserList', i8); return await this.v2IGetUserList(i8); } async getUserListFromCloud(h8) { this.core.logger.info(b1, 'call API getUserListFromCloud', h8); return await this.v2IGetUserListFromCloud(h8); } async updateSelfUserProfile(g8) { this.core.logger.info(b1, 'call API updateSelfUserProfile', g8); return await this.v2IUpdateSelfUserProfile(g8); } async addUserToBlockList(accountId) { this.core.logger.info(b1, 'call API addUserToBlockList', accountId); return await this.v2IAddUserToBlockList(accountId); } async removeUserFromBlockList(accountId) { this.core.logger.info(b1, 'call API removeUserFromBlockList', accountId); return await this.v2IRemoveUserFromBlockList(accountId); } async getBlockList() { this.core.logger.info(b1, 'call API getBlockList'); return await this.v2IGetBlockList(); } async searchUserByOption(option) { this.core.logger.info(b1, 'call API searchUserByOption', option); return await this.v2ISearchUserByOption(option); } async v2IGetUserList(x7) { try { validate({ accountIds: strArrayRule }, { accountIds: x7 }, '', true); const y7 = await this.model.getUserList(x7); const z7 = new HashMap(); for (const f8 of y7) { z7.set(f8.accountId, f8); } const a8 = x7.filter(str => !z7.hasKey(str)); if (a8.length > 0) { try { const d8 = await this.cloud.getUserList(a8); if (d8.length > 0) { await this.model.upsert(d8); this.emit('onUserProfileChanged', d8); for (const e8 of d8) { z7.set(e8.accountId, e8); } } } catch (e) { this.core.logger.warn(b1, 'cloud getUserList failed', e); } } const b8 = []; x7.map((account) => { const c8 = z7.get(account); if (c8) { b8.push(c8); } }); return b8; } catch (e) { this.core.logger.error(b1, `getUserList `, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getUserList ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IGetUserListFromCloud(r7) { try { validate(getUserListCloud, { accountIds: r7 }, '', true); const s7 = await this.cloud.getUserList(r7); if (s7.length > 0) { const w7 = await this.needUpsertUsers(s7); await this.model.upsert(s7); if (w7.length > 0) { this.emit('onUserProfileChanged', w7); } } const t7 = []; r7.map((account) => { const u7 = s7.find((v7) => { return v7.accountId === account; }); if (u7) { t7.push(u7); } }); this.core.logger.info(b1, 'getUserListFromCloud result', t7); return t7; } catch (e) { this.core.logger.error(b1, `getUserListFromCloud`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getUserList ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IUpdateSelfUserProfile(q7) { try { validate(userProfileRule, q7, '', true); let updateTime = await this.cloud.updateSelfUserProfile(q7); this.core.logger.info(b1, 'updateSelfUserProfile userUpdateTime:', updateTime); await this.updateUserProfile(q7, updateTime); } catch (e) { this.core.logger.error(b1, `updateSelfUserProfile`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `updateSelfUserProfile ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IAddUserToBlockList(accountId) { try { if (accountId === this.core.account) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'Cannot block yourself' } }); } validate({ accountId: stringRule }, { accountId: accountId }, '', true); await this.cloud.addUserToBlockList(accountId); await this.model.addToBlockList(accountId); this.emitBlockListAdded(accountId); } catch (e) { this.core.logger.error(b1, `addUserToBlockList`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `addUserToBlockList ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IRemoveUserFromBlockList(accountId) { try { if (accountId === this.core.account) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'Cannot unblock yourself' } }); } validate({ accountId: stringRule }, { accountId: accountId }, '', true); await this.cloud.removeUserFromBlockList(accountId); await this.model.removeFromBlockList(accountId); this.emit('onBlockListRemoved', accountId); } catch (e) { this.core.logger.error(b1, 'removeUserFromBlockList', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `removeUserFromBlockList ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IGetBlockList() { try { return await this.model.getBlockList(); } catch (e) { this.core.logger.error(b1, 'getBlockList', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getBlockList ${JSON.stringify(e)}`, rawError: e } }); } } } async v2ISearchUserByOption(option) { try { validate({ keyword: { type: 'string', allowEmpty: false }, searchName: { type: 'boolean', required: false }, searchAccountId: { type: 'boolean', required: false }, searchMobile: { type: 'boolean', required: false } }, option, '', true); if (typeof option.searchName === 'undefined') { option.searchName = true; } if (!option.searchName && !option.searchAccountId && !option.searchMobile) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'one of searchName, searchAccountId, searchMobile must be true' } }); } const p7 = await this.model.searchUserByOption(option); this.core.logger.info(b1, 'searchUserByOption', p7); return p7; } catch (e) { this.core.logger.error(b1, 'searchUserByOption', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `searchUserByOption ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IGetUser(accountId) { try { const m7 = await this.model.getUserById(accountId); if (m7) { return m7; } else { this.core.logger.info(b1, 'getUser to cloud', accountId); const n7 = await this.cloud.getUserList([accountId]); if (n7.length > 0) { const o7 = n7[0]; await this.model.upsert(o7); this.emit('onUserProfileChanged', [o7]); return o7; } return undefined; } } catch (e) { this.core.logger.error(b1, `v2IGetUser ${JSON.stringify(e)}`); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `v2IGetUser ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IGetLocalUser(accountId) { try { const l7 = await this.model.getUserById(accountId); if (l7) { return l7; } else { return undefined; } } catch (e) { this.core.logger.error(b1, `v2IGetLocalUser ${JSON.stringify(e)}`); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `v2IGetLocalUser ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IGetLocalUsers(f7) { try { const g7 = await this.model.getUserList(f7); const h7 = new HashMap(); for (const k7 of g7) { h7.set(k7.accountId, k7); } const i7 = new HashMap(); for (const accountId of f7) { const j7 = h7.get(accountId); if (j7) { i7.set(accountId, j7); } else { i7.set(accountId, undefined); } } return i7; } catch (e) { this.core.logger.error(b1, `v2IGetLocalUsers ${JSON.stringify(e)}`); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `v2IGetLocalUsers ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IGetUsers(z6) { try { let a7 = []; let b7 = 0; const c7 = 500; while (b7 < z6.length) { const d7 = z6.slice(b7, (b7 + c7 >= z6.length) ? z6.length : b7 + c7); b7 = b7 + c7; const e7 = await this.v2IGetUserList(d7); a7 = a7.concat(e7); } return a7; } catch (e) { this.core.logger.error(b1, 'v2IGetUsers', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `v2IGetUsers ${JSON.stringify(e)}`, rawError: e } }); } } } async v2ISetUsersBySync(v6, w6) { try { this.core.logger.info(b1, 'v2ISetUsersBySync'); const x6 = this.transferUsersToImpl(v6); const y6 = await this.needUpsertUsers(x6); this.model.upsert(x6).then(() => { this.core.syncService.updateSyncTimestamp(w6, 'friendUsers'); }).catch((e) => { this.core.logger.error(b1, 'v2ISetUsersBySync upsert users catch error:', e); }); if (y6.length > 0) { this.emit('onUserProfileChanged', y6); } } catch (e) { this.core.logger.error(b1, 'v2ISetUsers', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `v2ISetUsers ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IIsBlocked(accountId) { try { this.core.logger.info(b1, 'v2IIsBlocked', accountId); const u6 = await this.model.getBlockList(); return u6.includes(accountId); } catch (e) { this.core.logger.error(b1, 'v2IIsBlocked', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `v2IIsBlocked ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IIsMute(accountId) { try { this.core.logger.info(b1, 'v2IIsMute', accountId); const t6 = await this.model.getMuteList(); return t6.includes(accountId); } catch (e) { this.core.logger.error(b1, 'v2IIsMute', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `v2IIsMute ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IIsMuteBatch(p6) { try { this.core.logger.info(b1, 'v2IIsMuteBatch', p6); const q6 = await this.model.getMuteList(); const r6 = new HashMap(); q6.map((muted) => { r6.set(muted, true); }); const s6 = new HashMap(); p6.map((accountId) => { s6.set(accountId, !!r6.get(accountId)); }); return s6; } catch (e) { this.core.logger.error(b1, 'v2IIsMute', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `v2IIsMute ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IGetMuteList() { try { this.core.logger.info(b1, 'v2IGetMuteList'); return await this.model.getMuteList(); } catch (e) { this.core.logger.error(b1, 'v2IGetMuteList', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `v2IGetMuteList ${JSON.stringify(e)}`, rawError: e } }); } } } async v2ISetAccountMuteMode(accountId, o6) { try { this.core.logger.info(b1, 'v2ISetAccountMuteMode', accountId, o6); return await this.model.setAccountMuteMode(accountId, o6); } catch (e) { this.core.logger.error(b1, 'v2ISetAccountMuteMode', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `v2ISetAccountMuteMode ${JSON.stringify(e)}`, rawError: e } }); } } } async onLoginStart(accountId) { try { this.core.logger.info(b1, 'onLogin', accountId); this.registerInnerService(this.core); await this.loadOnLogin(); } catch (e) { this.core.logger.error(b1, 'onLoginStart', e); } } async onLoginFinished(accountId) { this.core.logger.info(b1, 'onLoginFinished', accountId); } onLogout() { this.core.logger.info(b1, 'onLogout'); this.unRegisterInnerService(); } async loadOnLogin() { try { await this.model.loadAllUsers(); } catch (e) { this.core.logger.error(b1, `loadOnLogin catch error`, e); const error = e; this.core.reporterService?.addException({ action: 6, code: error.code, description: error.message, operationType: 0, context: error.stack, target: `V2NIMUserServiceImpl loadOnLogin.` }); } return; } async v2ISyncBlockAndMuteListHandler(k6, l6) { this.core.logger.info('SyncService', 'v2ISyncBlockAndMuteListHandler start'); const m6 = get(k6.content, 'data'); m6.forEach(async (item) => { if (item.isBlock) { await this.model.addToBlockList(item.accountId); } else { await this.model.removeFromBlockList(item.accountId); } await this.model.setAccountMuteMode(item.accountId, item.isMute ? V2NIMP2PMessageMuteMode.V2NIM_P2P_MESSAGE_MUTE_MODE_ON : V2NIMP2PMessageMuteMode.V2NIM_P2P_MESSAGE_MUTE_MODE_OFF); }); this.core.logger.info(b1, 'syncBlockAndMuteListHandler', m6); if (l6) { const n6 = get(k6.content, 'timetag'); await this.core.syncService.updateSyncTimestamp2(n6, 'relations'); } this.core.logger.info('SyncService', 'v2ISyncBlockAndMuteListHandler end'); } async v2ISyncSelfUserInfoHandler(f6, g6) { this.core.logger.info('SyncService', 'v2ISyncSelfUserInfoHandler start'); const h6 = get(f6.content, 'user'); const i6 = V2NIMUserImpl.buildFromCloud(h6); const j6 = await this.needUpsertUsers([i6]); await this.model.upsert(i6); if (j6.length > 0) { this.emit('onUserProfileChanged', j6); } this.core.logger.info(b1, 'v2SyncSelfUserInfoHandler', i6); if (g6) { await this.core.syncService.updateSyncTimestamp2(get(f6.content, 'timetag'), 'myInfo'); } this.core.logger.info('SyncService', 'v2ISyncSelfUserInfoHandler end'); } setListener() { } async updateUserProfile(y5, updateTime) { try { this.logger.info(b1, 'updateUserProfile', y5, updateTime); let z5 = await this.model.getUserById(this.core.account); let a6 = true; if (typeof z5 === 'undefined') { a6 = true; } else if (typeof updateTime === 'undefined' || typeof z5.updateTime === 'undefined') { a6 = true; } else if (updateTime > z5.updateTime) { a6 = false; } else if (updateTime < z5.updateTime) { a6 = true; } else if (updateTime === z5.updateTime) { return; } if (a6) { const c6 = this.core.account; const d6 = await this.cloud.getUserList([c6]); if (d6.length > 0) { const e6 = d6[0]; await this.model.upsert(e6); } else { this.core.logger.error(b1, `can not get self: ${c6} `); } } else if (z5) { const userProfile = this.createSelfProfile(y5, z5, updateTime); await this.model.updateUserInfo(userProfile); } else { this.core.logger.error(b1, `Must 'fetch from cloud' or 'user != undefined', cannot be here!`); } const b6 = await this.model.getUserById(this.core.account); if (b6) { this.logger.info(b1, 'updateUserProfile user', b6); this.emit('onUserProfileChanged', [b6]); } return; } catch (e) { this.core.logger.error(b1, 'updateUserProfile', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `updateUserProfile ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IRefreshUserInfo(accountId, t5) { try { this.logger.info(b1, 'v2IRefreshUserInfo:', accountId, t5); const u5 = await this.model.getUserById(accountId); const v5 = u5?.updateTime ?? 0; let w5 = (t5 === undefined) && (v5 === 0); if ((t5 ?? -1) > v5 || w5) { const x5 = await this.v2IGetUserListFromCloud([accountId]); if (x5.length > 0) { this.logger.info(b1, 'v2IRefreshUserInfo onUserProfileChanged refresh', x5); this.emit('onUserProfileChanged', x5); } } } catch (e) { this.core.logger.error(b1, 'v2IRefreshUserInfo', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `v2IRefreshUserInfo ${JSON.stringify(e)}`, rawError: e } }); } } } async v2IRefreshUserInfoBatch(map) { try { this.logger.info(b1, 'v2IRefreshUserInfoBatch:', map.length); const o5 = []; for (const accountId of map.keys()) { const q5 = map.get(accountId); if (typeof q5 === 'undefined') { continue; } const r5 = await this.model.getUserById(accountId); const s5 = r5?.updateTime ?? 0; if (q5 > s5) { o5.push(accountId); } } if (o5.length <= 0) { this.logger.info(b1, 'v2IRefreshUserInfoBatch empty needRefreshedUsers'); return; } const p5 = await this.v2IGetUserListFromCloud(o5); if (p5.length > 0) { this.logger.info(b1, 'v2IRefreshUserInfoBatch onUserProfileChanged refresh', p5); this.emit('onUserProfileChanged', p5); } } catch (e) { this.core.logger.error(b1, 'v2IRefreshUserInfoBatch', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `v2IRefreshUserInfoBatch ${JSON.stringify(e)}`, rawError: e } }); } } } async onUpdateUserProfileHandler(l5) { this.core.logger.info(b1, 'call Handler onUpdateUserProfileHandler'); const m5 = get(l5.content, 'data'); const n5 = V2NIMUserImpl.buildFromCloud(m5); this.core.logger.info(b1, 'onUpdateUserProfileHandler', n5); await this.updateUserProfile(n5, n5.updateTime); } onUpdateBlockListHandler(j5) { this.core.logger.info(b1, 'call Handler onUpdateBlockListHandler'); const accountId = get(j5.content, 'accountId'); const k5 = get(j5.content, 'addToBlockList'); this.core.logger.info(b1, 'onUpdateBlockListHandler', accountId, k5); if (k5) { this.model.addToBlockList(accountId); this.emitBlockListAdded(accountId); } else { this.model.removeFromBlockList(accountId); this.emit('onBlockListRemoved', accountId); } } async emitBlockListAdded(accountId) { const i5 = await this.v2IGetUserList([accountId]); if (i5.length > 0) { this.emit('onBlockListAdded', i5[0]); } else { this.core.logger.error(b1, `emit block account not found: ${accountId}`); } } async v2OnUpdateMuteListHandler(g5) { this.core.logger.info(b1, 'call Handler v2OnUpdateMuteListHandler'); const accountId = get(g5.content, 'accountId'); const mute = get(g5.content, 'mute'); const h5 = mute ? V2NIMP2PMessageMuteMode.V2NIM_P2P_MESSAGE_MUTE_MODE_ON : V2NIMP2PMessageMuteMode.V2NIM_P2P_MESSAGE_MUTE_MODE_OFF; this.core.logger.info(b1, 'v2OnUpdateMuteListHandler', accountId, h5); this.core.eventBus.emit('V2NIMUserService/updateMuteList', accountId, h5); } createSelfProfile(d5, e5, updateTime) { const f5 = V2NIMUserImpl.buildFromParams(this.core.account, d5?.name ?? e5.name, d5?.avatar, d5?.sign, d5?.email, d5?.birthday, d5?.mobile, d5?.gender, d5?.serverExtension, e5.createTime, updateTime); return f5; } async needUpsertUsers(u4) { const v4 = u4.map((c5) => c5.accountId); const w4 = await this.model.getUserList(v4); const x4 = new HashMap(); w4.map((b5) => { if (b5) { x4.set(b5.accountId, b5); } }); const y4 = u4.filter((z4) => { let a5 = undefined; if (x4.hasKey(z4.accountId)) { a5 = x4.get(z4.accountId); } return typeof a5 === 'undefined' || (z4.updateTime ?? 0) > (a5.updateTime ?? 0); }); this.core.logger.info(b1, 'needUpsertUsers', y4.length); return y4; } transferUsersToImpl(r4) { const s4 = []; r4.map((t4) => { if (t4 instanceof V2NIMUserImpl) { s4.push(t4); } else { s4.push(V2NIMUserImpl.buildFromCloud(t4)); } }); return s4; } registerInnerService(p4) { let q4 = p4.databaseService.getDatabase(p4, NIM_DATABASE_NAME_MAIN); this._model = new UserModel(p4, q4); this._cloud = new UserCloud(p4); } unRegisterInnerService() { this._model = undefined; this._cloud = undefined; } } 