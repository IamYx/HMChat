import { UserInfoTable } from './UserInfoTable'; import { UserTagTable } from './UserTagTable'; import HashMap from "@ohos.util.HashMap"; const b1 = '[UserModel]'; export class UserModel { constructor(k2, l2) { this.core = k2; this.userCache = new HashMap(); this.infoTable = new UserInfoTable(l2, k2); this.tagTable = new UserTagTable(l2, k2); } async loadAllUsers() { this.userCache.clear(); const h2 = 5000; const i2 = await this.infoTable.queryAll(h2); i2.map((j2) => { this.userCache.set(j2.accountId, j2); }); this.core.logger.info(b1, `loadAllUsers done, total: ${i2.length}`); } async getUserById(accountId) { if (this.userCache.hasKey(accountId)) { const g2 = this.userCache.get(accountId); if (g2) { return g2; } else { } } const f2 = await this.infoTable.queryUser(accountId); if (f2) { this.core.logger.info(b1, `backfill user from db to cache: ${JSON.stringify(f2)}`); this.userCache.set(f2.accountId, f2); } return f2; } async getUserList(z1) { const result = []; const a2 = []; z1.map((accountId) => { if (this.userCache.hasKey(accountId)) { const e2 = this.userCache.get(accountId); if (e2) { result.push(e2); } else { a2.push(accountId); } } else { a2.push(accountId); } }); if (a2.length > 0) { const b2 = await this.infoTable.queryUserList(a2); b2.map((d2) => { this.userCache.set(d2.accountId, d2); }); this.core.logger.info(b1, `backfill users from db to cache: ${b2.map((c2) => { return c2.accountId; })}`); return result.concat(b2); } else { return result; } } async upsert(v1) { if (Array.isArray(v1)) { v1.map((w1) => { this.userCache.set(w1.accountId, w1); }); } else { this.userCache.set(v1.accountId, v1); } await this.infoTable.upsertUsers(v1); } async updateUserInfo(s1) { const t1 = await this.infoTable.updateUser(s1); this.core.logger.info(b1, `updateUserInfo affectedRows: ${t1}, user: ${JSON.stringify(s1)}`); const u1 = await this.infoTable.queryUser(s1.accountId); if (u1) { this.userCache.set(u1.accountId, u1); } else { this.userCache.remove(s1.accountId); } } async addToBlockList(account) { await this.tagTable.addBlock(account); } async removeFromBlockList(accountId) { await this.tagTable.removeBlock(accountId); } async searchUserByOption(option) { return await this.infoTable.searchUserByOption(option.keyword, option.searchName, option.searchAccountId, option.searchMobile); } async getBlockList() { return await this.tagTable.getBlockList(); } async setAccountMuteMode(accountId, q1) { await this.tagTable.setAccountMuteMode(accountId, q1); } async getMuteList() { return await this.tagTable.getMuteList(); } } 