import { cmdConfigTeam, cmdMapTeam, NIM_DATABASE_NAME_MAIN, registerParser, V2NIMErrorCode, V2NIMErrorImpl, V2NIMTeamType, V2Service, validate } from '@nimsdk/base'; import { get, set } from '@nimsdk/vendor'; import { registerAspect } from './aspect'; import { formatTeamNotificationAttachData } from './format'; import { processTeamMember, processTeamMembers } from './member/TeamMemberCloud'; import { TeamMemberService } from './member/TeamMemberService'; import { V2NIMTeamMemberImpl } from './member/V2NIMTeamMemberImpl'; import { TeamNotificationService } from './notification/TeamNotificationService'; import { actionTypeRules, antispamConfigRule, createTeamParamsRule, getTeamJoinActionInfoListOptionRules, strArrayRule, teamJoinActionInfoRules } from './rules'; import { TeamService } from './team/TeamService'; import { V2NIMTeamImpl } from './team/V2NIMTeamImpl'; import HashMap from "@ohos.util.HashMap"; const l3 = '[TeamService]'; export default class V2NIMTeamServiceImpl extends V2Service { constructor(y36, serviceName, z36) { super(serviceName, y36); registerParser(y36, { cmdMap: cmdMapTeam, cmdConfig: cmdConfigTeam }); y36.teamService = this; this.setListener(); registerAspect(V2NIMTeamServiceImpl, y36); } get teamService() { if (this._teamService) { return this._teamService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get teamMemberService() { if (this._teamMemberService) { return this._teamMemberService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get notificationService() { if (this._notificationService) { return this._notificationService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } async onLoginStart(accountId) { try { this.core.logger.info(l3, 'onLogin', accountId); await this.registerInnerService(this.core); } catch (e) { this.core.logger.error(l3, 'onLogin', e); } } async onLoginFinished(accountId) { this.core.logger.info(l3, 'onLoginFinished', accountId); } onLogout() { this.core.logger.info(l3, 'onLogout'); this.teamService.onLogout(); this.teamMemberService.onLogout(); this.notificationService.onLogout(); this.unRegisterInnerService(); } async createTeam(u36, v36, w36, x36) { try { this.core.logger.info(l3, 'call API createTeam', u36, v36, w36, x36); validate({ o: createTeamParamsRule }, { o: u36 }, '', true); validate({ inviteeAccountIds: { type: strArrayRule.type, itemType: strArrayRule.itemType, min: 0, required: false } }, { inviteeAccountIds: v36 }, '', true); validate({ antispamConfig: antispamConfigRule }, { antispamConfig: x36 }, '', true); const result = await this.teamService.createTeam(u36, v36, w36, x36); this.teamMemberService.saveSelfAfterCreated(result.team); this.emit('onTeamCreated', result.team); return result; } catch (e) { this.core.logger.error(l3, `createTeam catch error`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `createTeam ${JSON.stringify(e)}`, rawError: e } }); } } } async updateTeamInfo(q36, r36, s36, t36) { this.core.logger.info(l3, 'call API updateTeamInfo', q36, r36, s36, t36); return await this.teamService.updateTeamInfo(q36, r36, s36, t36); } async leaveTeam(o36, p36) { this.core.logger.info(l3, 'call API leaveTeam', o36, p36); return await this.teamService.leaveTeam(o36, p36); } async getTeamInfo(l36, m36) { this.core.logger.info(l3, 'call API getTeamInfo', l36, m36); const n36 = await this.teamService.getTeamInfo(l36, m36); return n36; } async getJoinedTeamList(j36) { this.core.logger.info(l3, 'call API getJoinedTeamList', j36); const k36 = await this.teamService.getJoinedTeamList(j36); return k36; } async getJoinedTeamCount(i36) { this.core.logger.info(l3, 'call API getJoinedTeamCount', i36); return await this.teamService.getJoinedTeamCount(i36); } async getTeamInfoByIds(f36, g36) { this.core.logger.info(l3, 'call API getTeamInfoByIds', f36, g36); const h36 = await this.teamService.getTeamInfoByIds(f36, g36); return h36; } async transferTeamOwner(c36, d36, accountId, e36) { this.core.logger.info(l3, 'call API transferTeamOwner', c36, d36, accountId, e36); return await this.teamService.transferTeamOwner(c36, d36, accountId, e36); } async setTeamChatBannedMode(z35, a36, b36) { this.core.logger.info(l3, 'call API setTeamChatBannedMode', z35, a36, b36); return await this.teamService.setTeamChatBannedMode(z35, a36, b36); } async searchTeamByKeyword(x35) { this.core.logger.info(l3, 'call API searchTeamByKeyword', x35); const y35 = await this.teamService.searchTeamByKeyword(x35); return y35; } async v2IGetLocalTeamById(u35, v35) { const w35 = await this.teamService.getLocalById(u35, v35); return w35; } async v2IGetLocalTeamByIds(m35, n35) { const o35 = await this.teamService.getLocalByIds(m35, n35); const p35 = new HashMap(); for (const t35 of o35) { p35.set(t35.teamId, t35); } const q35 = new HashMap(); for (const r35 of m35) { const s35 = p35.get(r35); if (s35) { q35.set(r35, s35); } else { q35.set(r35, undefined); } } return q35; } async updateLocalTeam(l35) { return await this.teamService.updateLocal(l35); } async upsertLocalTeam(k35) { return await this.teamService.upsertLocal(k35); } async v2IQueryLocalAllTeams() { const j35 = await this.teamService.getLocalByType(V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL, true); return j35; } async v2IQueryLocalAllSuperTeams() { const i35 = await this.teamService.getLocalByType(V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER, true); return i35; } async dismissTeam(g35, h35) { this.core.logger.info(l3, 'call API dismissTeam', g35, h35); await this.teamService.dismissTeam(g35, h35); await this.teamMemberService.clearTeamMembers(g35, h35); return; } async inviteMember(c35, d35, e35, f35) { this.core.logger.info(l3, 'call API inviteMember', c35, d35, e35, f35); return await this.teamMemberService.inviteMember(c35, d35, e35, f35); } async inviteMemberEx(z34, a35, b35) { this.core.logger.info(l3, 'call API inviteMemberEx', z34, a35, b35); return await this.teamMemberService.inviteMember(z34, a35, b35.inviteeAccountIds, b35.postscript, b35.serverExtension); } async acceptInvitation(y34) { this.core.logger.info(l3, 'call API acceptInvitation', y34); return await this.notificationService.acceptInvitation(y34); } async rejectInvitation(w34, x34) { this.core.logger.info(l3, 'call API rejectInvitation', w34, x34); return await this.notificationService.rejectInvitation(w34, x34); } async kickMember(t34, u34, v34) { this.core.logger.info(l3, 'call API kickMember', t34, u34, v34); return await this.teamMemberService.kickMember(t34, u34, v34); } async applyJoinTeam(q34, r34, s34) { this.core.logger.info(l3, 'call API applyJoinTeam', q34, r34, s34); return await this.teamMemberService.applyJoinTeam(q34, r34, s34); } async updateTeamMemberRole(m34, n34, o34, p34) { this.core.logger.info(l3, 'call API updateTeamMemberRole', m34, n34, o34, p34); return await this.teamMemberService.updateTeamMemberRole(m34, n34, o34, p34); } async updateSelfTeamMemberInfo(j34, k34, l34) { this.core.logger.info(l3, 'call API updateSelfTeamMemberInfo', j34, k34, l34); return await this.teamMemberService.updateSelfTeamMemberInfo(j34, k34, l34); } async updateTeamMemberNick(g34, h34, accountId, i34) { this.core.logger.info(l3, 'call API updateTeamMemberNick', g34, h34, accountId, i34); return await this.teamMemberService.updateTeamMemberNick(g34, h34, accountId, i34); } async setTeamMemberChatBannedStatus(d34, e34, accountId, f34) { this.core.logger.info(l3, 'call API setTeamMemberChatBannedStatus', d34, e34, accountId, f34); return await this.teamMemberService.setTeamMemberChatBannedStatus(d34, e34, accountId, f34); } async getTeamMemberList(a34, b34, c34) { this.core.logger.info(l3, 'call API getTeamMemberList', a34, b34, c34); return await this.teamMemberService.getTeamMemberList(a34, b34, c34); } async getTeamMemberListByIds(x33, y33, z33) { this.core.logger.info(l3, 'call API getTeamMemberListByIds', x33, y33, z33); return await this.teamMemberService.getTeamMemberListByIds(x33, y33, z33); } async getTeamMemberInvitor(u33, v33, w33) { this.core.logger.info(l3, 'call API getTeamMemberInvitor', u33, v33, w33); return await this.teamMemberService.getTeamMemberInvitor(u33, v33, w33); } async searchTeamMembers(t33) { this.core.logger.info(l3, 'call API searchTeamMembers', t33); if (typeof t33 === 'undefined' || t33 === null) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'team is invalid' } }); } if (typeof t33.teamId !== 'undefined' && typeof t33.teamId === 'string') { const isValid = await this.teamService.isValidTeam(t33.teamId, t33.teamType); if (!isValid) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'team is invalid' } }); } } return await this.teamMemberService.searchTeamMembers(t33); } async acceptJoinApplication(applicationInfo) { this.core.logger.info(l3, 'call API acceptJoinApplication', applicationInfo); return await this.notificationService.acceptJoinApplication(applicationInfo); } async rejectJoinApplication(applicationInfo, s33) { this.core.logger.info(l3, 'call API rejectJoinApplication', applicationInfo); return await this.notificationService.rejectJoinApplication(applicationInfo, s33); } async getTeamJoinActionInfoList(option) { this.core.logger.info(l3, 'call API getTeamJoinActionInfoList', option); validate(getTeamJoinActionInfoListOptionRules, option, 'option', true); this.core.loginService.checkIllegalState(); return await this.notificationService.getTeamJoinActionInfoList(option); } async clearAllTeamJoinActionInfo() { this.core.logger.info(l3, 'call API clearAllTeamJoinActionInfo'); this.core.loginService.checkIllegalState(); await this.notificationService.clearAllTeamJoinActionInfo(); } async deleteTeamJoinActionInfo(applicationInfo) { this.core.logger.info(l3, 'call API deleteTeamJoinActionInfo', applicationInfo); this.core.loginService.checkIllegalState(); validate(teamJoinActionInfoRules, applicationInfo, '', true); validate(actionTypeRules, applicationInfo, '', true); validate({ timestamp: { type: 'number', min: 1 } }, applicationInfo, '', true); await this.notificationService.deleteTeamJoinActionInfo(applicationInfo.teamId, applicationInfo.teamType, applicationInfo.operatorAccountId, applicationInfo.actionType, applicationInfo.timestamp); } async getTeamMemberListByIdsFromCloud(p33, q33, r33) { return await this.teamMemberService.getTeamMemberListByIdsFromCloud(p33, q33, r33); } async v2IGetLocalTeamMemberById(n33, o33, accountId) { return await this.teamMemberService.getLocalById(n33, o33, accountId); } async getLocalTeamMemberByIds(k33, l33, m33) { return await this.teamMemberService.getLocalByIds(k33, l33, m33); } async upsertLocalTeamMember(member, j33) { await this.teamMemberService.upsertLocal(member, j33); } async upsertLocalTeamMembers(h33, i33) { await this.teamMemberService.upsertLocalBatch(h33, i33); } async updateLocalTeamMember(e33, f33, g33, options) { return await this.teamMemberService.updateLocal(e33, f33, g33, options); } async deleteLocalTeamMemberByAccount(c33, d33, account) { return await this.teamMemberService.deleteLocalByAccount(c33, d33, account); } async deleteLocalTeamMemberByTeamId(a33, b33) { await this.teamMemberService.deleteLocalByTeamId(a33, b33); } async sendAcceptJoinApplication(applicationInfo) { return this.teamMemberService.cloudAcceptJoinApplication(applicationInfo); } async sendRejectJoinApplication(applicationInfo, z32) { return this.teamMemberService.cloudRejectJoinApplication(applicationInfo, z32); } async sendAcceptInvitation(y32) { return this.teamMemberService.cloudAcceptInvitation(y32); } async sendRejectInvitation(w32, x32) { return this.teamMemberService.cloudRejectInvitation(w32, x32); } async notificationOnTeamMemberInfoUpdated(v32) { this.notificationService.onTeamMemberInfoUpdated(v32); } formatTeamNotificationAttachData(t32, u32) { return formatTeamNotificationAttachData(t32, u32); } async v2ITeamProcessSysNotification(notification) { return await this.notificationService.processSysNotification(notification); } async v2ITeamQueryMemberUpdateTimeMap(s32) { return await this.teamService.queryMemberUpdateTimeMap(s32); } async v2IUpdateMemberUpdateTimeMap(q32, type, r32) { return await this.teamService.updateMemberUpdateTimeMap(q32, type, r32); } async teamProcessNotification(msg) { return this.notificationService.enqueueProcessNotification(msg); } async v2IGetTeamMessageMuteMode(m32, n32) { const o32 = await this.teamMemberService.getLocalById(m32, n32, this.core.account); let p32 = 0; if (o32) { p32 = o32.bits ?? 0; } return p32 & 0b11; } async v2IGetTeamMessageMuteModeBatch(d32, e32) { const f32 = await this.teamMemberService.getLocalByTeamIds(d32, e32, this.core.account); const g32 = new HashMap(); for (const l32 of f32) { g32.set(l32.teamId, l32); } const h32 = new HashMap(); for (const i32 of d32) { const j32 = g32.get(i32); let k32 = 0; if (j32) { k32 = j32.bits ?? 0; } h32.set(i32, k32 & 0b11); } return h32; } async v2IUpdateTeamMemberBits(a32, b32, accountId, c32) { await this.updateLocalTeamMember(a32, b32, [accountId], { bits: c32 }); } async v2ISyncTeamSyncHandler(w31) { this.core.logger.info('SyncService', 'v2ISyncTeamSyncHandler start'); const x31 = get(w31.content, 'datas'); x31.map((z31) => { set(z31, 'teamType', V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL); }); const y31 = V2NIMTeamImpl.parseArrayFromCloud(x31); await this.teamService.syncTeamData(y31); await this.core.syncService.updateSyncTimestamp(get(w31.content, 'timetag'), 'teams'); this.core.logger.info('SyncService', 'v2ISyncTeamSyncHandler end'); } async v2ISyncSuperTeamSyncHandler(s31) { this.core.logger.info('SyncService', 'v2ISyncSuperTeamSyncHandler start'); const t31 = get(s31.content, 'datas'); t31.map((v31) => { set(v31, 'teamType', V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER); }); const u31 = V2NIMTeamImpl.parseArrayFromCloud(t31); this.teamService.syncTeamData(u31); await this.core.syncService.updateSyncTimestamp(get(s31.content, 'timetag'), 'superTeams'); this.core.logger.info('SyncService', 'v2ISyncSuperTeamSyncHandler end'); } async v2ISyncTeamMembersOfSelfInSyncHandler(p31) { this.core.logger.info('SyncService', 'v2ISyncTeamMembersOfSelfInSyncHandler start'); const q31 = processTeamMembers(get(p31.content, 'datas'), V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL); const r31 = V2NIMTeamMemberImpl.parseArrayFromCloud(q31); await this.teamMemberService.saveTeamMembersOfSelf(r31); await this.core.syncService.updateSyncTimestamp(get(p31.content, 'timetag'), 'myTeamMembers'); this.core.logger.info('SyncService', 'v2ISyncTeamMembersOfSelfInSyncHandler end'); } async v2ISyncSuperTeamMembersOfSelfInSyncHandler(m31) { this.core.logger.info('SyncService', 'v2ISyncSuperTeamMembersOfSelfInSyncHandler start'); const n31 = processTeamMembers(get(m31.content, 'datas'), V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER); const o31 = V2NIMTeamMemberImpl.parseArrayFromCloud(n31); await this.teamMemberService.saveSuperTeamMembersOfSelf(o31); await this.core.syncService.updateSyncTimestamp(get(m31.content, 'timetag'), 'mySuperTeamMembers'); this.core.logger.info('SyncService', 'v2ISyncSuperTeamMembersOfSelfInSyncHandler end'); } async registerInnerService(k31) { const l31 = k31.databaseService.getDatabase(k31, NIM_DATABASE_NAME_MAIN); this._teamService = new TeamService(k31, l31); this._teamMemberService = new TeamMemberService(k31, l31, this); this._notificationService = new TeamNotificationService(k31, l31, this); await this.teamService.onLogin(); await this.teamMemberService.onLogin(); await this.notificationService.onLogin(); } unRegisterInnerService() { this._notificationService = undefined; this._teamMemberService = undefined; this._teamService = undefined; } setListener() { this.core.eventBus.on('V2NIMTeamService/onSyncStarted', () => { this.core.logger.info(l3, 'team sync start'); this.emit('onSyncStarted'); }); this.core.eventBus.on('V2NIMTeamService/onSyncFinished', () => { this.core.logger.info(l3, 'team sync finished'); this.emit('onSyncFinished'); }); this.core.eventBus.on('V2NIMTeamService/onSyncFailed', (err) => { this.core.logger.error(l3, 'team sync failed', err); this.emit('onSyncFailed', err); }); this.core.eventBus.on('V2NIMTeamService/teamProcessNotification', (msg) => { this.teamProcessNotification(msg); }); } async v2TeamSyncMemberHandler(e31) { this.core.logger.info(l3, 'call Handler v2TeamSyncMemberHandler'); const f31 = processTeamMembers(get(e31.content, 'members'), V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL); const g31 = V2NIMTeamMemberImpl.parseArrayFromCloud(f31); this.core.logger.info(l3, 'v2TeamSyncMemberHandler', g31.length); await this.teamMemberService.syncTeamMemberData(g31); const h31 = get(e31.content, 'timetag'); const i31 = get(e31.content, 'teamId'); if (typeof i31 === 'undefined' || i31 <= 0) { this.core.logger.error(l3, `unexpected teamId in sync team member handler: ${i31}, packet: ${e31}`); } const j31 = i31.toString(); await this.teamService.model.updateMemberUpdateTimeMap(j31, V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL, h31); this.core.syncService.setTeamMemberSyncTimestamp(j31, V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL, h31); } v2SuperTeamSyncMemberHandler(d31) { this.core.logger.info(l3, 'call Handler v2SuperTeamSyncMemberHandler'); this.teamMemberService.v2superTeamSyncMember(d31); } async v2TeamCreateMultiSyncHandler(a31) { this.core.logger.info(l3, 'call Handler v2TeamCreateMultiSyncHandler'); const b31 = get(a31.content, 'data'); set(b31, 'teamType', V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL); const c31 = V2NIMTeamImpl.parseFromCloud(b31); await this.teamService.upsertLocal(c31); await this.teamMemberService.saveSelfAfterCreated(c31); this.emit('onTeamCreated', c31); } async v2SuperTeamCreateMultiSyncHandler(x30) { this.core.logger.info(l3, 'call Handler v2SuperTeamCreateMultiSyncHandler'); const y30 = get(x30.content, 'data'); set(y30, 'teamType', V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER); const z30 = V2NIMTeamImpl.parseFromCloud(y30); await this.teamService.upsertLocal(z30); await this.teamMemberService.saveSelfAfterCreated(z30); this.emit('onTeamCreated', z30); } async v2TeamMemberUpdateMultiSyncHandler(u30) { this.core.logger.info(l3, 'call Handler v2TeamMemberUpdateMultiSyncHandler'); const v30 = processTeamMember(get(u30.content, 'data'), V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL); const w30 = V2NIMTeamMemberImpl.parseFromCloud(v30); this.teamMemberService.updateTeamMember(w30); } async v2SuperTeamMemberUpdateMultiSyncHandler(r30) { this.core.logger.info(l3, 'call Handler v2SuperTeamMemberUpdateMultiSyncHandler'); const s30 = processTeamMember(get(r30.content, 'data'), V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER); const t30 = V2NIMTeamMemberImpl.parseFromCloud(s30); this.teamMemberService.updateSuperTeamMember(t30); } } 