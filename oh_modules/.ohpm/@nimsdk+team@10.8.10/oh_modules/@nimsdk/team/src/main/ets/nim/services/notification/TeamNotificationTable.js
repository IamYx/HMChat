import { RdbPredicates, V2NIMErrorImpl, V2NIMErrorMap, V2NIMTeamJoinActionStatus, V2NIMTeamJoinActionType } from '@nimsdk/base'; import { registerAspect } from './Aspect'; import { SystemMessageTable } from './SystemMessageTable'; import { convert } from './TeamNotificationModel'; const l3 = '[TeamSystemMessageTable]'; export class TeamSystemMessageTable extends SystemMessageTable { constructor(z20, a21) { super(z20, 'team_system_message'); this.logger = a21.logger; registerAspect(TeamSystemMessageTable, a21); } async updateTeamSystemMessageStatus(w20, x20, y20) { try { await this.ensureCreateTable(); this.logger.info(l3, 'updateTeamSystemMessageStatus', w20, x20, y20); let valueBucket = {}; valueBucket['status'] = y20; const predicates = new RdbPredicates('team_system_message'); predicates.equalTo('type', x20); predicates.equalTo('receiverId', w20.teamId); predicates.equalTo('status', V2NIMTeamJoinActionStatus.V2NIM_TEAM_JOIN_ACTION_STATUS_INIT); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(l3, 'updateTeamSystemMessageStatus', w20, x20, y20, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `updateTeamSystemMessageStatus ${this.tableName}`, rawError: e } }); } } async clearAllTeamJoinActionInfo() { try { await this.ensureCreateTable(); this.logger.info(l3, 'clearAllTeamJoinActionInfo'); let valueBucket = {}; valueBucket['status'] = 44; let queryStatus = new Array(); queryStatus.push(V2NIMTeamJoinActionStatus.V2NIM_TEAM_JOIN_ACTION_STATUS_INIT); queryStatus.push(V2NIMTeamJoinActionStatus.V2NIM_TEAM_JOIN_ACTION_STATUS_AGREED); queryStatus.push(V2NIMTeamJoinActionStatus.V2NIM_TEAM_JOIN_ACTION_STATUS_REJECTED); queryStatus.push(V2NIMTeamJoinActionStatus.V2NIM_TEAM_JOIN_ACTION_STATUS_EXPIRED); const predicates = new RdbPredicates('team_system_message'); predicates.in('status', queryStatus); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(l3, 'clearAllTeamJoinActionInfo', e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `clearAllTeamJoinActionInfo ${this.tableName}`, rawError: e } }); } } async deleteTeamJoinActionInfo(t20, u20, v20, timestamp) { try { await this.ensureCreateTable(); this.logger.info(l3, 'deleteTeamJoinActionInfo', t20, u20, v20); const predicates = new RdbPredicates('team_system_message').equalTo('receiverId', t20). and(). equalTo('type', u20). and(). equalTo('senderId', v20). and(). equalTo('timestamp', timestamp); let valueBucket = {}; valueBucket['status'] = 44; await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(l3, 'deleteTeamJoinActionInfo', e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `deleteTeamJoinActionInfo ${this.tableName}`, rawError: e } }); } } async queryTeamSystemMessages(option) { try { await this.ensureCreateTable(); this.logger.info(l3, 'queryTeamSystemMessages', option); const predicates = new RdbPredicates('team_system_message'); const types = option.types; const status = option.status; const offset = option.offset ?? 0; const limit = option.limit ?? 50; let p20 = new Array(); if (types && types.length > 0) { for (const type of types) { switch (type) { case V2NIMTeamJoinActionType.V2NIM_TEAM_JOIN_ACTION_TYPE_APPLICATION: p20.push(0); p20.push(15); break; case V2NIMTeamJoinActionType.V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_APPLICATION: p20.push(1); p20.push(16); break; case V2NIMTeamJoinActionType.V2NIM_TEAM_JOIN_ACTION_TYPE_INVITATION: p20.push(2); p20.push(17); break; case V2NIMTeamJoinActionType.V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_INVITATION: p20.push(3); p20.push(18); break; default: break; } } } else { p20.push(0); p20.push(1); p20.push(2); p20.push(3); p20.push(15); p20.push(16); p20.push(17); p20.push(18); } if (p20.length <= 0) { return { infos: [], offset: offset, finished: true }; } predicates.in('type', p20); let queryStatus = new Array(); if (status && status.length > 0) { for (let s20 of status) { queryStatus.push(s20); } } else { queryStatus.push(V2NIMTeamJoinActionStatus.V2NIM_TEAM_JOIN_ACTION_STATUS_INIT); queryStatus.push(V2NIMTeamJoinActionStatus.V2NIM_TEAM_JOIN_ACTION_STATUS_AGREED); queryStatus.push(V2NIMTeamJoinActionStatus.V2NIM_TEAM_JOIN_ACTION_STATUS_REJECTED); queryStatus.push(V2NIMTeamJoinActionStatus.V2NIM_TEAM_JOIN_ACTION_STATUS_EXPIRED); } predicates.in('status', queryStatus).and().notEqualTo('status', 44); predicates.offsetAs(offset); predicates.limitAs(limit + 1); predicates.orderByDesc('timestamp'); const q20 = []; const values = await this.rdbStoreManager.query(predicates); values.map(value => { let r20 = { idServer: value['idServer'], receiverId: value['receiverId'], senderId: value['senderId'], type: value['type'], timestamp: value['timestamp'], postscript: value['postscript'], content: value['content'], status: value['status'], unread: value['unread'] }; q20.push(convert(r20)); }); if (q20.length > limit) { q20.pop(); return { infos: q20, offset: offset + limit, finished: false }; } else { return { infos: q20, offset: offset + limit, finished: true }; } } catch (e) { this.logger.error(l3, 'queryTeamSystemMessages', option, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryTeamSystemMessages ${this.tableName}`, rawError: e } }); } } } 