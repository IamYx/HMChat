import { ColumnInfo, NIM, PickForRequiredAndPartialTheRest, RdbStoreManager, RdbTableImpl, TableType, V2NIMTeam, V2NIMTeamChatBannedMode, V2NIMTeamType } from '@nimsdk/base'; import { V2NIMTeamImpl } from './V2NIMTeamImpl'; import { HashMap } from '@kit.ArkTS'; export declare const enum COL_NAME { TEAM_TYPE = "team_type", TEAM_ID = "team_id", NAME = "name", OWNER_ACCOUNT_ID = "owner_account_id", MEMBER_LIMIT = "member_limit", MEMBER_COUNT = "member_count", CREATE_TIME = "create_time", UPDATE_TIME = "update_time", INTRO = "intro", ANNOUNCEMENT = "announcement", AVATAR = "avatar", SERVER_EXTENSION = "server_extension", CUSTOMER_EXTENSION = "customer_extension", JOIN_MODE = "join_mode", AGREE_MODE = "agree_mode", INVITE_MODE = "invite_mode", UPDATE_INFO_MODE = "update_info_mode", UPDATE_EXTENSION_MODE = "update_extension_mode", CHAT_BANNED_MODE = "chat_banned_mode", VALID_FLAG = "valid_flag", VALID_MEMBER = "valid_member", TAG_TYPE = "tag_type", BITS = "bits", TLIST_TIMETAG = "tlist_timetag", TLIST_LOCAL_TIMETAG = "tlist_local_timetag", MEMBER_UPDATE_TIME = "member_update_time" } export declare const TEAM_TABLE: TableType; export declare const TeamColumns: ColumnInfo[]; export declare class TeamTable extends RdbTableImpl { private logger; constructor(d28: RdbStoreManager, e28: NIM); createTable(): Promise<void>; upsertTeam(b28: V2NIMTeamImpl): Promise<void>; upsertTeams(y27: V2NIMTeamImpl[]): Promise<void>; queryMyTeams(types?: V2NIMTeamType[]): Promise<V2NIMTeamImpl[]>; queryMyTeamsCount(): Promise<number>; getTeamInfo(t27: string, u27: V2NIMTeamType, v27?: boolean): Promise<V2NIMTeamImpl | undefined>; getTeamInfoByIds(o27: string[], p27: V2NIMTeamType, q27?: boolean): Promise<V2NIMTeamImpl[]>; getTeamsInfo(k27: V2NIMTeamType, l27?: boolean): Promise<V2NIMTeamImpl[]>; updateTeamInfo(j27: PickForRequiredAndPartialTheRest<V2NIMTeam, 'teamId' | 'teamType'>): Promise<void>; updateChatMode(g27: string, h27: V2NIMTeamType, i27: V2NIMTeamChatBannedMode): Promise<void>; queryTeam(e27: string, f27: V2NIMTeamType): Promise<V2NIMTeamImpl | undefined>; queryTeams(a27: string[], b27: V2NIMTeamType): Promise<V2NIMTeamImpl[]>; setTeams(x26: V2NIMTeamImpl[]): Promise<void>;               delete(v26: V2NIMTeamType, w26: string): Promise<number>; search(r26: string): Promise<V2NIMTeamImpl[]>; isValidTeam(q26: string, type: V2NIMTeamType): Promise<boolean>;           getMemberUpdateTimeMap(type: V2NIMTeamType): Promise<HashMap<string, number>>; updateMemberUpdateTimeMap(l26: string, type: V2NIMTeamType, m26: number): Promise<void>; } 