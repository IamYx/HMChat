import { V2NIMErrorImpl, V2NIMQueryDirection, V2NIMTeamMemberRole, V2NIMTeamMemberRoleQueryType, V2NIMTeamType } from '@nimsdk/base'; import { get } from '@nimsdk/vendor'; import { V2NIMTeamImpl } from '../team/V2NIMTeamImpl'; import { SuperTeamMemberDoSyncRequest, SuperTeamMemberSetChatBannedStatusRequest, TeamAcceptInvitationRequest, TeamAcceptJoinApplicationRequest, TeamApplyToJoinRequest, TeamGetMemberInvitorRequest, TeamInviteMembersRequest, TeamKickMembersRequest, TeamMemberDoSyncRequest, TeamMemberGetListByIdsRequest, TeamMemberGetListParam, TeamMemberGetListRequest, TeamMemberRequest, TeamMemberSetChatBannedStatusRequest, TeamRejectInviteRequest, TeamRejectJoinApplicationRequest, TeamUpdateMemberRequest, TeamUpdateSelfMemberInfo, TeamUpdateSelfMemberInfoRequest, TeamUpdateTeamMemberRoleRequest } from './cloud/TeamMemberCloudRequest'; import { TeamMemberListResult, NormalTeamMemberDoSyncResult, SuperTeamMemberDoSyncResult } from './cloud/TeamMemberCloudResult'; import HashMap from "@ohos.util.HashMap"; import { V2NIMTeamMemberImpl } from './V2NIMTeamMemberImpl'; const l3 = '[TeamMemberCloud]'; export class TeamMemberCloud { constructor(f7) { this.core = f7; } async getTeamMemberInvitor(z6, a7, b7) { const cmd = a7 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER ? 'v2SuperTeamGetMemberInvitor' : 'v2TeamGetMemberInvitor'; const c7 = new TeamGetMemberInvitorRequest(z6, b7); const d7 = (await this.core.sendCmd(cmd, c7)); const e7 = get(d7.content, 'accountsMap'); const map = new HashMap(); for (const key of Object.keys(e7)) { map.set(key, e7[key]); } return map; } async getTeamMemberListByIds(s6, t6, u6) { const cmd = t6 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER ? 'v2SuperTeamMemberGetListByIds' : 'v2TeamMemberGetListByIds'; const params = u6.map((id) => `${s6}|${id}`); const v6 = new TeamMemberGetListByIdsRequest(params); const w6 = await this.core.sendCmd(cmd, v6); const x6 = processTeamMembers(get(w6.content, 'datas'), t6); const y6 = V2NIMTeamMemberImpl.parseArrayFromCloud(x6); return y6; } async setTeamMemberChatBannedStatus(n6, o6, accountId, p6) { if (o6 === V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL) { const cmd = 'v2TeamMemberSetChatBannedStatus'; const r6 = new TeamMemberSetChatBannedStatusRequest(n6, accountId, p6 ? 1 : 0); await this.core.sendCmd(cmd, r6); } else if (o6 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER) { const cmd = 'v2SuperTeamMemberSetChatBannedStatus'; const q6 = new SuperTeamMemberSetChatBannedStatusRequest(n6, [accountId], p6 ? 1 : 0); await this.core.sendCmd(cmd, q6); } else { this.core.logger.error(l3, 'setTeamMemberChatBannedStatus, teamType is illegal.'); } } async updateTeamMemberNick(i6, j6, accountId, k6) { const cmd = j6 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER ? 'v2SuperTeamUpdateMember' : 'v2TeamUpdateMember'; const l6 = new TeamMemberRequest(k6, i6, accountId); const m6 = new TeamUpdateMemberRequest(l6); await this.core.sendCmd(cmd, m6); } async updateSelfTeamMemberInfo(d6, e6, f6) { const cmd = d6 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER ? 'v2SuperTeamUpdateSelfMemberInfo' : 'v2TeamUpdateSelfMemberInfo'; const g6 = new TeamUpdateSelfMemberInfo(e6, this.core.account, f6.teamNick, f6.serverExtension); const h6 = new TeamUpdateSelfMemberInfoRequest(g6); await this.core.sendCmd(cmd, h6); } async updateTeamMemberRole(y5, z5, a6, b6) { let cmd = b6 === V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER ? 'AddManagers' : 'RemoveManagers'; cmd = z5 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER ? `v2SuperTeam${cmd}` : `v2Team${cmd}`; const c6 = new TeamUpdateTeamMemberRoleRequest(y5, a6); await this.core.sendCmd(cmd, c6); } async rejectJoinApplication(applicationInfo, t5) { const u5 = applicationInfo.teamType; const v5 = applicationInfo.teamId; const w5 = applicationInfo.operatorAccountId; const cmd = u5 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER ? 'v2SuperTeamRejectJoinApplication' : 'v2TeamRejectJoinApplication'; const x5 = new TeamRejectJoinApplicationRequest(v5, w5, t5 || ''); await this.core.sendCmd(cmd, x5); } async acceptJoinApplication(applicationInfo) { const p5 = applicationInfo.teamType; const q5 = applicationInfo.teamId; const r5 = applicationInfo.operatorAccountId; const cmd = p5 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER ? 'v2SuperTeamAcceptJoinApplication' : 'v2TeamAcceptJoinApplication'; const s5 = new TeamAcceptJoinApplicationRequest(q5, r5); await this.core.sendCmd(cmd, s5); } async applyJoinTeam(h5, i5, j5) { const cmd = i5 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER ? 'v2SuperTeamApplyToJoin' : 'v2TeamApplyToJoin'; const k5 = new TeamApplyToJoinRequest(h5, j5 || ''); const l5 = (await this.core.sendCmd(cmd, k5)); const m5 = get(l5.content, 'team'); const n5 = get(l5.content, 'isInTeam'); const o5 = V2NIMTeamImpl.parseFromCloud(m5); o5.isValidTeam = o5.isValidTeam ? !!n5 : false; return o5; } async kickMember(d5, e5, f5) { const cmd = e5 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER ? 'v2SuperTeamKickMembers' : 'v2TeamKickMembers'; const g5 = new TeamKickMembersRequest(d5, f5); await this.core.sendCmd(cmd, g5); return; } async rejectInvitation(x4, y4) { const z4 = x4.teamType; const a5 = x4.teamId; const b5 = x4.operatorAccountId; const cmd = z4 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER ? 'v2SuperTeamRejectInvite' : 'v2TeamRejectInvite'; const c5 = new TeamRejectInviteRequest(a5, b5, y4 || ''); await this.core.sendCmd(cmd, c5); return; } async acceptInvitation(p4) { const q4 = p4.teamType; const r4 = p4.teamId; const s4 = p4.operatorAccountId; const cmd = q4 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER ? 'v2SuperTeamAcceptInvitation' : 'v2TeamAcceptInvitation'; const t4 = new TeamAcceptInvitationRequest(r4, s4); const u4 = (await this.core.sendCmd(cmd, t4)); const v4 = get(u4.content, 'team'); const w4 = V2NIMTeamImpl.parseFromCloud(v4); return w4; } async inviteMember(i4, j4, k4, l4, m4) { const cmd = j4 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER ? 'v2SuperTeamInviteMembers' : 'v2TeamInviteMembers'; const n4 = new TeamInviteMembersRequest(i4, k4, l4 || '', m4 || ''); const o4 = (await this.core.sendCmd(cmd, n4)); return get(o4.content, 'abortedAccidList'); } async getTeamMemberList(b4, c4, d4) { let direction = d4.direction ?? V2NIMQueryDirection.V2NIM_QUERY_DIRECTION_DESC; direction = direction === V2NIMQueryDirection.V2NIM_QUERY_DIRECTION_DESC ? 1 : 0; const tag = new TeamMemberGetListParam(b4, c4, d4.roleQueryType ?? V2NIMTeamMemberRoleQueryType.V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_ALL, d4.onlyChatBanned ?? false, d4.limit ?? 100, d4.nextToken ?? '', direction); const e4 = new TeamMemberGetListRequest(tag); const f4 = (await this.core.sendCmd('v2TeamMemberGetList', e4)); const g4 = processTeamMembers(get(f4.content, 'datas'), c4); const h4 = V2NIMTeamMemberImpl.parseArrayFromCloud(g4); return new TeamMemberListResult(get(f4.content, 'pageInfo.hasMore') != 1, get(f4.content, 'pageInfo.nextToken') || '', h4); } async normalTeamMemberDoSync(v3, w3) { const x3 = new TeamMemberDoSyncRequest(v3, w3); const y3 = (await this.core.sendCmd('v2TeamMemberDoSync', x3)); if (get(y3.raw, 'code') === 406) { throw new V2NIMErrorImpl({ code: get(y3.raw, 'code'), desc: 'normalTeamMemberDoSync, No update required' }); } const z3 = processTeamMembers(get(y3.content, 'members'), V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL); const a4 = V2NIMTeamMemberImpl.parseArrayFromCloud(z3); const result = new NormalTeamMemberDoSyncResult(get(y3.content, 'teamId'), a4, get(y3.content, 'timetag'), get(y3.content, 'fullSync')); return result; } async superTeamMemberDoSync(r3, s3) { const t3 = new SuperTeamMemberDoSyncRequest(r3, s3); const u3 = (await this.core.sendCmd('v2SuperTeamMemberDoSync', t3)); const result = new SuperTeamMemberDoSyncResult(get(u3.content, 'timetag')); return result; } } export function processTeamMember(p3, q3) { p3.teamType = q3; p3.chatBanned = p3.chatBanned ?? false; p3.bits = p3.bits ?? 0; return p3; } export function processTeamMembers(m3, n3) { return m3.map((member) => { return processTeamMember(member, n3); }); } export function coverV2NIMTeamMemberFieldByAnother(to, from) { if (typeof from.bits !== 'undefined') { to.bits = from.bits; } if (typeof from.teamId !== 'undefined') { to.teamId = from.teamId; } if (typeof from.teamType !== 'undefined') { to.teamType = from.teamType; } if (typeof from.accountId !== 'undefined') { to.accountId = from.accountId; } if (typeof from.memberRole !== 'undefined') { to.memberRole = from.memberRole; } if (typeof from.teamNick !== 'undefined') { to.teamNick = from.teamNick; } if (typeof from.serverExtension !== 'undefined') { to.serverExtension = from.serverExtension; } if (typeof from.joinTime !== 'undefined') { to.joinTime = from.joinTime; } if (typeof from.updateTime !== 'undefined') { to.updateTime = from.updateTime; } if (typeof from.inTeam !== 'undefined') { to.inTeam = from.inTeam; } if (typeof from.chatBanned !== 'undefined') { to.chatBanned = from.chatBanned; } } 