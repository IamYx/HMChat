import { NIM_DATABASE_NAME_MAIN, V2NIMErrorCode, V2NIMErrorImpl, V2NIMTeamMemberRole, V2NIMTeamType, validate, V2NIMSortOrder, V2NIMTeamMemberRoleQueryType } from '@nimsdk/base'; import { get } from '@nimsdk/vendor'; import { applicationInfoRules, booleanRule, invitationInfoRules, memberInfoParamsRules, memberRoleRule, searchOptionRules, queryOptionRules, strArrayRule, stringNotEmptyRule, stringRule, teamIdRules, teamJoinActionInfoRules, teamTypeRules } from '../rules'; import { SearchOptionModel } from './SearchOptionModel'; import { coverV2NIMTeamMemberFieldByAnother, processTeamMembers, TeamMemberCloud } from './TeamMemberCloud'; import TeamMemberModel from './TeamMemberModel'; import HashMap from "@ohos.util.HashMap"; import { V2NIMTeamMemberImpl } from './V2NIMTeamMemberImpl'; import { GetTeamMemberListToken, QueryTeamMemberMode } from './types/GetTeamMemberListToken'; const l3 = '[TeamMemberService]'; export class TeamMemberService { constructor(l13, m13, service) { this.core = l13; this.service = service; this.syncTMEventProcessors = new HashMap(); } get model() { if (this._model) { return this._model; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: `V2NIMTeamService.teamMemberService model is unavailable` } }); } } get cloud() { if (this._cloud) { return this._cloud; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'V2NIMFriendService.teamMemberService cloud is unavailable' } }); } } async onLogin() { this.registerInnerService(this.core); } onLogout() { this.unRegisterInnerService(); } async clearTeamMembers(j13, k13) { try { this.core.logger.info(l3, 'clearTeamMembers', j13, k13); await this.model.updateTeamMemberValidByTeamId(k13, j13, false); } catch (e) { this.core.logger.error(l3, 'clearTeamMembers', j13, k13, JSON.stringify(e)); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `dismissTeam, clearTeamMembers ${JSON.stringify(e)}`, rawError: e } }); } } } async inviteMember(e13, f13, g13, h13, i13) { try { this.core.logger.info(l3, 'inviteMember', e13, f13, g13, h13, i13); validate(teamIdRules, { teamId: e13 }, '', true); validate(teamTypeRules, { teamType: f13 }, '', true); validate({ inviteeAccountIds: strArrayRule }, { inviteeAccountIds: g13 }, '', true); validate({ postscript: { type: stringRule.type, required: false } }, { postscript: h13 }, '', true); validate({ serverExtension: { type: stringRule.type, required: false } }, { serverExtension: i13 }, '', true); return await this.cloud.inviteMember(e13, f13, g13, h13, i13); } catch (e) { this.core.logger.error(l3, 'inviteMember', e13, f13, g13, h13, i13, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `inviteMember ${JSON.stringify(e)}`, rawError: e } }); } } } async kickMember(b13, c13, d13) { try { this.core.logger.info(l3, 'kickMember', b13, c13, d13); validate(teamIdRules, { teamId: b13 }, '', true); validate(teamTypeRules, { teamType: c13 }, '', true); validate({ i: strArrayRule }, { i: d13 }, '', true); return await this.cloud.kickMember(b13, c13, d13); } catch (e) { this.core.logger.error(l3, 'kickMember', b13, c13, d13, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `kickMember ${JSON.stringify(e)}`, rawError: e } }); } } } async applyJoinTeam(y12, z12, a13) { try { this.core.logger.info(l3, 'applyJoinTeam', y12, z12, a13); validate(teamIdRules, { teamId: y12 }, '', true); validate(teamTypeRules, { teamType: z12 }, '', true); return await this.cloud.applyJoinTeam(y12, z12, a13); } catch (e) { this.core.logger.error(l3, 'applyJoinTeam', y12, z12, a13, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `applyJoinTeam ${JSON.stringify(e)}`, rawError: e } }); } } } async updateTeamMemberRole(u12, v12, w12, x12) { try { this.core.logger.info(l3, 'updateTeamMemberRole', u12, v12, w12, JSON.stringify(x12)); validate(teamIdRules, { teamId: u12 }, '', true); validate(teamTypeRules, { teamType: v12 }, '', true); validate({ i: strArrayRule }, { i: w12 }, '', true); validate({ memberRole: memberRoleRule }, { memberRole: x12 }, '', true); return await this.cloud.updateTeamMemberRole(u12, v12, w12, x12); } catch (e) { this.core.logger.error(l3, 'updateTeamMemberRole', u12, v12, w12, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `updateTeamMemberRole ${JSON.stringify(e)}`, rawError: e } }); } } } async updateSelfTeamMemberInfo(q12, r12, s12) { try { this.core.logger.info(l3, 'updateSelfTeamMemberInfo', q12, r12, s12); validate(teamIdRules, { teamId: q12 }, '', true); validate(teamTypeRules, { teamType: r12 }, '', true); validate(memberInfoParamsRules, { memberInfoParams: s12 }, '', true); if (typeof s12.teamNick === 'undefined' && typeof s12.serverExtension === 'undefined') { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER }); } await this.cloud.updateSelfTeamMemberInfo(r12, q12, s12); const t12 = { teamNick: s12.teamNick, serverExtension: s12.serverExtension, teamId: q12, accountId: this.core.account }; await this.updateLocal(q12, r12, [this.core.account], t12); } catch (e) { this.core.logger.error(l3, 'updateSelfTeamMemberInfo', q12, r12, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `updateSelfTeamMemberInfo ${JSON.stringify(e)}`, rawError: e } }); } } } async updateTeamMemberNick(m12, n12, accountId, o12) { try { this.core.logger.info(l3, 'updateTeamMemberNick', m12, n12, accountId, o12); validate(teamIdRules, { teamId: m12 }, '', true); validate(teamTypeRules, { teamType: n12 }, '', true); validate({ accountId: stringNotEmptyRule }, { accountId: accountId }, '', true); validate({ j: stringRule }, { j: o12 }, '', true); if (accountId == this.core.account) { const p12 = { teamNick: o12 }; return await this.updateSelfTeamMemberInfo(m12, n12, p12); } else { return await this.cloud.updateTeamMemberNick(m12, n12, accountId, o12); } } catch (e) { this.core.logger.error(l3, 'updateTeamMemberNick', m12, n12, accountId, o12, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `updateTeamMemberNick ${JSON.stringify(e)}`, rawError: e } }); } } } async setTeamMemberChatBannedStatus(j12, k12, accountId, l12) { try { this.core.logger.info(l3, 'setTeamMemberChatBannedStatus', j12, k12, accountId, l12); validate(teamIdRules, { teamId: j12 }, '', true); validate(teamTypeRules, { teamType: k12 }, '', true); validate({ accountId: stringNotEmptyRule }, { accountId: accountId }, '', true); validate({ chatBanned: booleanRule }, { chatBanned: l12 }, '', true); await this.cloud.setTeamMemberChatBannedStatus(j12, k12, accountId, l12); return; } catch (e) { this.core.logger.error(l3, 'setTeamMemberChatBannedStatus', j12, k12, accountId, l12, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `setTeamMemberChatBannedStatus ${JSON.stringify(e)}`, rawError: e } }); } } } async getTeamMemberList(e12, f12, g12) { try { this.core.logger.info(l3, 'getTeamMemberList', e12, f12, g12); validate(teamIdRules, { teamId: e12 }, '', true); validate(teamTypeRules, { teamType: f12 }, '', true); validate(queryOptionRules, { queryOption: g12 }, '', true); let h12 = QueryTeamMemberMode.REMOTE; const token = GetTeamMemberListToken.buildByTokenStr(g12.nextToken); if (token) { h12 = token.isLocalToken() ? QueryTeamMemberMode.LOCAL : QueryTeamMemberMode.REMOTE; } else { h12 = await this.evaluateQueryMode(e12, f12, g12); } switch (h12) { case QueryTeamMemberMode.SYNC_AND_LOCAL: try { await this.refreshLocalTeamMember(e12, f12); } catch (e) { } break; case QueryTeamMemberMode.REMOTE: case QueryTeamMemberMode.LOCAL: default: break; } switch (h12) { case QueryTeamMemberMode.LOCAL: case QueryTeamMemberMode.SYNC_AND_LOCAL: const i12 = await this.model.queryByOptions(f12, e12, g12, token); return i12; case QueryTeamMemberMode.REMOTE: default: const result = await this.cloud.getTeamMemberList(e12, f12, g12); await this.model.upsert(result.memberList); return result; } } catch (e) { this.core.logger.error(l3, 'getTeamMemberList', e12, f12, g12, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getTeamMemberList ${JSON.stringify(e)}`, rawError: e } }); } } } async isNeedRefreshTeamMember(a12, b12) { const c12 = this.core.syncService.getTeamMemberSyncTimestamp(a12, b12); const d12 = (await this.service.getTeamInfo(a12, b12)).memberUpdateTime; if (c12 <= 0 || d12 <= 0 || c12 < d12) { return true; } else { return false; } } async refreshLocalTeamMember(u11, v11) { try { const x11 = this.core.syncService.getTeamMemberSyncTimestamp(u11, v11); const y11 = (await this.service.getTeamInfo(u11, v11)).memberUpdateTime; let z11 = false; if (x11 <= 0 || y11 <= 0 || x11 < y11) { z11 = true; if (v11 === V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL) { const startTime = new Date().getTime(); const result = await this.cloud.normalTeamMemberDoSync(u11, x11); const endTime = new Date().getTime(); this.core.logger.info(l3, `normalTeamMemberDoSync, cost:${endTime - startTime}ms`); this.core.logger.info(l3, `normalTeamMemberDoSync, teamId: ${result.teamId}, members.length: ${result.members.length}, timetag: ${result.timetag}, fullSync: ${result.fullSync}`); await this.syncTeamMemberData(result.members); this.service.v2IUpdateMemberUpdateTimeMap(u11, V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL, result.timetag); this.core.syncService.setTeamMemberSyncTimestamp(u11, V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL, result.timetag); } else if (v11 === V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER) { this.syncTMEventProcessors.set(u11, new SyncTMEventProcessor()); const startTime = new Date().getTime(); const result = await this.cloud.superTeamMemberDoSync(u11, x11); const endTime = new Date().getTime(); this.core.logger.info(l3, `superTeamMemberDoSync, cost:${endTime - startTime}ms`); await this.syncTMEventProcessors.get(u11).enqueueEmptyEvent(); this.core.logger.info(l3, `superTeamMemberDoSync, teamId: ${u11}, timetag: ${result.timetag}`); this.service.v2IUpdateMemberUpdateTimeMap(u11, V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER, result.timetag); this.core.syncService.setTeamMemberSyncTimestamp(u11, V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER, result.timetag); } } return; } catch (e) { this.core.logger.error(l3, `refreshLocalTeamMember`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { const w11 = e; if (w11.code === V2NIMErrorCode.V2NIM_ERROR_CODE_TEAM_MEMBER_NOT_EXIST || w11.code === 406 || w11.code === V2NIMErrorCode.V2NIM_ERROR_CODE_TEAM_NOT_EXIST) { } else { } } else { } } } async getTeamMemberListByIds(p11, q11, r11) { try { this.core.logger.info(l3, 'getTeamMemberListByIds', p11, q11, r11); validate(teamIdRules, { teamId: p11 }, '', true); validate(teamTypeRules, { teamType: q11 }, '', true); validate({ accountIds: strArrayRule }, { accountIds: r11 }, '', true); if (r11.length === 1 && r11[0] === this.core.account) { if (await this.isNeedRefreshTeamMember(p11, q11)) { const t11 = await this.cloud.getTeamMemberListByIds(p11, q11, [this.core.account]); await this.model.upsert(t11); } else { } } else { await this.refreshLocalTeamMember(p11, q11); } const s11 = await this.model.getByIds(q11, p11, r11); return s11; } catch (e) { this.core.logger.error(l3, 'getTeamMemberListByIds', p11, q11, r11, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getTeamMemberListByIds ${JSON.stringify(e)}`, rawError: e } }); } } } async getTeamMemberListByIdsFromCloud(l11, m11, n11) { try { this.core.logger.info(l3, 'getTeamMemberListByIdsFromCloud', l11, m11, n11); validate(teamIdRules, { teamId: l11 }, '', true); validate(teamTypeRules, { teamType: m11 }, '', true); validate({ accountIds: strArrayRule }, { accountIds: n11 }, '', true); const o11 = await this.cloud.getTeamMemberListByIds(l11, m11, n11); await this.model.upsert(o11); } catch (e) { this.core.logger.error(l3, 'getTeamMemberListByIdsFromCloud', l11, m11, n11, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getTeamMemberListByIdsFromCloud ${JSON.stringify(e)}`, rawError: e } }); } } } async getTeamMemberInvitor(c11, d11, e11) { try { this.core.logger.info(l3, 'getTeamMemberInvitor', c11, d11, e11); validate(teamIdRules, { teamId: c11 }, '', true); validate(teamTypeRules, { teamType: d11 }, '', true); validate({ accountIds: strArrayRule }, { accountIds: e11 }, '', true); const f11 = await this.model.getByIds(d11, c11, e11); const g11 = new Map(); for (const k11 of f11) { if (k11.invitorAccountId && k11.invitorAccountId !== '') { g11.set(k11.accountId, k11.invitorAccountId); } } if (g11.size !== e11.length) { const i11 = e11.filter(id => { return !g11.has(id); }); const j11 = await this.cloud.getTeamMemberInvitor(c11, d11, i11); this.model.updateTeamMemberInvitor(d11, c11, j11); for (const key of j11.keys()) { g11.set(key, j11.get(key) ?? ''); } } const h11 = {}; for (const key of g11.keys()) { h11[key] = g11.get(key) ?? ''; } return h11; } catch (e) { this.core.logger.error(l3, 'getTeamMemberInvitor', c11, d11, e11, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getTeamMemberInvitor ${JSON.stringify(e)}`, rawError: e } }); } } } async searchTeamMembers(w10) { try { this.core.logger.info(l3, 'getTeamMembers', w10); validate(searchOptionRules, { searchOption: w10 }, '', true); const order = w10.order ?? V2NIMSortOrder.V2NIM_SORT_ORDER_DESC; const x10 = await this.model.getByKeyword(w10.keyword, w10.teamType, order, w10.teamId); const y10 = new SearchOptionModel(w10); if (y10.nextToken !== '' && y10.getToken() !== y10.token) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `next token invalid` } }); } const offset = y10.offset; const limit = w10.limit ?? 10; const count = x10.length; let z10 = w10.nextToken; let a11 = true; let b11 = []; if (offset >= count) { b11 = x10; z10 = ""; } else if (limit <= 0 || offset + limit >= count) { b11 = x10.slice(offset, count); z10 = ""; } else { b11 = x10.splice(offset, limit); z10 = y10.makeNextToken(offset + limit); a11 = false; } const result = { memberList: b11, nextToken: z10, finished: a11 }; return result; } catch (e) { this.core.logger.error(l3, 'getTeamMembers', w10, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getTeamMembers ${JSON.stringify(e)}`, rawError: e } }); } } } async getLocalById(u10, v10, accountId) { return await this.model.getById(v10, u10, accountId); } async getLocalByIds(r10, s10, t10) { return await this.model.getByIds(s10, r10, t10); } async getLocalByTeamIds(p10, q10, accountId) { return await this.model.getByTeams(q10, p10, accountId); } async upsertLocal(member, o10) { await this.model.upsert(member); if (o10) { this.service.emit('onTeamMemberJoined', [member]); } } async upsertLocalBatch(m10, n10) { await this.model.upsert(m10); if (n10) { this.service.emit('onTeamMemberJoined', m10); } } async deleteLocalByAccount(k10, l10, account) { return await this.model.deleteOneAndReturn(l10, k10, account); } async deleteLocalByTeamId(i10, j10) { await this.model.deleteByTeamId(j10, i10); } async updateLocal(c10, d10, e10, options) { this.core.logger.info(l3, 'updateLocal', c10, d10, e10, options); const f10 = []; for (let g10 = 0; g10 < e10.length; ++g10) { const accountId = e10[g10]; const h10 = await this.getLocalById(c10, d10, accountId); if (h10) { let option = {}; if (Array.isArray(options)) { option = options[g10]; } else { option = options; } coverV2NIMTeamMemberFieldByAnother(h10, option); await this.model.upsert(h10); } else { f10.push(accountId); } } if (f10.length > 0) { try { await this.getTeamMemberListByIds(c10, d10, f10); } catch (err) { this.core.logger.warn('v2Team::processNotification, getTeamMemberListByIds failed', err); } } const updated = await this.getLocalByIds(c10, d10, e10); if (updated.length > 0) { this.service.notificationOnTeamMemberInfoUpdated(updated); } } async syncTeamMemberData(b10) { await this.upsertLocalBatch(b10, false); } async saveTeamMembersOfSelf(a10) { await this.saveMembersOfSelf(a10, V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL); } async saveSuperTeamMembersOfSelf(z9) { await this.saveMembersOfSelf(z9, V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER); } updateTeamMember(y9) { this.updateMember(y9); } updateSuperTeamMember(x9) { this.updateMember(x9); } async saveSelfAfterCreated(v9) { const w9 = V2NIMTeamMemberImpl.buildFromParams(v9.teamId, v9.teamType, this.core.account, V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_OWNER, undefined, undefined, v9.createTime, v9.createTime, this.core.account, true, false, undefined); this.model.upsert(w9); return; } async cloudAcceptInvitation(u9) { validate(teamJoinActionInfoRules, u9, 'invitationInfo', true); validate(invitationInfoRules, u9, 'invitationInfo', true); return await this.cloud.acceptInvitation(u9); } async cloudRejectInvitation(s9, t9) { validate(teamJoinActionInfoRules, s9, 'invitationInfo', true); validate(invitationInfoRules, s9, 'invitationInfo', true); validate({ postscript: { type: stringRule.type, required: false } }, { postscript: t9 }, '', true); return await this.cloud.rejectInvitation(s9, t9); } async cloudAcceptJoinApplication(applicationInfo) { validate(teamJoinActionInfoRules, applicationInfo, 'applicationInfo', true); validate(applicationInfoRules, applicationInfo, 'applicationInfo', true); return await this.cloud.acceptJoinApplication(applicationInfo); } async cloudRejectJoinApplication(applicationInfo, r9) { validate(teamJoinActionInfoRules, applicationInfo, 'applicationInfo', true); validate(applicationInfoRules, applicationInfo, 'applicationInfo', true); return await this.cloud.rejectJoinApplication(applicationInfo, r9); } registerInnerService(p9) { let q9 = p9.databaseService.getDatabase(p9, NIM_DATABASE_NAME_MAIN); this._model = new TeamMemberModel(q9, p9); this._cloud = new TeamMemberCloud(p9); } unRegisterInnerService() { this._model = undefined; this._cloud = undefined; } async saveMembersOfSelf(n9, o9) { await this.model.updateMembersOfSelf(o9, this.core.account, n9); } updateMember(l9) { this.getLocalById(l9.teamId, l9.teamType, l9.accountId) .then((m9) => { this.updateLocal(l9.teamId, l9.teamType, [l9.accountId], l9); if (l9.accountId === this.core.account && m9 && m9.bits !== l9.bits) { this.core.eventBus.emit('V2NIMSettingService/updateBits', l9.teamId, l9.teamType, l9.bits); } }); } v2superTeamSyncMember(j9) { const k9 = get(j9.content, 'teamId').toString(); if (this.syncTMEventProcessors.hasKey(k9)) { this.syncTMEventProcessors.get(k9).enqueueEvent(new SyncTMEvent('v2superTeamSyncMember', () => this.v2ISuperTeamSyncMemberHandler(j9))); } else { this.v2ISuperTeamSyncMemberHandler(j9); } } async v2ISuperTeamSyncMemberHandler(g9) { const h9 = processTeamMembers(get(g9.content, 'members'), V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER); const i9 = V2NIMTeamMemberImpl.parseArrayFromCloud(h9); this.core.logger.info(l3, 'v2ISuperTeamSyncMemberHandler', i9.length); await this.syncTeamMemberData(i9); return; } async evaluateQueryMode(a9, b9, c9) { const d9 = await this.service.v2IGetLocalTeamById(a9, b9); if (!d9 || !d9.isValidTeam) { return QueryTeamMemberMode.REMOTE; } const e9 = this.core.syncService.getTeamMemberSyncTimestamp(a9, b9); if (e9 <= 0 || d9.memberUpdateTime <= 0 || e9 < d9.memberUpdateTime) { const f9 = (c9.roleQueryType === undefined || c9.roleQueryType === V2NIMTeamMemberRoleQueryType.V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_ALL || c9.roleQueryType === V2NIMTeamMemberRoleQueryType.V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_NORMAL) && (c9.onlyChatBanned === undefined || c9.onlyChatBanned === false); if (f9) { return QueryTeamMemberMode.SYNC_AND_LOCAL; } else { return QueryTeamMemberMode.REMOTE; } } else { return QueryTeamMemberMode.LOCAL; } } } export class SyncTMEventProcessor { constructor() { this.queue = []; this.processing = false; } enqueueEvent(event) { this.queue.push(event); this.processQueue(); } async processQueue() { if (this.processing) return; this.processing = true; while (this.queue.length > 0) { const z8 = this.queue.shift(); if (z8) { await z8.handler(); } } this.processing = false; } async enqueueEmptyEvent() { if (!this.processing && this.queue.length === 0) { return; } else { await new Promise(y8 => { setTimeout(y8, 100); }); await this.enqueueEmptyEvent(); } } } export class SyncTMEvent { constructor(eventName, handler) { this._eventName = eventName; this._handler = handler; } eventName() { return this._eventName; } async handler() { try { const x8 = new Date().getTime(); await this._handler(); const timeEnd = new Date().getTime(); console.log(`SyncTMEventProcessor currentEvent: ${this.eventName()} done, cost: ${timeEnd - x8} ms`); return; } catch (e) { console.error(`SyncTMEventProcessor error currentEvent: ${this.eventName()}, e: ${JSON.stringify(e)}`); } } } 