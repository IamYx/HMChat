import { NIMBaseImpl, V2NIMErrorCode, V2NIMErrorImpl, V2NIMTeamAgreeMode, V2NIMTeamChatBannedMode, V2NIMTeamInviteMode, V2NIMTeamJoinMode, V2NIMTeamMessageNotifyMode, V2NIMTeamType, V2NIMTeamUpdateExtensionMode, V2NIMTeamUpdateInfoMode } from '@nimsdk/base'; import { TeamConst } from './TeamConst'; import { TEAM_TABLE } from './TeamTable'; export class V2NIMTeamImpl extends NIMBaseImpl { constructor() { super(); this._teamId = ''; this._teamType = V2NIMTeamType.V2NIM_TEAM_TYPE_INVALID; this._name = ''; this._ownerAccountId = ''; this._memberLimit = 200; this._memberCount = 0; this._createTime = 0; this._updateTime = 0; this._intro = ''; this._announcement = ''; this._avatar = ''; this._serverExtension = undefined; this._customerExtension = undefined; this._joinMode = V2NIMTeamJoinMode.V2NIM_TEAM_JOIN_MODE_FREE; this._agreeMode = V2NIMTeamAgreeMode.V2NIM_TEAM_AGREE_MODE_AUTH; this._inviteMode = V2NIMTeamInviteMode.V2NIM_TEAM_INVITE_MODE_MANAGER; this._updateInfoMode = V2NIMTeamUpdateInfoMode.V2NIM_TEAM_UPDATE_INFO_MODE_MANAGER; this._updateExtensionMode = V2NIMTeamUpdateExtensionMode.V2NIM_TEAM_UPDATE_EXTENSION_MODE_MANAGER; this._chatBannedMode = V2NIMTeamChatBannedMode.V2NIM_TEAM_CHAT_BANNED_MODE_UNBAN; this._isValidTeam = true; this._messageNotifyMode = V2NIMTeamMessageNotifyMode.V2NIM_TEAM_MESSAGE_NOTIFY_MODE_ALL; this.__memberUpdateTime = TeamConst.DEF_MEMBER_UPTIME; } get teamId() { return this._teamId; } get teamType() { return this._teamType; } get name() { return this._name; } get ownerAccountId() { return this._ownerAccountId; } get memberLimit() { return this._memberLimit; } get memberCount() { return this._memberCount; } get createTime() { return this._createTime; } get updateTime() { return this._updateTime; } get intro() { return this._intro; } get announcement() { return this._announcement; } get avatar() { return this._avatar; } get serverExtension() { return this._serverExtension; } get customerExtension() { return this._customerExtension; } get joinMode() { return this._joinMode; } get agreeMode() { return this._agreeMode; } get inviteMode() { return this._inviteMode; } get updateInfoMode() { return this._updateInfoMode; } get updateExtensionMode() { return this._updateExtensionMode; } get chatBannedMode() { return this._chatBannedMode; } get isValidTeam() { return this._isValidTeam; } get messageNotifyMode() { return this._messageNotifyMode; } get memberUpdateTime() { return this.__memberUpdateTime; } set teamId(q30) { this._teamId = q30; } set teamType(p30) { this._teamType = p30; } set name(o30) { this._name = o30; } set ownerAccountId(n30) { this._ownerAccountId = n30; } set memberLimit(m30) { this._memberLimit = m30; } set memberCount(l30) { this._memberCount = l30; } set createTime(k30) { this._createTime = k30; } set updateTime(j30) { this._updateTime = j30; } set intro(i30) { this._intro = i30; } set announcement(h30) { this._announcement = h30; } set avatar(g30) { this._avatar = g30; } set serverExtension(f30) { this._serverExtension = f30; } set customerExtension(e30) { this._customerExtension = e30; } set joinMode(d30) { this._joinMode = d30; } set agreeMode(c30) { this._agreeMode = c30; } set inviteMode(b30) { this._inviteMode = b30; } set updateInfoMode(a30) { this._updateInfoMode = a30; } set updateExtensionMode(z29) { this._updateExtensionMode = z29; } set chatBannedMode(y29) { this._chatBannedMode = y29; } set isValidTeam(x29) { this._isValidTeam = x29; } set messageNotifyMode(w29) { this._messageNotifyMode = w29; } set memberUpdateTime(v29) { this.__memberUpdateTime = v29; } static buildFromParams(d29, e29, name, f29, g29, h29, createTime, updateTime, i29, j29, avatar, k29, l29, m29, n29, o29, p29, q29, r29, s29, t29, u29) { return V2NIMTeamImpl.initByParams(() => new V2NIMTeamImpl(), d29, e29, name, f29, g29, h29, createTime, updateTime, i29, j29, avatar, k29, l29, m29, n29, o29, p29, q29, r29, s29, t29, u29); } static buildFromCloud(c29) { return V2NIMTeamImpl.initByCloud(() => new V2NIMTeamImpl(), c29); } static buildFromValueBucket(valuesBucket) { return V2NIMTeamImpl.initByValueBucket(() => new V2NIMTeamImpl(), valuesBucket); } fromParams(k28, l28, name, m28, n28, o28, createTime, updateTime, p28, q28, avatar, r28, s28, t28, u28, v28, w28, x28, y28, z28, a29, b29) { this.teamId = k28; this.teamType = l28; this.name = name; this.ownerAccountId = m28; this.memberLimit = n28; this.memberCount = o28; this.createTime = createTime; this.updateTime = updateTime; this.intro = p28; this.announcement = q28; this.avatar = avatar; this.serverExtension = r28; this.customerExtension = s28; this.joinMode = t28; this.agreeMode = u28; this.inviteMode = v28; this.updateInfoMode = w28; this.updateExtensionMode = x28; this.chatBannedMode = y28; this.isValidTeam = z28; this.messageNotifyMode = a29; this.memberUpdateTime = b29; } fromCloud(j28) { if (typeof j28.teamType === 'undefined') { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, desc: `Cloud team.teamType cannot be 'undefined'!, sdk please check the usage of V2NIMTeamImpl constructor.` }); } this.teamId = j28.teamId; this.teamType = j28.teamType; this.name = j28.name; this.ownerAccountId = j28.ownerAccountId; this.memberLimit = j28.memberLimit; this.memberCount = j28.memberCount; this.createTime = j28.createTime; this.updateTime = j28.updateTime; this.intro = j28.intro; this.announcement = j28.announcement; this.avatar = j28.avatar; this.serverExtension = j28.serverExtension; this.customerExtension = j28.customerExtension; this.joinMode = j28.joinMode; this.agreeMode = j28.agreeMode; this.inviteMode = j28.inviteMode; this.updateInfoMode = j28.updateInfoMode; this.updateExtensionMode = j28.updateExtensionMode; this.chatBannedMode = j28.chatBannedMode; this.isValidTeam = j28.isValidTeam; this.messageNotifyMode = j28.messageNotifyMode; } fromValueBucket(valuesBucket) { this.teamId = valuesBucket["team_id"]; this.teamType = valuesBucket["team_type"]; this.name = valuesBucket["name"]; this.ownerAccountId = valuesBucket["owner_account_id"]; this.memberLimit = valuesBucket["member_limit"]; this.memberCount = valuesBucket["member_count"]; this.createTime = valuesBucket["create_time"]; this.updateTime = valuesBucket["update_time"]; this.intro = valuesBucket["intro"]; this.announcement = valuesBucket["announcement"]; this.avatar = valuesBucket["avatar"]; this.serverExtension = valuesBucket["server_extension"]; this.customerExtension = valuesBucket["customer_extension"]; this.joinMode = valuesBucket["join_mode"]; this.agreeMode = valuesBucket["agree_mode"]; this.inviteMode = valuesBucket["invite_mode"]; this.updateInfoMode = valuesBucket["update_info_mode"]; this.updateExtensionMode = valuesBucket["update_extension_mode"]; this.chatBannedMode = valuesBucket["chat_banned_mode"]; this.isValidTeam = valuesBucket["valid_flag"] ? true : false; this.messageNotifyMode = valuesBucket["tag_type"]; this.memberUpdateTime = valuesBucket["member_update_time"] ?? TeamConst.DEF_MEMBER_UPTIME; } generateBucket() { let valueBucket = {}; TEAM_TABLE.columns.forEach((item) => { switch (item) { case "team_type": valueBucket[item] = this.teamType; break; case "team_id": valueBucket[item] = this.teamId; break; case "name": valueBucket[item] = this.name ?? ""; break; case "owner_account_id": valueBucket[item] = this.ownerAccountId ?? ""; break; case "member_limit": valueBucket[item] = this.memberLimit; break; case "member_count": valueBucket[item] = this.memberCount; break; case "create_time": valueBucket[item] = this.createTime; break; case "update_time": valueBucket[item] = this.updateTime; break; case "intro": valueBucket[item] = this.intro ?? ""; break; case "announcement": valueBucket[item] = this.announcement ?? ""; break; case "avatar": valueBucket[item] = this.avatar ?? ""; break; case "server_extension": if (this.serverExtension !== undefined) { valueBucket[item] = this.serverExtension; } break; case "customer_extension": if (this.customerExtension !== undefined) { valueBucket[item] = this.customerExtension; } break; case "join_mode": valueBucket[item] = this.joinMode ?? 0; break; case "agree_mode": valueBucket[item] = this.agreeMode ?? 0; break; case "invite_mode": valueBucket[item] = this.inviteMode ?? 0; break; case "update_info_mode": valueBucket[item] = this.updateInfoMode ?? 0; break; case "update_extension_mode": valueBucket[item] = this.updateExtensionMode ?? 0; break; case "chat_banned_mode": valueBucket[item] = this.chatBannedMode ?? 0; break; case "valid_flag": valueBucket[item] = this.isValidTeam ? 1 : 0; break; case "valid_member": valueBucket[item] = this.isValidTeam ? 1 : 0; break; case "tag_type": valueBucket[item] = this.messageNotifyMode ?? 0; break; case "member_update_time": valueBucket[item] = this.memberUpdateTime ?? TeamConst.DEF_MEMBER_UPTIME; break; default: break; } }); return valueBucket; } static generateUpdateBucket(info) { let valueBucket = {}; if (typeof info.name !== 'undefined') { valueBucket["name"] = info.name; } if (typeof info.ownerAccountId !== 'undefined') { valueBucket["owner_account_id"] = info.ownerAccountId; } if (typeof info.memberLimit !== 'undefined') { valueBucket["member_limit"] = info.memberLimit; } if (typeof info.memberCount !== 'undefined') { valueBucket["member_count"] = info.memberCount; } if (typeof info.createTime !== 'undefined') { valueBucket["create_time"] = info.createTime; } if (typeof info.updateTime !== 'undefined') { valueBucket["update_time"] = info.updateTime; } if (typeof info.intro !== 'undefined') { valueBucket["intro"] = info.intro; } if (typeof info.announcement !== 'undefined') { valueBucket["announcement"] = info.announcement; } if (typeof info.avatar !== 'undefined') { valueBucket["avatar"] = info.avatar; } if (typeof info.serverExtension !== 'undefined') { valueBucket["server_extension"] = info.serverExtension; } if (typeof info.customerExtension !== 'undefined') { valueBucket["customer_extension"] = info.customerExtension; } if (typeof info.joinMode !== 'undefined') { valueBucket["join_mode"] = info.joinMode; } if (typeof info.agreeMode !== 'undefined') { valueBucket["agree_mode"] = info.agreeMode; } if (typeof info.inviteMode !== 'undefined') { valueBucket["invite_mode"] = info.inviteMode; } if (typeof info.updateInfoMode !== 'undefined') { valueBucket["update_info_mode"] = info.updateInfoMode; } if (typeof info.updateExtensionMode !== 'undefined') { valueBucket["update_extension_mode"] = info.updateExtensionMode; } if (typeof info.chatBannedMode !== 'undefined') { valueBucket["chat_banned_mode"] = info.chatBannedMode; } if (typeof info.isValidTeam !== 'undefined') { valueBucket["valid_flag"] = info.isValidTeam; } if (typeof info.messageNotifyMode !== 'undefined') { valueBucket["tag_type"] = info.messageNotifyMode; } return valueBucket; } static parseFromCloud(remote) { const i28 = V2NIMTeamImpl.buildFromCloud(remote); i28.memberUpdateTime = remote.memberUpdateTime; return i28; } static parseArrayFromCloud(f28) { const g28 = new Array(f28.length); for (let h28 = 0; h28 < f28.length; h28++) { g28[h28] = V2NIMTeamImpl.parseFromCloud(f28[h28]); } return g28; } toJSON() { return { teamId: this.teamId, teamType: this.teamType, name: this.name, ownerAccountId: this.ownerAccountId, memberLimit: this.memberLimit, memberCount: this.memberCount, createTime: this.createTime, updateTime: this.updateTime, intro: this.intro, announcement: this.announcement, avatar: this.avatar, serverExtension: this.serverExtension, customerExtension: this.customerExtension, joinMode: this.joinMode, agreeMode: this.agreeMode, inviteMode: this.inviteMode, updateInfoMode: this.updateInfoMode, updateExtensionMode: this.updateExtensionMode, chatBannedMode: this.chatBannedMode, isValidTeam: this.isValidTeam, messageNotifyMode: this.messageNotifyMode }; } } 