import { NIM, NIMEStrObj, RdbStoreManager, V2NIMTeam, V2NIMTeamJoinActionInfo, V2NIMTeamMemberListResult, V2NIMTeamMemberQueryOption, V2NIMTeamMemberRole, V2NIMTeamMemberSearchOption, V2NIMTeamMemberSearchResult, V2NIMTeamType, V2NIMUpdateSelfMemberInfoParams, Packet } from '@nimsdk/base'; import V2NIMTeamServiceImpl from '../V2NIMTeamServiceImpl'; import { TeamMemberCloud, V2NIMTeamMemberRemote } from './TeamMemberCloud'; import TeamMemberModel from './TeamMemberModel'; import { V2NIMTeamImpl } from '../team/V2NIMTeamImpl'; import { V2NIMTeamMemberImpl } from './V2NIMTeamMemberImpl'; export declare class TeamMemberService { private core; private service; private syncTMEventProcessors; constructor(l13: NIM, m13: RdbStoreManager, service: V2NIMTeamServiceImpl); private _model?; get model(): TeamMemberModel; private _cloud?; get cloud(): TeamMemberCloud; onLogin(): Promise<void>; onLogout(): void; clearTeamMembers(j13: string, k13: V2NIMTeamType): Promise<void>; inviteMember(e13: string, f13: V2NIMTeamType, g13: string[], h13?: string, i13?: string): Promise<string[]>; kickMember(b13: string, c13: V2NIMTeamType, d13: string[]): Promise<void>; applyJoinTeam(y12: string, z12: V2NIMTeamType, a13?: string): Promise<V2NIMTeamImpl>; updateTeamMemberRole(u12: string, v12: V2NIMTeamType, w12: string[], x12: V2NIMTeamMemberRole): Promise<void>; updateSelfTeamMemberInfo(q12: string, r12: V2NIMTeamType, s12: V2NIMUpdateSelfMemberInfoParams): Promise<void>; updateTeamMemberNick(m12: string, n12: V2NIMTeamType, accountId: string, o12: string): Promise<void>; setTeamMemberChatBannedStatus(j12: string, k12: V2NIMTeamType, accountId: string, l12: boolean): Promise<void>; getTeamMemberList(e12: string, f12: V2NIMTeamType, g12: V2NIMTeamMemberQueryOption): Promise<V2NIMTeamMemberListResult>;             isNeedRefreshTeamMember(a12: string, b12: V2NIMTeamType): Promise<boolean>;                             private refreshLocalTeamMember;                       getTeamMemberListByIds(p11: string, q11: V2NIMTeamType, r11: string[]): Promise<V2NIMTeamMemberImpl[]>;                       getTeamMemberListByIdsFromCloud(l11: string, m11: V2NIMTeamType, n11: string[]): Promise<void>; getTeamMemberInvitor(c11: string, d11: V2NIMTeamType, e11: string[]): Promise<NIMEStrObj>; searchTeamMembers(w10: V2NIMTeamMemberSearchOption): Promise<V2NIMTeamMemberSearchResult>;       getLocalById(u10: string, v10: V2NIMTeamType, accountId: string): Promise<V2NIMTeamMemberImpl | undefined>; getLocalByIds(r10: string, s10: V2NIMTeamType, t10: string[]): Promise<V2NIMTeamMemberImpl[]>; getLocalByTeamIds(p10: string[], q10: V2NIMTeamType, accountId: string): Promise<V2NIMTeamMemberImpl[]>; upsertLocal(member: V2NIMTeamMemberImpl, o10: boolean): Promise<void>; upsertLocalBatch(m10: V2NIMTeamMemberImpl[], n10: boolean): Promise<void>; deleteLocalByAccount(k10: string, l10: V2NIMTeamType, account: string): Promise<V2NIMTeamMemberImpl | undefined>; deleteLocalByTeamId(i10: string, j10: V2NIMTeamType): Promise<void>;                               updateLocal(c10: string, d10: V2NIMTeamType, e10: string[], options: Partial<V2NIMTeamMemberRemote> | Partial<V2NIMTeamMemberRemote>[]): Promise<void>; syncTeamMemberData(b10: V2NIMTeamMemberImpl[]): Promise<void>; saveTeamMembersOfSelf(a10: V2NIMTeamMemberImpl[]): Promise<void>; saveSuperTeamMembersOfSelf(z9: V2NIMTeamMemberImpl[]): Promise<void>; updateTeamMember(y9: V2NIMTeamMemberImpl): void; updateSuperTeamMember(x9: V2NIMTeamMemberImpl): void; saveSelfAfterCreated(v9: V2NIMTeam): Promise<void>; cloudAcceptInvitation(u9: V2NIMTeamJoinActionInfo): Promise<V2NIMTeamImpl>; cloudRejectInvitation(s9: V2NIMTeamJoinActionInfo, t9?: string): Promise<void>; cloudAcceptJoinApplication(applicationInfo: V2NIMTeamJoinActionInfo): Promise<void>; cloudRejectJoinApplication(applicationInfo: V2NIMTeamJoinActionInfo, r9?: string): Promise<void>; private registerInnerService; private unRegisterInnerService; private saveMembersOfSelf; private updateMember; v2superTeamSyncMember(j9: Packet): void; private v2ISuperTeamSyncMemberHandler;                  private evaluateQueryMode; } export declare class SyncTMEventProcessor { private queue; private processing; enqueueEvent(event: SyncTMEvent): void; private processQueue; enqueueEmptyEvent(): Promise<void>; } export declare class SyncTMEvent { private _eventName; private _handler; constructor(eventName: string, handler: () => Promise<void>); eventName(): string; handler(): Promise<void>; } 