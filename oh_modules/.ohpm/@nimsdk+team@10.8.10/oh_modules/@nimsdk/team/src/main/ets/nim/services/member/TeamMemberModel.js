import { V2NIMQueryDirection, V2NIMTeamMemberRoleQueryType } from '@nimsdk/base'; import { TeamMemberTable } from './TeamMemberTable'; import HashMap from "@ohos.util.HashMap"; import { TeamMemberListResult } from './cloud/TeamMemberCloudResult'; import { GetTeamMemberListToken } from './types/GetTeamMemberListToken'; export default class TeamMemberModel { constructor(v8, w8) { this.table = new TeamMemberTable(v8, w8); } async updateMembersOfSelf(m8, n8, o8) { const p8 = o8.map(((u8) => { return u8.teamId; })); const q8 = await this.getByTeams(m8, p8, n8); const r8 = new HashMap(); q8.map((t8) => { r8.set(t8.teamId, t8); }); o8.forEach((s8) => { if (r8.hasKey(s8.teamId)) { s8.serverExtension = r8.get(s8.teamId)?.serverExtension; } }); await this.upsert(o8); } async getById(k8, l8, accountId) { return await this.table.queryTeamMember(k8, l8, accountId); } async getByTeams(i8, j8, accountId) { return await this.table.queryTeamMembersByTeams(i8, j8, accountId); } async getByIds(f8, g8, h8) { return await this.table.queryTeamMembers(f8, g8, h8); } async queryByOptions(x7, y7, z7, token) { const a8 = z7.roleQueryType ?? V2NIMTeamMemberRoleQueryType.V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_ALL; const b8 = !!z7.onlyChatBanned; const direction = z7.direction ?? V2NIMQueryDirection.V2NIM_QUERY_DIRECTION_DESC; const limit = z7.limit ?? 100; const offset = token ? (token.isLocalToken() ? token.getLocalOffset() : 0) : 0; const c8 = await this.table.queryByOptions(x7, y7, a8, b8, direction, limit + 1, offset); if (c8.length > limit) { const e8 = new TeamMemberListResult(false, GetTeamMemberListToken.buildByLocalOffset(offset + limit).toLocalString(), c8.slice(0, limit)); return e8; } else { const d8 = new TeamMemberListResult(true, GetTeamMemberListToken.buildByLocalOffset(offset + c8.length).toLocalString(), c8); return d8; } } async getByKeyword(u7, v7, order, w7) { return this.table.queryTeamMembersBy(u7, v7, order, w7); } async upsert(member) { await this.table.upsert(member); } async deleteOneAndReturn(r7, s7, account) { const t7 = await this.table.queryTeamMember(r7, s7, account); if (t7) { await this.deleteOne(r7, s7, account); return t7; } else { return; } } async deleteOne(p7, q7, account) { return await this.table.delete(p7, q7, account); } async deleteByTeamId(n7, o7) { return await this.table.delete(n7, o7, undefined); } async deleteByAccountId(m7, account) { return await this.table.delete(m7, undefined, account); } async updateTeamMemberInvitor(j7, k7, l7) { return await this.table.updateInvitor(j7, k7, l7); } async updateTeamMemberValidByTeamId(g7, h7, i7) { return await this.table.updateValidByTeamId(g7, h7, i7); } } 