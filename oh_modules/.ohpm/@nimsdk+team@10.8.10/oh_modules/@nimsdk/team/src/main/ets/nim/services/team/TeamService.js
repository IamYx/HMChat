import { NIM_DATABASE_NAME_MAIN, V2NIMErrorCode, V2NIMErrorImpl, V2NIMTeamType, validate } from '@nimsdk/base'; import { antispamConfigRule, chatBannedModeRules, stringNotEmptyRule, teamIdRules, teamIdsRules, teamTypeRules, teamTypesRules, updateTeamInfoParamsRules } from '../rules'; import { TeamCloud } from './TeamCloud'; import { TeamModel } from './TeamModel'; const l3 = '[TeamService]'; export class TeamService { constructor(i26, j26) { this.core = i26; } get model() { if (this._model) { return this._model; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: `V2NIMTeamService.teamService model is unavailable` } }); } } get cloud() { if (this._cloud) { return this._cloud; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'V2NIMTeamService.teamService cloud is unavailable' } }); } } async onLogin() { this.registerInnerService(this.core); } onLogout() { this.unRegisterInnerService(); } async createTeam(e26, f26, g26, h26) { try { this.core.logger.info(l3, 'createTeam', e26, f26, g26, h26); const result = await this.cloud.createTeam(e26, f26, g26, h26); const info = result.team; await this.upsertLocal(info); return result; } catch (e) { this.core.logger.error(l3, 'createTeam', e26, f26, g26, h26, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `createTeam ${JSON.stringify(e)}`, rawError: e } }); } } } async leaveTeam(c26, d26) { try { this.core.logger.info(l3, 'leaveTeam', c26, d26); validate(teamIdRules, { teamId: c26 }, '', true); validate(teamTypeRules, { teamType: d26 }, '', true); await this.cloud.leaveTeam(c26, d26); } catch (e) { this.core.logger.error(l3, 'leaveTeam', c26, d26, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `leaveTeam ${JSON.stringify(e)}`, rawError: e } }); } } } async dismissTeam(a26, b26) { try { this.core.logger.info(l3, 'dismissTeam', a26, b26); validate(teamIdRules, { teamId: a26 }, '', true); validate(teamTypeRules, { teamType: b26 }, '', true); await this.cloud.dismissTeam(a26, b26); this.model.updateTeamInfo({ teamId: a26, teamType: b26, isValidTeam: false }); } catch (e) { this.core.logger.error(l3, 'dismissTeam', a26, b26, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `dismissTeam ${JSON.stringify(e)}`, rawError: e } }); } } } async transferTeamOwner(x25, y25, accountId, z25) { try { this.core.logger.info(l3, 'transferTeamOwner', y25, x25, accountId, z25); validate(teamIdRules, { teamId: x25 }, '', true); validate(teamTypeRules, { teamType: y25 }, '', true); validate({ accountId: stringNotEmptyRule }, { accountId: accountId }, '', true); validate({ leave: { type: 'boolean', required: false } }, { leave: z25 }, '', true); if (accountId === this.core.account) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `accountId cannot be self.` } }); } await this.cloud.transferTeamOwner(x25, y25, accountId, z25); } catch (e) { this.core.logger.error(l3, 'transferTeamOwner', y25, x25, accountId, z25, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `transferTeamOwner ${JSON.stringify(e)}`, rawError: e } }); } } } async getJoinedTeamList(w25) { try { this.core.logger.info(l3, 'getJoinedTeamList', w25); validate(teamTypesRules, { teamTypes: w25 }, '', true); if (typeof w25 === 'undefined' || w25.length === 0) { w25 = [V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL, V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER]; } const result = await this.model.queryMyTeams(w25); return result.sort((a, b) => a.createTime - b.createTime); } catch (e) { this.core.logger.error(l3, 'getJoinedTeamList', w25, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getJoinedTeamList ${JSON.stringify(e)}`, rawError: e } }); } } } async getJoinedTeamCount(v25) { try { this.core.logger.info(l3, 'getJoinedTeamCount', v25); validate(teamTypesRules, { teamTypes: v25 }, '', true); if (typeof v25 === 'undefined' || v25.length === 0) { v25 = [V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL, V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER]; } const result = await this.model.queryMyTeams(v25); return result.length; } catch (e) { this.core.logger.error(l3, 'getJoinedTeamCount', v25, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getJoinedTeamCount ${JSON.stringify(e)}`, rawError: e } }); } } } async getTeamInfo(s25, t25) { try { validate(teamIdRules, { teamId: s25 }, '', true); validate(teamTypeRules, { teamType: t25 }, '', true); let u25 = await this.model.getTeamInfo(s25, t25); if (u25 === undefined) { u25 = await this.cloud.getTeamInfo(s25, t25); this.model.setTeamInfo(u25); } return u25; } catch (e) { this.core.logger.error(l3, 'getTeamInfo', s25, t25, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getTeamInfo ${JSON.stringify(e)}`, rawError: e } }); } } } async getTeamInfoByIds(k25, l25) { try { this.core.logger.info(l3, 'getTeamInfoByIds', k25, l25); validate(teamIdsRules, { teamIds: k25 }, '', true); validate(teamTypeRules, { teamType: l25 }, '', true); let m25 = await this.model.queryTeams(k25, l25); const n25 = m25.filter(item => !k25.includes(item.teamId)).map(item => item.teamId); if (n25.length === 0) { const r25 = k25.map(id => m25.find(item => item.teamId === id)) .filter(item => item !== undefined); return r25; } const o25 = await this.cloud.getTeamInfoByIds(n25, l25); await this.model.setTeams(o25); const p25 = m25.concat(o25); const q25 = k25.map(id => p25.find(item => item.teamId === id)) .filter(item => item !== undefined); return q25; } catch (e) { this.core.logger.error(l3, 'getTeamInfoByIds', k25, l25, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getTeamInfoByIds ${JSON.stringify(e)}`, rawError: e } }); } } } async searchTeamByKeyword(j25) { try { this.core.logger.info(l3, 'searchTeamByKeyword', j25); validate({ keyword: { type: 'string', allowEmpty: false } }, { keyword: j25 }, '', true); const result = this.model.searchByKeyword(j25); return result; } catch (e) { this.core.logger.error(l3, 'searchTeamByKeyword', j25, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getTeamInfoByIds ${JSON.stringify(e)}`, rawError: e } }); } } } async isValidTeam(i25, type) { return this.model.isValidTeam(i25, type); } async updateTeamInfo(d25, e25, f25, g25) { try { this.core.logger.info(l3, 'updateTeamInfo', d25, e25, f25, g25); validate(teamIdRules, { teamId: d25 }, '', true); validate(teamTypeRules, { teamType: e25 }, '', true); validate(updateTeamInfoParamsRules, { updateTeamInfoParams: f25 }, '', true); validate({ antispamConfig: antispamConfigRule }, { antispamConfig: g25 }, '', true); const h25 = { teamId: d25, teamType: e25 }; if (typeof f25.name !== 'undefined') { h25.name = f25.name; } if (typeof f25.memberLimit !== 'undefined') { h25.memberLimit = f25.memberLimit; } if (typeof f25.intro !== 'undefined') { h25.intro = f25.intro; } if (typeof f25.announcement !== 'undefined') { h25.announcement = f25.announcement; } if (typeof f25.avatar !== 'undefined') { h25.avatar = f25.avatar; } if (typeof f25.serverExtension !== 'undefined') { h25.serverExtension = f25.serverExtension; } if (typeof f25.joinMode !== 'undefined') { h25.joinMode = f25.joinMode; } if (typeof f25.agreeMode !== 'undefined') { h25.agreeMode = f25.agreeMode; } if (typeof f25.inviteMode !== 'undefined') { h25.inviteMode = f25.inviteMode; } if (typeof f25.updateInfoMode !== 'undefined') { h25.updateInfoMode = f25.updateInfoMode; } if (typeof f25.updateExtensionMode !== 'undefined') { h25.updateExtensionMode = f25.updateExtensionMode; } await this.cloud.updateTeamInfo(h25, g25); await this.model.updateTeamInfo(h25); } catch (e) { this.core.logger.error(l3, 'updateTeamInfo', d25, e25, f25, g25, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `updateTeamInfo ${JSON.stringify(e)}`, rawError: e } }); } } } async setTeamChatBannedMode(a25, b25, c25) { try { this.core.logger.info(l3, 'setTeamChatBannedMode', a25, b25, c25); validate(teamIdRules, { teamId: a25 }, '', true); validate(teamTypeRules, { teamType: b25 }, '', true); validate(chatBannedModeRules, { chatBannedMode: c25 }, '', true); await this.cloud.setTeamChatBannedMode(a25, b25, c25); await this.model.updateChatMode(a25, b25, c25); } catch (e) { this.core.logger.error(l3, 'setTeamChatBannedMode', a25, b25, c25, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `setTeamChatBannedMode ${JSON.stringify(e)}`, rawError: e } }); } } } async syncTeamData(z24) { await this.model.upsertTeams(z24); } async upsertLocal(y24) { return await this.model.upsert(y24); } async updateLocal(x24) { return await this.model.updateTeamInfo(x24); } async deleteLocalById(v24, w24) { return await this.model.deleteById(v24, w24); } async getLocalById(s24, t24, u24) { return await this.model.getTeamInfo(s24, t24, u24); } async getLocalByIds(p24, q24, r24) { return await this.model.getTeamInfoByIds(p24, q24, r24); } async getLocalByType(n24, o24) { return await this.model.getTeamsInfo(n24, o24); } async queryMemberUpdateTimeMap(m24) { return await this.model.getMemberUpdateTimeMap(m24); } async updateMemberUpdateTimeMap(k24, type, l24) { return await this.model.updateMemberUpdateTimeMap(k24, type, l24); } registerInnerService(i24) { let j24 = i24.databaseService.getDatabase(i24, NIM_DATABASE_NAME_MAIN); this._model = new TeamModel(j24, i24); this._cloud = new TeamCloud(i24); } unRegisterInnerService() { this._model = undefined; this._cloud = undefined; } } 