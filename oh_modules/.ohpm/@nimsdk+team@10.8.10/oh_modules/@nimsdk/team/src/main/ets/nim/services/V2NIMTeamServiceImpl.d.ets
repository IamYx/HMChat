import { NIM, NIMEStrAnyObj, NIMEStrObj, NIMServiceConfig, NIMServiceName, Packet, PickForRequiredAndPartialTheRest, V2NIMAntispamConfig, V2NIMCreateTeamParams, V2NIMCreateTeamResult, V2NIMMessage, V2NIMTeam, V2NIMTeamChatBannedMode, V2NIMTeamJoinActionInfo, V2NIMTeamJoinActionInfoQueryOption, V2NIMTeamJoinActionInfoResult, V2NIMTeamListener, V2NIMTeamMemberListResult, V2NIMTeamMemberQueryOption, V2NIMTeamMemberRole, V2NIMTeamMemberSearchOption, V2NIMTeamMemberSearchResult, V2NIMTeamMessageMuteMode, V2NIMTeamServiceInternal, V2NIMTeamType, V2NIMUpdateSelfMemberInfoParams, V2NIMUpdateTeamInfoParams, V2Service, V2NIMTeamInviteParams } from '@nimsdk/base'; import { V2NIMTeamMemberRemote } from './member/TeamMemberCloud'; import { V2NIMTeamMemberImpl } from './member/V2NIMTeamMemberImpl'; import { V2NIMTeamImpl } from './team/V2NIMTeamImpl'; import { HashMap } from '@kit.ArkTS'; export default class V2NIMTeamServiceImpl extends V2Service<V2NIMTeamListener> implements V2NIMTeamServiceInternal { constructor(y36: NIM, serviceName: NIMServiceName, z36: NIMServiceConfig); private _teamService?; private get teamService(); private _teamMemberService?; private get teamMemberService(); private _notificationService?; private get notificationService(); onLoginStart(accountId: string): Promise<void>; onLoginFinished(accountId: string): Promise<void>; onLogout(): void; createTeam(u36: V2NIMCreateTeamParams, v36?: string[], w36?: string, x36?: V2NIMAntispamConfig): Promise<V2NIMCreateTeamResult>; updateTeamInfo(q36: string, r36: V2NIMTeamType, s36: V2NIMUpdateTeamInfoParams, t36?: V2NIMAntispamConfig): Promise<void>; leaveTeam(o36: string, p36: V2NIMTeamType): Promise<void>; getTeamInfo(l36: string, m36: V2NIMTeamType): Promise<V2NIMTeamImpl>; getJoinedTeamList(j36?: V2NIMTeamType[]): Promise<V2NIMTeamImpl[]>; getJoinedTeamCount(i36?: V2NIMTeamType[]): Promise<number>; getTeamInfoByIds(f36: string[], g36: V2NIMTeamType): Promise<V2NIMTeamImpl[]>; transferTeamOwner(c36: string, d36: V2NIMTeamType, accountId: string, e36?: boolean): Promise<void>; setTeamChatBannedMode(z35: string, a36: V2NIMTeamType, b36: V2NIMTeamChatBannedMode): Promise<void>; searchTeamByKeyword(x35: string): Promise<V2NIMTeamImpl[]>;                    v2IGetLocalTeamById(u35: string, v35: V2NIMTeamType): Promise<V2NIMTeamImpl | undefined>;             v2IGetLocalTeamByIds(m35: string[], n35: V2NIMTeamType): Promise<HashMap<string, V2NIMTeamImpl | undefined>>; updateLocalTeam(l35: PickForRequiredAndPartialTheRest<V2NIMTeam, 'teamId' | 'teamType'>): Promise<void>; upsertLocalTeam(k35: V2NIMTeamImpl): Promise<void>; v2IQueryLocalAllTeams(): Promise<V2NIMTeamImpl[]>; v2IQueryLocalAllSuperTeams(): Promise<V2NIMTeamImpl[]>; dismissTeam(g35: string, h35: V2NIMTeamType): Promise<void>;                 inviteMember(c35: string, d35: V2NIMTeamType, e35: string[], f35?: string): Promise<string[]>;               inviteMemberEx(z34: string, a35: V2NIMTeamType, b35: V2NIMTeamInviteParams): Promise<string[]>; acceptInvitation(y34: V2NIMTeamJoinActionInfo): Promise<V2NIMTeamImpl>; rejectInvitation(w34: V2NIMTeamJoinActionInfo, x34?: string): Promise<void>; kickMember(t34: string, u34: V2NIMTeamType, v34: string[]): Promise<void>; applyJoinTeam(q34: string, r34: V2NIMTeamType, s34?: string): Promise<V2NIMTeamImpl>; updateTeamMemberRole(m34: string, n34: V2NIMTeamType, o34: string[], p34: V2NIMTeamMemberRole): Promise<void>; updateSelfTeamMemberInfo(j34: string, k34: V2NIMTeamType, l34: V2NIMUpdateSelfMemberInfoParams): Promise<void>; updateTeamMemberNick(g34: string, h34: V2NIMTeamType, accountId: string, i34: string): Promise<void>; setTeamMemberChatBannedStatus(d34: string, e34: V2NIMTeamType, accountId: string, f34: boolean): Promise<void>; getTeamMemberList(a34: string, b34: V2NIMTeamType, c34: V2NIMTeamMemberQueryOption): Promise<V2NIMTeamMemberListResult>; getTeamMemberListByIds(x33: string, y33: V2NIMTeamType, z33: string[]): Promise<V2NIMTeamMemberImpl[]>; getTeamMemberInvitor(u33: string, v33: V2NIMTeamType, w33: string[]): Promise<NIMEStrObj>; searchTeamMembers(t33: V2NIMTeamMemberSearchOption): Promise<V2NIMTeamMemberSearchResult>; acceptJoinApplication(applicationInfo: V2NIMTeamJoinActionInfo): Promise<void>; rejectJoinApplication(applicationInfo: V2NIMTeamJoinActionInfo, s33?: string): Promise<void>; getTeamJoinActionInfoList(option: V2NIMTeamJoinActionInfoQueryOption): Promise<V2NIMTeamJoinActionInfoResult>; clearAllTeamJoinActionInfo(): Promise<void>; deleteTeamJoinActionInfo(applicationInfo: V2NIMTeamJoinActionInfo): Promise<void>; getTeamMemberListByIdsFromCloud(p33: string, q33: V2NIMTeamType, r33: string[]): Promise<void>; v2IGetLocalTeamMemberById(n33: string, o33: V2NIMTeamType, accountId: string): Promise<V2NIMTeamMemberImpl | undefined>; getLocalTeamMemberByIds(k33: string, l33: V2NIMTeamType, m33: string[]): Promise<V2NIMTeamMemberImpl[]>; upsertLocalTeamMember(member: V2NIMTeamMemberImpl, j33: boolean): Promise<void>; upsertLocalTeamMembers(h33: V2NIMTeamMemberImpl[], i33: boolean): Promise<void>; updateLocalTeamMember(e33: string, f33: V2NIMTeamType, g33: string[], options: Partial<V2NIMTeamMemberRemote> | (Partial<V2NIMTeamMemberRemote>)[]): Promise<void>; deleteLocalTeamMemberByAccount(c33: string, d33: V2NIMTeamType, account: string): Promise<V2NIMTeamMemberImpl | undefined>; deleteLocalTeamMemberByTeamId(a33: string, b33: V2NIMTeamType): Promise<void>; sendAcceptJoinApplication(applicationInfo: V2NIMTeamJoinActionInfo): Promise<void>; sendRejectJoinApplication(applicationInfo: V2NIMTeamJoinActionInfo, z32?: string): Promise<void>; sendAcceptInvitation(y32: V2NIMTeamJoinActionInfo): Promise<V2NIMTeamImpl>; sendRejectInvitation(w32: V2NIMTeamJoinActionInfo, x32?: string): Promise<void>;         notificationOnTeamMemberInfoUpdated(v32: V2NIMTeamMemberImpl[]): Promise<void>;         formatTeamNotificationAttachData(t32: NIMEStrAnyObj, u32: V2NIMTeamType): NIMEStrAnyObj;           v2ITeamProcessSysNotification(notification: NIMEStrAnyObj): Promise<void>;           v2ITeamQueryMemberUpdateTimeMap(s32: V2NIMTeamType): Promise<HashMap<string, number>>; v2IUpdateMemberUpdateTimeMap(q32: string, type: V2NIMTeamType, r32: number): Promise<void>;           teamProcessNotification(msg: V2NIMMessage): Promise<void>; v2IGetTeamMessageMuteMode(m32: string, n32: V2NIMTeamType): Promise<V2NIMTeamMessageMuteMode>; v2IGetTeamMessageMuteModeBatch(d32: string[], e32: V2NIMTeamType): Promise<HashMap<string, V2NIMTeamMessageMuteMode>>; v2IUpdateTeamMemberBits(a32: string, b32: V2NIMTeamType, accountId: string, c32: V2NIMTeamMessageMuteMode): Promise<void>; v2ISyncTeamSyncHandler(w31: Packet): Promise<void>; v2ISyncSuperTeamSyncHandler(s31: Packet): Promise<void>; v2ISyncTeamMembersOfSelfInSyncHandler(p31: Packet): Promise<void>; v2ISyncSuperTeamMembersOfSelfInSyncHandler(m31: Packet): Promise<void>; private registerInnerService; private unRegisterInnerService; private setListener; private v2TeamSyncMemberHandler; private v2SuperTeamSyncMemberHandler; private v2TeamCreateMultiSyncHandler; private v2SuperTeamCreateMultiSyncHandler; private v2TeamMemberUpdateMultiSyncHandler; private v2SuperTeamMemberUpdateMultiSyncHandler; } 