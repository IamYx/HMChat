import { NIMBaseImpl, V2NIMTeamMemberRole, V2NIMTeamType } from '@nimsdk/base'; import { TABLE_TEAM_MEMBER } from './TeamMemberTable'; export class V2NIMTeamMemberImpl extends NIMBaseImpl { constructor() { super(); this._teamId = ''; this._teamType = V2NIMTeamType.V2NIM_TEAM_TYPE_INVALID; this._accountId = ''; this._memberRole = V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_NORMAL; this._teamNick = undefined; this._serverExtension = undefined; this._joinTime = 0; this._updateTime = 0; this._invitorAccountId = undefined; this._inTeam = false; this._chatBanned = undefined; this.__bits = undefined; } get teamId() { return this._teamId; } get teamType() { return this._teamType; } get accountId() { return this._accountId; } get memberRole() { return this._memberRole; } get teamNick() { return this._teamNick; } get serverExtension() { return this._serverExtension; } get joinTime() { return this._joinTime; } get updateTime() { return this._updateTime; } get invitorAccountId() { return this._invitorAccountId; } get inTeam() { return this._inTeam; } get chatBanned() { return this._chatBanned; } get bits() { return this.__bits; } set teamId(a17) { this._teamId = a17; } set teamType(z16) { this._teamType = z16; } set accountId(y16) { this._accountId = y16; } set memberRole(x16) { this._memberRole = x16; } set teamNick(w16) { this._teamNick = w16; } set serverExtension(v16) { this._serverExtension = v16; } set joinTime(u16) { this._joinTime = u16; } set updateTime(t16) { this._updateTime = t16; } set invitorAccountId(s16) { this._invitorAccountId = s16; } set inTeam(r16) { this._inTeam = r16; } set chatBanned(q16) { this._chatBanned = q16; } set bits(p16) { this.__bits = p16; } static buildFromParams(g16, h16, accountId, i16, j16, k16, l16, updateTime, m16, n16, o16, bits) { return V2NIMTeamMemberImpl.initByParams(() => new V2NIMTeamMemberImpl(), g16, h16, accountId, i16, j16, k16, l16, updateTime, m16, n16, o16, bits); } static buildFromCloud(f16) { return V2NIMTeamMemberImpl.initByCloud(() => new V2NIMTeamMemberImpl(), f16); } static buildFromValueBucket(valuesBucket) { return V2NIMTeamMemberImpl.initByValueBucket(() => new V2NIMTeamMemberImpl(), valuesBucket); } fromParams(w15, x15, accountId, y15, z15, a16, b16, updateTime, c16, d16, e16, bits) { this.teamId = w15; this.teamType = x15; this.accountId = accountId; this.memberRole = y15; this.teamNick = z15; this.serverExtension = a16; this.joinTime = b16; this.updateTime = updateTime; this.invitorAccountId = c16; this.inTeam = d16; this.chatBanned = e16; this.bits = bits; } fromCloud(v15) { this.teamId = v15.teamId; this.teamType = v15.teamType; this.accountId = v15.accountId; this.memberRole = v15.memberRole; this.teamNick = v15.teamNick; this.serverExtension = v15.serverExtension; this.joinTime = v15.joinTime; this.updateTime = v15.updateTime; this.invitorAccountId = v15.invitorAccountId; this.inTeam = v15.inTeam; this.chatBanned = v15.chatBanned; this.bits = undefined; } fromValueBucket(valuesBucket) { this.teamId = valuesBucket[TABLE_TEAM_MEMBER.COL_ENUM.TEAM_ID]; this.teamType = valuesBucket[TABLE_TEAM_MEMBER.COL_ENUM.TEAM_TYPE]; this.accountId = valuesBucket[TABLE_TEAM_MEMBER.COL_ENUM.ACCOUNT_ID]; this.memberRole = valuesBucket[TABLE_TEAM_MEMBER.COL_ENUM.MEMBER_ROLE]; this.teamNick = valuesBucket[TABLE_TEAM_MEMBER.COL_ENUM.TEAM_NICK]; this.serverExtension = valuesBucket[TABLE_TEAM_MEMBER.COL_ENUM.SERVER_EXTENSION]; this.joinTime = valuesBucket[TABLE_TEAM_MEMBER.COL_ENUM.JOIN_TIME]; this.updateTime = valuesBucket[TABLE_TEAM_MEMBER.COL_ENUM.UPDATE_TIME]; this.invitorAccountId = valuesBucket[TABLE_TEAM_MEMBER.COL_ENUM.INVITOR_ACCOUNT_ID]; this.inTeam = valuesBucket[TABLE_TEAM_MEMBER.COL_ENUM.VALID] == 1; this.chatBanned = valuesBucket[TABLE_TEAM_MEMBER.COL_ENUM.MUTE] == 1; this.bits = valuesBucket[TABLE_TEAM_MEMBER.COL_ENUM.BITS]; } static parseFromCloud(remote) { const u15 = V2NIMTeamMemberImpl.buildFromCloud(remote); u15.bits = remote.bits; return u15; } static parseArrayFromCloud(r15) { const s15 = new Array(r15.length); for (let t15 = 0; t15 < r15.length; t15++) { s15[t15] = V2NIMTeamMemberImpl.parseFromCloud(r15[t15]); } return s15; } generateBucket() { const valueBucket = {}; TABLE_TEAM_MEMBER.tableType.columns.forEach((item) => { switch (item) { case TABLE_TEAM_MEMBER.COL_ENUM.TEAM_ID: valueBucket[item] = this.teamId; break; case TABLE_TEAM_MEMBER.COL_ENUM.TEAM_TYPE: valueBucket[item] = this.teamType; break; case TABLE_TEAM_MEMBER.COL_ENUM.ACCOUNT_ID: valueBucket[item] = this.accountId; break; case TABLE_TEAM_MEMBER.COL_ENUM.MEMBER_ROLE: valueBucket[item] = this.memberRole ?? 0; break; case TABLE_TEAM_MEMBER.COL_ENUM.TEAM_NICK: if (typeof this.teamNick !== 'undefined') { valueBucket[item] = this.teamNick; } break; case TABLE_TEAM_MEMBER.COL_ENUM.BITS: valueBucket[item] = this.bits ?? 0; break; case TABLE_TEAM_MEMBER.COL_ENUM.JOIN_TIME: valueBucket[item] = this.joinTime ?? 0; break; case TABLE_TEAM_MEMBER.COL_ENUM.VALID: valueBucket[item] = this.inTeam ?? 1; break; case TABLE_TEAM_MEMBER.COL_ENUM.SERVER_EXTENSION: if (typeof this.serverExtension !== 'undefined') { valueBucket[item] = this.serverExtension; } break; case TABLE_TEAM_MEMBER.COL_ENUM.MUTE: valueBucket[item] = this.chatBanned ? 1 : 0; break; case TABLE_TEAM_MEMBER.COL_ENUM.INVITOR_ACCOUNT_ID: if (typeof this.invitorAccountId !== 'undefined') { valueBucket[item] = this.invitorAccountId; } break; case TABLE_TEAM_MEMBER.COL_ENUM.UPDATE_TIME: valueBucket[item] = this.updateTime ?? (this.joinTime ?? 0); break; default: break; } }); return valueBucket; } static generateUpdateBucket(q15) { let valueBucket = {}; TABLE_TEAM_MEMBER.tableType.columns.forEach((item) => { switch (item) { case TABLE_TEAM_MEMBER.COL_ENUM.MEMBER_ROLE: if (typeof q15.memberRole !== 'undefined') { valueBucket[item] = q15.memberRole; } break; case TABLE_TEAM_MEMBER.COL_ENUM.TEAM_NICK: if (typeof q15.teamNick !== 'undefined') { valueBucket[item] = q15.teamNick; } break; case TABLE_TEAM_MEMBER.COL_ENUM.BITS: if (typeof q15.bits !== 'undefined') { valueBucket[item] = q15.bits; } break; case TABLE_TEAM_MEMBER.COL_ENUM.JOIN_TIME: if (typeof q15.joinTime !== 'undefined') { valueBucket[item] = q15.joinTime; } break; case TABLE_TEAM_MEMBER.COL_ENUM.VALID: if (typeof q15.inTeam !== 'undefined') { valueBucket[item] = q15.inTeam; } break; case TABLE_TEAM_MEMBER.COL_ENUM.SERVER_EXTENSION: if (typeof q15.serverExtension !== 'undefined') { valueBucket[item] = q15.serverExtension; } break; case TABLE_TEAM_MEMBER.COL_ENUM.MUTE: if (typeof q15.chatBanned !== 'undefined') { valueBucket[item] = q15.chatBanned; } break; case TABLE_TEAM_MEMBER.COL_ENUM.INVITOR_ACCOUNT_ID: if (typeof q15.invitorAccountId !== 'undefined') { valueBucket[item] = q15.invitorAccountId; } break; case TABLE_TEAM_MEMBER.COL_ENUM.UPDATE_TIME: if (typeof q15.updateTime !== 'undefined') { valueBucket[item] = q15.updateTime; } break; default: break; } }); return valueBucket; } toJSON() { return { teamId: this.teamId, teamType: this.teamType, accountId: this.accountId, memberRole: this.memberRole, teamNick: this.teamNick, serverExtension: this.serverExtension, joinTime: this.joinTime, updateTime: this.updateTime, invitorAccountId: this.invitorAccountId, inTeam: this.inTeam, chatBanned: this.chatBanned }; } } 