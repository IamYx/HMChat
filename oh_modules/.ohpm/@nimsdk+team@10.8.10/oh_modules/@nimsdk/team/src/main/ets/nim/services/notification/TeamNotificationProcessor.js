export class TeamNotificationProcessor { constructor(c18) { this.queue = []; this.processing = false; this.logger = c18; } enqueueEvent(event) { this.queue.push(event); this.processQueue(); } async processQueue() { if (this.processing) { return; } this.processing = true; while (this.queue.length > 0) { const b18 = this.queue.shift(); if (b18) { await b18.handler(this.logger); } } this.processing = false; } } export class TeamNotificationEvent { constructor(eventName, cmd, handler) { this._eventName = eventName; this._cmd = cmd; this._handler = handler; } eventName() { return this._eventName; } async handler(z17) { try { const a18 = new Date().getTime(); await this._handler(); const timeEnd = new Date().getTime(); z17.info('TeamNotificationProcessor@', `${this.eventName()} '${this._cmd}' cost: ${timeEnd - a18}ms`); return; } catch (e) { z17.error('TeamNotificationProcessor@', this.eventName(), this._cmd, JSON.stringify(e)); } } } 