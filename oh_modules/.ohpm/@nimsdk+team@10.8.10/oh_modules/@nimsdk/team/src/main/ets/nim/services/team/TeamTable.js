import { ColumnInfo, ColumnType, RdbPredicates, RdbTableImpl, V2NIMErrorImpl, V2NIMErrorMap, V2NIMTeamType } from '@nimsdk/base'; import { V2NIMTeamImpl } from './V2NIMTeamImpl'; import HashMap from "@ohos.util.HashMap"; import { TeamConst } from './TeamConst'; import { registerAspect } from './Aspect'; export const TEAM_TABLE = { tableName: 'team_table', columns: [ "team_type", "team_id", "name", "owner_account_id", "member_limit", "member_count", "create_time", "update_time", "intro", "announcement", "avatar", "server_extension", "customer_extension", "join_mode", "agree_mode", "invite_mode", "update_info_mode", "update_extension_mode", "chat_banned_mode", "valid_flag", "valid_member", "tag_type", "bits", "tlist_timetag", "tlist_local_timetag", "member_update_time" ] }; export const TeamColumns = [ new ColumnInfo("team_type", ColumnType.INTEGER, 32, false), new ColumnInfo("team_id", ColumnType.TEXT, -1, false), new ColumnInfo("name", ColumnType.TEXT, -1, false), new ColumnInfo("owner_account_id", ColumnType.TEXT, -1, false), new ColumnInfo("member_limit", ColumnType.INTEGER, -1, false), new ColumnInfo("member_count", ColumnType.INTEGER, -1, false), new ColumnInfo("create_time", ColumnType.INTEGER, -1, false), new ColumnInfo("update_time", ColumnType.INTEGER, -1, false), new ColumnInfo("intro", ColumnType.TEXT, -1, false), new ColumnInfo("announcement", ColumnType.TEXT, -1, false), new ColumnInfo("avatar", ColumnType.TEXT, -1, false), new ColumnInfo("server_extension", ColumnType.TEXT, -1, true), new ColumnInfo("customer_extension", ColumnType.TEXT, -1, true), new ColumnInfo("join_mode", ColumnType.INTEGER, -1, false), new ColumnInfo("agree_mode", ColumnType.INTEGER, -1, false), new ColumnInfo("invite_mode", ColumnType.INTEGER, -1, false), new ColumnInfo("update_info_mode", ColumnType.INTEGER, -1, false), new ColumnInfo("update_extension_mode", ColumnType.INTEGER, -1, false), new ColumnInfo("chat_banned_mode", ColumnType.INTEGER, -1, false), new ColumnInfo("valid_flag", ColumnType.INTEGER, -1, false), new ColumnInfo("valid_member", ColumnType.INTEGER, -1, true), new ColumnInfo("tag_type", ColumnType.INTEGER, -1, true), new ColumnInfo("bits", ColumnType.INTEGER, -1, true), new ColumnInfo("tlist_timetag", ColumnType.INTEGER, -1, true), new ColumnInfo("tlist_local_timetag", ColumnType.INTEGER, -1, true), new ColumnInfo("member_update_time", ColumnType.INTEGER, -1, false).setDefault(TeamConst.DEF_MEMBER_UPTIME) ]; const k26 = TEAM_TABLE.tableName; const l3 = '[TeamTable]'; export class TeamTable extends RdbTableImpl { constructor(d28, e28) { super(d28, k26); this.logger = e28.logger; registerAspect(TeamTable, e28); } async createTable() { try { this.createTableError = null; const c28 = { tableName: this.tableName, indexName: 'team_id_team_type_valid_unique_index', columns: [ "team_type", "team_id" ] }; await Promise.all([ await this.rdbStoreManager.createTable(this.tableName, false, TeamColumns), await this.rdbStoreManager.createTableUniqueIndex(c28) ]); const info = new ColumnInfo("member_update_time", ColumnType.INTEGER, -1, false).setDefault(TeamConst.DEF_MEMBER_UPTIME); await this.rdbStoreManager.upgradeVersion(this.tableName, info); } catch (e) { console.info(`create table data: team ${JSON.stringify(e)}`); this.createTableError = e; } } async upsertTeam(b28) { try { if (typeof b28 === 'undefined') { this.logger.info(l3, `upsertTeam illegal team: ${b28}`); return; } await this.ensureCreateTable(); this.logger.info(l3, 'upsertTeam', b28); const valueBucket = b28.generateBucket(); await this.rdbStoreManager.insertOrReplace(this.tableName, [valueBucket]); } catch (e) { this.logger.error(l3, 'upsertTeam', b28, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `insert ${JSON.stringify(b28)} ${JSON.stringify(e)}`, rawError: e } }); } } async upsertTeams(y27) { try { await this.ensureCreateTable(); this.logger.info(l3, 'upsertTeams', y27.length); let z27 = []; if (Array.isArray(y27) && y27.length > 0) { z27 = y27.map(a28 => a28.generateBucket()); } else { this.logger.info(l3, `upsertTeams illegal teams: ${y27}`); return; } await this.rdbStoreManager.insertOrReplace(this.tableName, z27); } catch (e) { this.logger.error(l3, 'upsertTeams', y27, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `insert ${JSON.stringify(y27.length)} ${JSON.stringify(e)}`, rawError: e } }); } } async queryMyTeams(types) { try { await this.ensureCreateTable(); this.logger.info(l3, 'queryMyTeams', types); const predicates = new RdbPredicates(this.tableName); if (types && types.length > 0) { predicates.in("team_type", types); } predicates.equalTo("valid_flag", 1) .and() .equalTo("valid_member", 1); const values = await this.rdbStoreManager.query(predicates); const w27 = []; values.map(value => { const x27 = V2NIMTeamImpl.buildFromValueBucket(value); w27.push(x27); }); return w27; } catch (e) { this.logger.error(l3, 'queryMyTeams', types, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryMyTeams`, rawError: e } }); } } async queryMyTeamsCount() { try { await this.ensureCreateTable(); this.logger.info(l3, 'queryMyTeamsCount'); const predicates = new RdbPredicates(this.tableName) .equalTo("valid_flag", 1) .and() .equalTo("valid_member", 1); const values = await this.rdbStoreManager.query(predicates); return values.length > 0 ? values.length : 0; } catch (e) { this.logger.error(l3, 'queryMyTeamsCount', e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryMyTeamsCount`, rawError: e } }); } } async getTeamInfo(t27, u27, v27) { try { await this.ensureCreateTable(); const predicates = new RdbPredicates(this.tableName) .equalTo("team_type", u27) .and() .equalTo("team_id", t27); if (v27) { predicates.and().equalTo("valid_flag", 1); } const values = await this.rdbStoreManager.query(predicates); if (values.length > 0) { return V2NIMTeamImpl.buildFromValueBucket(values[0]); } else { return undefined; } } catch (e) { this.logger.error(l3, 'getTeamInfo', t27, u27, v27, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `getTeamInfo`, rawError: e } }); } } async getTeamInfoByIds(o27, p27, q27) { try { if (!o27 || o27.length <= 0) { return []; } await this.ensureCreateTable(); const predicates = new RdbPredicates(this.tableName) .equalTo("team_type", p27) .and() .in("team_id", o27); if (q27) { predicates.and().equalTo("valid_flag", 1); } const values = await this.rdbStoreManager.query(predicates); const r27 = []; values.map(value => { const s27 = V2NIMTeamImpl.buildFromValueBucket(value); r27.push(s27); }); return r27; } catch (e) { this.logger.error(l3, 'getTeamInfoByIds', o27, p27, q27, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `getTeamInfoByIds`, rawError: e } }); } } async getTeamsInfo(k27, l27) { try { await this.ensureCreateTable(); const predicates = new RdbPredicates(this.tableName) .equalTo("team_type", k27); if (l27) { predicates.and().equalTo("valid_flag", 1); } const values = await this.rdbStoreManager.query(predicates); const m27 = []; values.map(value => { const n27 = V2NIMTeamImpl.buildFromValueBucket(value); m27.push(n27); }); return m27; } catch (e) { this.logger.error(l3, 'getTeamsInfo', k27, l27, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `getTeamsInfo`, rawError: e } }); } } async updateTeamInfo(j27) { try { await this.ensureCreateTable(); this.logger.info(l3, 'updateTeamInfo', j27); const valueBucket = V2NIMTeamImpl.generateUpdateBucket(j27); const predicates = new RdbPredicates(this.tableName) .equalTo("team_type", j27.teamType) .and() .equalTo("team_id", j27.teamId); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(l3, 'updateTeamInfo', j27, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `updateTeamInfo ${j27} `, rawError: e } }); } } async updateChatMode(g27, h27, i27) { try { await this.ensureCreateTable(); this.logger.info(l3, 'updateTeamInfo', g27, h27, i27); const valueBucket = {}; valueBucket["chat_banned_mode"] = i27; const predicates = new RdbPredicates(this.tableName) .equalTo("team_type", h27) .and() .equalTo("team_id", g27); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(l3, 'updateTeamInfo', g27, h27, i27, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `updateChatMode ${g27} ${h27} ${i27} `, rawError: e } }); } } async queryTeam(e27, f27) { try { await this.ensureCreateTable(); this.logger.info(l3, 'queryTeam', e27, f27); const predicates = new RdbPredicates(this.tableName) .equalTo("team_type", f27) .and() .equalTo("team_id", e27); const values = await this.rdbStoreManager.query(predicates); if (values.length > 0) { return V2NIMTeamImpl.buildFromValueBucket(values[0]); } else { return; } } catch (e) { this.logger.error(l3, 'queryTeam', e27, f27, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryTeam`, rawError: e } }); } } async queryTeams(a27, b27) { try { if (!a27 || a27.length <= 0) { return []; } await this.ensureCreateTable(); this.logger.info(l3, 'queryTeams', a27, b27); const predicates = new RdbPredicates(this.tableName) .in("team_id", a27) .and() .equalTo("team_type", b27); const values = await this.rdbStoreManager.query(predicates); const c27 = []; values.map(value => { const d27 = V2NIMTeamImpl.buildFromValueBucket(value); c27.push(d27); }); return c27; } catch (e) { this.logger.error(l3, 'queryTeams', a27, b27, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryMyTeamsCount`, rawError: e } }); } } async setTeams(x26) { try { if (typeof x26 === 'undefined' || x26.length <= 0) { this.logger.info(l3, `setTeams illegal teams: ${x26}`); return; } await this.ensureCreateTable(); this.logger.info(l3, 'setTeams', x26); const y26 = x26.map(z26 => z26.generateBucket()); await this.rdbStoreManager.insertOrReplace(this.tableName, y26); } catch (e) { this.logger.error(l3, 'setTeams', x26, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `setTeams`, rawError: e } }); } } async delete(v26, w26) { try { await this.ensureCreateTable(); this.logger.info(l3, 'delete', v26, w26); const predicates = new RdbPredicates(this.tableName) .equalTo("team_type", v26) .and() .equalTo("team_id", w26); return await this.rdbStoreManager.delete(predicates); } catch (e) { this.logger.error(l3, 'delete', v26, w26, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `team delete`, rawError: e } }); } } async search(r26) { try { await this.ensureCreateTable(); this.logger.info(l3, 'search', r26); const s26 = `%${r26}%`; const predicates = new RdbPredicates(this.tableName) .like("name", s26); const values = await this.rdbStoreManager.query(predicates); const t26 = []; values.map(value => { const u26 = V2NIMTeamImpl.buildFromValueBucket(value); t26.push(u26); }); return t26; } catch (e) { this.logger.error(l3, 'search', r26, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryAllFriends`, rawError: e } }); } } async isValidTeam(q26, type) { try { await this.ensureCreateTable(); this.logger.info(l3, 'isValidTeam', q26, type); const predicates = new RdbPredicates(this.tableName) .equalTo("team_type", type) .equalTo("valid_flag", 1); const values = await this.rdbStoreManager.query(predicates); if (values.length > 0) { return true; } return false; } catch (e) { this.logger.error(l3, 'isValidTeam', q26, type, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `isValidTeam`, rawError: e } }); } } async getMemberUpdateTimeMap(type) { try { await this.ensureCreateTable(); this.logger.info(l3, 'getMemberUpdateTimeMap', type); if (type !== V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL && type !== V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER) { this.logger.warn(l3, 'getMemberUpdateTimeMap catch invalid type', type); return new HashMap(); } const querySql = `
        SELECT ${"team_id"}, ${"member_update_time"}
        FROM ${TEAM_TABLE.tableName}
        WHERE ${"team_type"} = ${type}
      `; const valueBuckets = await this.rdbStoreManager.queryBySql(querySql); const n26 = new HashMap(); valueBuckets.map((v) => { const o26 = v["team_id"]; const p26 = v["member_update_time"] ?? TeamConst.DEF_MEMBER_UPTIME; n26.set(o26, p26); }); return n26; } catch (e) { this.logger.error(l3, 'getMemberUpdateTimeMap', type, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `getMemberUpdateTimeMap`, rawError: e } }); } } async updateMemberUpdateTimeMap(l26, type, m26) { try { await this.ensureCreateTable(); const valueBucket = {}; valueBucket["member_update_time"] = m26; const predicates = new RdbPredicates(this.tableName) .equalTo("team_id", l26) .equalTo("team_type", type); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(l3, 'updateMemberUpdateTimeMap', l26, type, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `updateMemberUpdateTimeMap`, rawError: e } }); } } } 