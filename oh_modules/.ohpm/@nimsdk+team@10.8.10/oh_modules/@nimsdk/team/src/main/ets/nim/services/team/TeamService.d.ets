import { NIM, PickForRequiredAndPartialTheRest, RdbStoreManager, V2NIMAntispamConfig, V2NIMCreateTeamParams, V2NIMCreateTeamResult, V2NIMTeam, V2NIMTeamChatBannedMode, V2NIMTeamType, V2NIMUpdateTeamInfoParams } from '@nimsdk/base'; import { TeamCloud } from './TeamCloud'; import { V2NIMTeamImpl } from './V2NIMTeamImpl'; import { TeamModel } from './TeamModel'; import { HashMap } from '@kit.ArkTS'; export declare class TeamService { private core; constructor(i26: NIM, j26: RdbStoreManager); private _model?; get model(): TeamModel; private _cloud?; get cloud(): TeamCloud; onLogin(): Promise<void>; onLogout(): void; createTeam(e26: V2NIMCreateTeamParams, f26?: string[], g26?: string, h26?: V2NIMAntispamConfig): Promise<V2NIMCreateTeamResult>; leaveTeam(c26: string, d26: V2NIMTeamType): Promise<void>; dismissTeam(a26: string, b26: V2NIMTeamType): Promise<void>; transferTeamOwner(x25: string, y25: V2NIMTeamType, accountId: string, z25?: boolean): Promise<void>; getJoinedTeamList(w25?: V2NIMTeamType[]): Promise<V2NIMTeamImpl[]>; getJoinedTeamCount(v25?: V2NIMTeamType[]): Promise<number>; getTeamInfo(s25: string, t25: V2NIMTeamType): Promise<V2NIMTeamImpl>; getTeamInfoByIds(k25: string[], l25: V2NIMTeamType): Promise<V2NIMTeamImpl[]>; searchTeamByKeyword(j25: string): Promise<V2NIMTeamImpl[]>; isValidTeam(i25: string, type: V2NIMTeamType): Promise<boolean>; updateTeamInfo(d25: string, e25: V2NIMTeamType, f25: V2NIMUpdateTeamInfoParams, g25?: V2NIMAntispamConfig): Promise<void>; setTeamChatBannedMode(a25: string, b25: V2NIMTeamType, c25: V2NIMTeamChatBannedMode): Promise<void>; syncTeamData(z24: V2NIMTeamImpl[]): Promise<void>; upsertLocal(y24: V2NIMTeamImpl): Promise<void>; updateLocal(x24: PickForRequiredAndPartialTheRest<V2NIMTeam, 'teamId' | 'teamType'>): Promise<void>; deleteLocalById(v24: string, w24: V2NIMTeamType): Promise<V2NIMTeamImpl | undefined>; getLocalById(s24: string, t24: V2NIMTeamType, u24?: boolean): Promise<V2NIMTeamImpl | undefined>; getLocalByIds(p24: string[], q24: V2NIMTeamType, r24?: boolean): Promise<V2NIMTeamImpl[]>; getLocalByType(n24: V2NIMTeamType, o24?: boolean): Promise<V2NIMTeamImpl[]>; queryMemberUpdateTimeMap(m24: V2NIMTeamType): Promise<HashMap<string, number>>; updateMemberUpdateTimeMap(k24: string, type: V2NIMTeamType, l24: number): Promise<void>; private registerInnerService; private unRegisterInnerService; } 