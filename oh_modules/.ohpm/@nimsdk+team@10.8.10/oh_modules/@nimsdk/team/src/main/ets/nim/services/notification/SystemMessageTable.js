import { ColumnInfo, ColumnType, RdbPredicates, RdbTableImpl, V2NIMErrorImpl, V2NIMErrorMap, V2NIMTeamJoinActionStatus } from '@nimsdk/base'; import { get } from '@nimsdk/vendor'; export const SystemMessageColumns = [ new ColumnInfo('idServer', ColumnType.TEXT, -1, false), new ColumnInfo('receiverId', ColumnType.TEXT, -1, false), new ColumnInfo('senderId', ColumnType.TEXT, -1, false), new ColumnInfo('type', ColumnType.INTEGER, -1, false), new ColumnInfo('timestamp', ColumnType.INTEGER, -1, false), new ColumnInfo('postscript', ColumnType.TEXT, -1, false), new ColumnInfo('content', ColumnType.TEXT, -1, false), new ColumnInfo('status', ColumnType.INTEGER, -1, false), new ColumnInfo('unread', ColumnType.INTEGER, -1, false) ]; export class SystemMessageTable extends RdbTableImpl { constructor(h17, tableName) { super(h17, tableName); } async createTable() { try { this.createTableError = null; await Promise.all([ await this.rdbStoreManager.createTable(this.tableName, 'messageId', SystemMessageColumns), await this.rdbStoreManager.createUniqueIndex(this.tableName, { indexName: 'id_server_unique_index', columns: ['idServer'] }) ]); } catch (e) { this.createTableError = e; } } async saveSystemMessage(d17) { try { await this.ensureCreateTable(); let valueBucket = {}; const e17 = get(d17, 'idServer'); const f17 = get(d17, 'receiverId'); const g17 = get(d17, 'senderId'); const type = get(d17, 'type'); const timestamp = get(d17, 'timestamp'); const predicates = new RdbPredicates(this.tableName); predicates.equalTo('idServer', e17). and(). equalTo('receiverId', f17). and(). equalTo('senderId', g17). and(). equalTo('type', type). and(). equalTo('timestamp', timestamp). and(). equalTo('status', 44); const values = await this.rdbStoreManager.query(predicates); if (values.length <= 0) { valueBucket['idServer'] = e17; valueBucket['receiverId'] = f17; valueBucket['senderId'] = g17; valueBucket['type'] = type; valueBucket['timestamp'] = timestamp; valueBucket['postscript'] = get(d17, 'postscript') ?? ''; valueBucket['content'] = get(d17, 'content') ?? ''; valueBucket['status'] = V2NIMTeamJoinActionStatus.V2NIM_TEAM_JOIN_ACTION_STATUS_INIT; valueBucket['unread'] = 1; await this.rdbStoreManager.insertOrReplace(this.tableName, [valueBucket]); } } catch (e) { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `insert ${this.tableName}`, rawError: e } }); } } } 