import { ColumnInfo, NIM, PickForRequiredAndPartialTheRest, RdbStoreManager, RdbTableImpl, TableType, V2NIMQueryDirection, V2NIMSortOrder, V2NIMTeamMemberRoleQueryType, V2NIMTeamType } from '@nimsdk/base'; import { HashMap } from '@kit.ArkTS'; import { V2NIMTeamMemberImpl } from './V2NIMTeamMemberImpl'; export declare namespace TABLE_TEAM_MEMBER { enum COL_ENUM { TEAM_ID = "team_id", TEAM_TYPE = "team_type", ACCOUNT_ID = "account_id", MEMBER_ROLE = "member_role", TEAM_NICK = "team_nick", BITS = "bits", JOIN_TIME = "join_time", VALID = "valid", SERVER_EXTENSION = "server_extension", MUTE = "mute", INVITOR_ACCOUNT_ID = "invitor_account_id", UPDATE_TIME = "update_time" } const columnsInfo: ColumnInfo[]; const tableType: TableType; } export declare class TeamMemberTable extends RdbTableImpl { private logger; constructor(f15: RdbStoreManager, g15: NIM); createTable(): Promise<void>; update(a15: PickForRequiredAndPartialTheRest<V2NIMTeamMemberImpl, 'teamId' | 'teamType' | 'accountId'>): Promise<void>; updateInvitor(w14: V2NIMTeamType, x14: string, y14: HashMap<string, string>): Promise<void>; updateValidByTeamId(t14: V2NIMTeamType, u14: string, v14: boolean): Promise<void>;               upsert(member: V2NIMTeamMemberImpl | V2NIMTeamMemberImpl[]): Promise<void>; queryTeamMember(p14: V2NIMTeamType, q14: string, accountId: string): Promise<V2NIMTeamMemberImpl | undefined>;                 queryTeamMembersByTeams(l14: V2NIMTeamType, m14: string[], accountId: string): Promise<V2NIMTeamMemberImpl[]>; queryTeamMembers(g14: V2NIMTeamType, h14: string, i14: string[]): Promise<V2NIMTeamMemberImpl[]>; queryByOptions(w13: V2NIMTeamType, x13: string, y13: V2NIMTeamMemberRoleQueryType, z13: boolean, direction: V2NIMQueryDirection, limit: number, offset: number): Promise<V2NIMTeamMemberImpl[]>; queryTeamMembersBy(q13: string, r13: V2NIMTeamType, order: V2NIMSortOrder, s13?: string): Promise<V2NIMTeamMemberImpl[]>;               delete(o13: V2NIMTeamType, p13?: string, accountId?: string): Promise<number>; } 