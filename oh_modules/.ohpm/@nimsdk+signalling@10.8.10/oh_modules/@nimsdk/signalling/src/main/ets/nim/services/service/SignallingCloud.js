import { get, set } from '@nimsdk/vendor'; import { formatMsgIds } from './format'; import { SignalingAcceptInviteRequest, SignalingAcceptInviteTag, SignalingBatchMarkReadRequest, SignalingCallRequest, SignalingCallTag, SignalingCancelInviteRequest, SignalingCancelInviteTag, SignalingCloseRequest, SignalingCloseTag, SignalingCreateRequest, SignalingCtrlRequest, SignalingCtrlTag, SignalingDelayRequest, SignalingDelayTag, SignalingGetRoomInfoRequest, SignalingGetRoomInfoTag, SignalingInviteRequest, SignalingInviteTag, SignalingJoinAndAcceptRequest, SignalingJoinAndAcceptTag, SignalingJoinRequest, SignalingJoinTag, SignalingLeaveRequest, SignalingLeaveTag, SignalingRejectInviteRequest, SignalingRejectInviteTag, SignallingCreateTag } from './SignallingModel'; export class SignallingCloud { constructor(r3) { this.core = r3; } async create(type, name, q3) { const tag = new SignallingCreateTag(type, name, q3); const result = await this.core.sendCmd('signallingCreate', new SignalingCreateRequest(tag)); const response = get(result.content, 'data'); return response; } async delay(p3) { const tag = new SignalingDelayTag(p3); const result = await this.core.sendCmd('signalingDelay', new SignalingDelayRequest(tag)); const response = get(result.content, 'data'); return response; } async close(l3, m3, n3) { if (m3 === undefined) { m3 = false; } const tag = new SignalingCloseTag(l3, m3, n3); await this.core.sendCmd('signalingClose', new SignalingCloseRequest(tag)); } async join(f3, g3, h3, uid, i3, j3, k3) { if (h3 === undefined) { h3 = true; } const tag = new SignalingJoinTag(f3, g3, h3, uid, i3, j3, k3); const result = await this.core.sendCmd('signalingJoin', new SignalingJoinRequest(tag)); const response = get(result.content, 'data'); return response; } async leave(c3, d3, e3) { if (d3 === undefined) { d3 = false; } const tag = new SignalingLeaveTag(c3, d3, e3); await this.core.sendCmd('signalingLeave', new SignalingLeaveRequest(tag)); } async invite(s2, to, requestId, t2, u2, v2, w2, z2, a3, b3) { if (b3 === undefined) { b3 = true; } if (t2 === undefined) { t2 = false; } if (u2 === undefined) { u2 = true; } const tag = new SignalingInviteTag(s2, to, requestId, t2, u2, v2, w2, z2, a3, b3); await this.core.sendCmd('signalingInvite', new SignalingInviteRequest(tag)); } async cancelInvite(o2, to, requestId, q2, r2) { if (r2 === undefined) { r2 = true; } const tag = new SignalingCancelInviteTag(o2, to, requestId, q2, r2); await this.core.sendCmd('signalingCancelInvite', new SignalingCancelInviteRequest(tag)); } async rejectInvite(l2, to, requestId, m2, n2) { if (n2 === undefined) { n2 = true; } const tag = new SignalingRejectInviteTag(l2, to, requestId, m2, n2); await this.core.sendCmd('signalingRejectInvite', new SignalingRejectInviteRequest(tag)); } async acceptInvite(i2, to, requestId, j2, k2) { if (k2 === undefined) { k2 = true; } const tag = new SignalingAcceptInviteTag(i2, to, requestId, j2, k2); await this.core.sendCmd('signalingAcceptInvite', new SignalingAcceptInviteRequest(tag)); } async ctrl(g2, to, h2) { const tag = new SignalingCtrlTag(g2, to, h2); await this.core.sendCmd('signalingSendCustomCommand', new SignalingCtrlRequest(tag)); } async getRoomInfo(f2) { const tag = new SignalingGetRoomInfoTag(f2); const result = await this.core.sendCmd('signalingGetRoomInfo', new SignalingGetRoomInfoRequest(tag)); const response = get(result.content, 'data'); return response; } async call(type, to, requestId, q1, s1, uid, t1, u1, v1, w1, z1, a2, b2, c2, d2, e2) { t1; if (t1 === undefined) { t1 = false; } if (z1 === undefined) { z1 = true; } if (b2 === undefined) { b2 = true; } const tag = new SignalingCallTag(type, to, requestId, q1, s1, uid, t1, u1, v1, w1, z1, a2, b2, c2, d2, e2); const result = await this.core.sendCmd('signalingCallEx', new SignalingCallRequest(tag)); const response = get(result.content, 'data'); return response; } async joinAndAccept(k1, to, requestId, l1, m1, uid, n1, o1, p1) { if (m1 === undefined) { m1 = true; } const tag = new SignalingJoinAndAcceptTag(k1, to, requestId, uid, l1, m1, n1, o1, p1); const result = await this.core.sendCmd('signalingJoinAndAccept', new SignalingJoinAndAcceptRequest(tag)); const response = get(result.content, 'data'); return response; } async batchMarkRead(i1) { const j1 = typeof get(i1, 'raw.r[0]') === 'number' ? `${i1.raw.r[0]}` : '0'; set(i1.content, 'data.msgId', get(i1.content, 'data.msgId') || j1); if (j1 && parseInt(j1)) { this.core.sendCmd('signalingBatchMarkRead', new SignalingBatchMarkReadRequest(15, 11, [parseInt(j1)])); } } async batchMsgIdsMarkRead(g1) { const h1 = formatMsgIds(g1); if (h1.length > 0) { this.core.sendCmd('signalingBatchMarkRead', new SignalingBatchMarkReadRequest(15, 11, h1)); } } } 