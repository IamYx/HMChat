import { NIM, NIMServiceConfig, NIMServiceName, V2NIMSignallingAcceptInviteParams, V2NIMSignallingCallParams, V2NIMSignallingCallResult, V2NIMSignallingCallSetupParams, V2NIMSignallingCallSetupResult, V2NIMSignallingCancelInviteParams, V2NIMSignallingChannelInfo, V2NIMSignallingChannelType, V2NIMSignallingInviteParams, V2NIMSignallingJoinParams, V2NIMSignallingJoinResult, V2NIMSignallingListener, V2NIMSignallingRejectInviteParams, V2NIMSignallingRoomInfo, V2NIMSignallingServiceInternal, V2Service } from '@nimsdk/base'; export default class V2NIMSignallingServiceImpl extends V2Service<V2NIMSignallingListener> implements V2NIMSignallingServiceInternal { private timer; private pollingInterval; private channels; constructor(z6: NIM, serviceName: NIMServiceName, a7: NIMServiceConfig); private _cloud?; private get cloud(); call(params: V2NIMSignallingCallParams): Promise<V2NIMSignallingCallResult>; callSetup(params: V2NIMSignallingCallSetupParams): Promise<V2NIMSignallingCallSetupResult>; createRoom(w6: V2NIMSignallingChannelType, x6?: string, y6?: string): Promise<V2NIMSignallingChannelInfo>; delayRoom(v6: string): Promise<V2NIMSignallingRoomInfo>; closeRoom(s6: string, t6?: boolean, u6?: string): Promise<void>; joinRoom(params: V2NIMSignallingJoinParams): Promise<V2NIMSignallingJoinResult>; leaveRoom(p6: string, q6?: boolean, r6?: string): Promise<void>; invite(params: V2NIMSignallingInviteParams): Promise<void>; cancelInvite(params: V2NIMSignallingCancelInviteParams): Promise<void>; rejectInvite(params: V2NIMSignallingRejectInviteParams): Promise<void>; acceptInvite(params: V2NIMSignallingAcceptInviteParams): Promise<void>; sendControl(m6: string, n6?: string, o6?: string): Promise<void>; getRoomInfoByChannelName(l6: string): Promise<V2NIMSignallingRoomInfo>; onLoginStart(accountId: string): Promise<void>; onLoginFinished(accountId: string): Promise<void>; onLogout(): void; private autoDelay; private signalingRecvEventHandler; private signalingMultiSyncEventHandler; private signalingSyncEventHandler; private signalingSyncChannelsHandler; private registerInnerService; private unRegisterInnerService; } 