import { V2NIMSignallingEventType } from '@nimsdk/base'; import { get } from '@nimsdk/vendor'; export function formatEvent(data) { const event = { eventType: get(data, 'attach.type'), channelInfo: { channelName: get(data, 'channelInfo.channelName'), channelId: get(data, 'channelInfo.channelId'), channelType: get(data, 'channelInfo.channelType'), channelValid: get(data, 'channelInfo.channelValid'), channelExtension: get(data, 'channelInfo.channelExtension'), createTime: get(data, 'channelInfo.createTime'), expireTime: get(data, 'channelInfo.expireTime'), creatorAccountId: get(data, 'channelInfo.creatorAccountId') }, serverExtension: get(data, 'serverExtension'), time: get(data, 'time'), requestId: get(data, 'requestId'), pushConfig: { pushEnabled: get(data, 'pushConfig.pushEnabled'), pushTitle: get(data, 'pushConfig.pushTitle'), pushContent: get(data, 'pushConfig.pushContent'), pushPayload: get(data, 'pushConfig.pushPayload') }, unreadEnabled: get(data, 'unreadEnabled'), operatorAccountId: get(data, 'inviterAccountId') }; if (event.eventType == V2NIMSignallingEventType.V2NIM_SIGNALLING_EVENT_TYPE_JOIN) { event.member = { accountId: get(data, 'attach.member.1'), uid: get(data, 'attach.member.2'), joinTime: get(data, 'attach.member.3'), expireTime: get(data, 'attach.member.4'), deviceId: get(data, 'attach.member.5') }; } if (event.eventType === V2NIMSignallingEventType.V2NIM_SIGNALLING_EVENT_TYPE_REJECT || event.eventType === V2NIMSignallingEventType.V2NIM_SIGNALLING_EVENT_TYPE_ACCEPT) { event.inviterAccountId = get(data, 'inviteeAccountId'); event.inviteeAccountId = event.operatorAccountId; } else { event.inviteeAccountId = get(data, 'inviteeAccountId'); if (event.eventType === V2NIMSignallingEventType.V2NIM_SIGNALLING_EVENT_TYPE_INVITE || event.eventType === V2NIMSignallingEventType.V2NIM_SIGNALLING_EVENT_TYPE_CANCEL_INVITE) { event.inviterAccountId = get(data, 'inviterAccountId'); } } return event; } export function formatChannel(data) { const f1 = { channelInfo: { channelName: get(data, 'channelInfo.channelName'), channelId: get(data, 'channelInfo.channelId'), channelType: get(data, 'channelInfo.channelType'), channelExtension: get(data, 'channelInfo.channelExtension'), createTime: get(data, 'channelInfo.createTime'), expireTime: get(data, 'channelInfo.expireTime'), channelValid: get(data, 'channelInfo.channelValid'), creatorAccountId: get(data, 'channelInfo.creatorAccountId') }, members: formatMembers(get(data, 'members')) }; return f1; } export function formatEvents(e1) { const events = e1.map(item => formatEvent(item)); return events; } export function formatChannels(c1) { const d1 = c1.map(item => formatChannel(item)); return d1; } export function formatMsgIds(u) { try { const a1 = get(u.content, 'datas').map((data) => { const b1 = get(data, 'msgId'); if (b1 !== undefined) { return b1; } }); return a1; } catch (e) { console.error(`formatMsgIds error ${JSON.stringify(e)}`); return []; } } export function formatMembers(m) { if (m === undefined) { return []; } const o = JSON.parse(m); const t = o.map(item => { const member = { accountId: get(item, '1'), uid: get(item, '2'), joinTime: get(item, '3'), expireTime: get(item, '4'), deviceId: get(item, '5') }; return member; }); return t ?? []; } export function formatMember(j) { if (j === undefined) { return undefined; } const item = JSON.parse(j); const member = { accountId: get(item, '1'), uid: get(item, '2'), joinTime: get(item, '3'), expireTime: get(item, '4'), deviceId: get(item, '5') }; return member; } 