import { cmdConfigSignalling, cmdMapSignalling, registerParser, V2NIMErrorCode, V2NIMErrorImpl, V2Service, validate } from '@nimsdk/base'; import { get } from '@nimsdk/vendor/Index'; import HashMap from '@ohos.util.HashMap'; import { registerAspect } from './Aspect'; import { formatChannels, formatEvent, formatEvents } from './format'; import { acceptInviteRule, callRule, cancelInviteParamsRule, closeRoomRule, createCallSetupRule, createRoomRule, getRoomInfoRule, inviteRoomRule, joinRoomRule, leaveRoomRule, rejectInviteRule, sendControl } from './rules'; import { SignallingCloud } from './SignallingCloud'; import { formatCallResponse, formatCallSetupResponse, formatCreateResponse, formatDelayResponse, formatGetInfoResponse, formatJoinResponse } from './SignallingModel'; const c6 = '[SignallingService]'; export default class V2NIMSignallingServiceImpl extends V2Service { constructor(z6, serviceName, a7) { super(serviceName, z6); this.timer = 0; this.pollingInterval = 60 * 1000 * 2; this.channels = new HashMap(); registerParser(z6, { cmdMap: cmdMapSignalling, cmdConfig: cmdConfigSignalling }); registerAspect(V2NIMSignallingServiceImpl, z6); } get cloud() { if (this._cloud) { return this._cloud; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'V2NIMSignallingService cloud is unavailable' } }); } } async call(params) { try { this.core.logger.info(c6, `call API call: ${params}`); if (params.calleeAccountId === this.core.account) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `you can't call yourself` } }); } validate(callRule, params, '', true); const response = await this.cloud.call(params.channelType, params.calleeAccountId, params.requestId, params.channelName, params.channelExtension, params.signallingConfig?.selfUid, params?.pushConfig?.pushEnabled, params?.pushConfig?.pushTitle, params?.pushConfig?.pushContent, params?.pushConfig?.pushPayload, params?.signallingConfig?.unreadEnabled, params.serverExtension, params?.signallingConfig?.offlineEnabled, params?.rtcConfig?.rtcChannelName, params?.rtcConfig?.rtcTokenTtl, params?.rtcConfig?.rtcParams); const result = formatCallResponse(response); this.channels.set(result.roomInfo.channelInfo.channelId, result.roomInfo.channelInfo); if (!this.timer) { this.timer = this.core.timerManager.addTimer(this.autoDelay.bind(this), this.pollingInterval, -1); } return result; } catch (e) { this.core.logger.error(c6, `call:`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `call ${JSON.stringify(e)}`, rawError: e } }); } } } async callSetup(params) { try { this.core.logger.info(c6, `call API callSetup: ${params}`); validate(createCallSetupRule, params, '', true); if (params.callerAccountId === this.core.account) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `you can't call yourself` } }); } const response = await this.cloud.joinAndAccept(params.channelId, params.callerAccountId, params.requestId, params.serverExtension, params?.signallingConfig?.offlineEnabled, params.signallingConfig?.selfUid, params.rtcConfig?.rtcChannelName, params.rtcConfig?.rtcTokenTtl, params.rtcConfig?.rtcParams); const result = formatCallSetupResponse(response); this.channels.set(result.roomInfo.channelInfo.channelId, result.roomInfo.channelInfo); if (!this.timer) { this.timer = this.core.timerManager.addTimer(this.autoDelay.bind(this), this.pollingInterval, -1); } return result; } catch (e) { this.core.logger.error(c6, `call:`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `call ${JSON.stringify(e)}`, rawError: e } }); } } } async createRoom(w6, x6, y6) { try { this.core.logger.info(c6, `call API createRoom: ${w6}, ${x6}, ${y6}`); validate(createRoomRule, { channelType: w6, channelName: x6, channelExtension: y6 }, '', true); const response = await this.cloud.create(w6, x6, y6); const info = formatCreateResponse(response); return info; } catch (e) { this.core.logger.error(c6, `createRoom:`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `createRoom ${JSON.stringify(e)}`, rawError: e } }); } } } async delayRoom(v6) { try { this.logger.info(c6, 'call API delayRoom', v6); validate({ channelId: { type: 'string', required: true, allowEmpty: false } }, { channelId: v6 }, '', true); if (this.channels.get(v6)) { this.logger.warn('delayRoom channelId is existed: ', v6); } const response = await this.cloud.delay(v6); const result = formatDelayResponse(response); this.channels.set(v6, result.channelInfo); return result; } catch (e) { this.logger.warn(`signling:delayRoom ${v6} failed`, e); this.channels.remove(v6); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `delayRoom ${JSON.stringify(e)}`, rawError: e } }); } } } async closeRoom(s6, t6, u6) { try { this.core.logger.info(c6, `call API closeRoom: ${s6}, ${t6}, ${u6}`); validate(closeRoomRule, { channelId: s6, offlineEnabled: t6, serverExtension: u6 }, '', true); await this.cloud.close(s6, t6, u6); } catch (e) { this.core.logger.error(c6, `closeRoom`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `closeRoom ${JSON.stringify(e)}`, rawError: e } }); } } } async joinRoom(params) { try { this.core.logger.info(c6, `call API joinRoom: ${params}`); validate(joinRoomRule, params, '', true); const response = await this.cloud.join(params.channelId, params.serverExtension, params.signallingConfig?.offlineEnabled, params.signallingConfig?.selfUid, params.rtcConfig?.rtcChannelName, params.rtcConfig?.rtcTokenTtl, params.rtcConfig?.rtcParams); const result = formatJoinResponse(response); this.channels.set(result.roomInfo.channelInfo.channelId, result.roomInfo.channelInfo); if (!this.timer) { this.timer = this.core.timerManager.addTimer(this.autoDelay.bind(this), this.pollingInterval, -1); } return result; } catch (e) { this.core.logger.error(c6, `join`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `join ${JSON.stringify(e)}`, rawError: e } }); } } } async leaveRoom(p6, q6, r6) { try { this.core.logger.info(c6, `call API leaveRoom: ${p6}, ${q6}, ${r6}`); validate(leaveRoomRule, { channelId: p6, offlineEnabled: q6, serverExtension: r6 }, '', true); await this.cloud.leave(p6, q6, r6); this.channels.remove(p6); } catch (e) { this.core.logger.error(c6, `close`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `leave ${JSON.stringify(e)}`, rawError: e } }); } } } async invite(params) { try { this.core.logger.info(c6, `call API invite: ${params}`); validate(inviteRoomRule, params, '', true); if (params.inviteeAccountId === this.core.account) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `you can't invite yourself` } }); } await this.cloud.invite(params.channelId, params.inviteeAccountId, params.requestId, params?.pushConfig?.pushEnabled, params.signallingConfig?.unreadEnabled, params.pushConfig?.pushTitle, params.pushConfig?.pushContent, params.pushConfig?.pushPayload, params.serverExtension, params.signallingConfig?.offlineEnabled); } catch (e) { this.core.logger.error(c6, `invite`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `invite ${JSON.stringify(e)}`, rawError: e } }); } } } async cancelInvite(params) { try { this.core.logger.info(c6, `call API cancelInvite: ${params}`); validate(cancelInviteParamsRule, params, '', true); await this.cloud.cancelInvite(params.channelId, params.inviteeAccountId, params.requestId, params.serverExtension, params.offlineEnabled); } catch (e) { this.core.logger.error(c6, `cancelInvite`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `cancelInvite ${JSON.stringify(e)}`, rawError: e } }); } } } async rejectInvite(params) { try { this.core.logger.info(c6, `call API rejectInvite: ${params}`); validate(rejectInviteRule, params, '', true); if (params.inviterAccountId === this.core.account) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `you can't call yourself` } }); } await this.cloud.rejectInvite(params.channelId, params.inviterAccountId, params.requestId, params.serverExtension, params.offlineEnabled); } catch (e) { this.core.logger.error(c6, `rejectInvite`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `rejectInvite ${JSON.stringify(e)}`, rawError: e } }); } } } async acceptInvite(params) { try { this.core.logger.info(c6, `call API acceptInvite: ${params}`); validate(acceptInviteRule, params, '', true); if (params.inviterAccountId === this.core.account) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `you can't call yourself` } }); } await this.cloud.acceptInvite(params.channelId, params.inviterAccountId, params.requestId, params.serverExtension, params.offlineEnabled); } catch (e) { this.core.logger.error(c6, `acceptInvite`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `acceptInvite ${JSON.stringify(e)}`, rawError: e } }); } } } async sendControl(m6, n6, o6) { try { this.core.logger.info(c6, `call API sendControl: ${m6}, ${n6}, ${o6}`); validate(sendControl, { channelId: m6, receiverAccountId: n6, serverExtension: o6 }, '', true); await this.cloud.ctrl(m6, n6, o6); } catch (e) { this.core.logger.error(c6, `sendControl`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `sendControl ${JSON.stringify(e)}`, rawError: e } }); } } } async getRoomInfoByChannelName(l6) { try { this.core.logger.info(c6, `call API getRoomInfoByChannelName: ${l6}`); validate(getRoomInfoRule, { channelName: l6 }, '', true); const response = await this.cloud.getRoomInfo(l6); const result = formatGetInfoResponse(response); return result; } catch (e) { this.core.logger.error(c6, `getRoomInfoByChannelName`, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getRoomInfoByChannelName ${JSON.stringify(e)}`, rawError: e } }); } } } async onLoginStart(accountId) { try { this.core.logger.info(c6, 'onLoginStart', accountId); this.registerInnerService(this.core); } catch (e) { this.core.logger.error(c6, 'onLoginStart', e); } } async onLoginFinished(accountId) { this.core.logger.info(c6, 'onLoginFinished', accountId); } onLogout() { this.core.logger.info(c6, 'onLogout'); this.unRegisterInnerService(); } async autoDelay() { if (this.channels.isEmpty()) { this.timer && this.core.timerManager.deleteTimer(this.timer); return; } let i6 = this.channels.keys(); let j6 = i6.next(); while (!j6.done) { const k6 = j6.value; j6 = i6.next(); try { this.logger.info('signalling:autoDelay', k6); const response = await this.cloud.delay(k6); const result = formatDelayResponse(response); const channel = result.channelInfo; this.channels.set(k6, channel); } catch (err) { this.logger.warn(`signalling:autoDelay ${k6} failed`, err); this.channels.remove(k6); } } } signalingRecvEventHandler(h6) { this.core.logger.info(c6, `call Handler signalingRecvEventHandler`, h6); const event = formatEvent(get(h6.content, 'data')); this.cloud.batchMarkRead(h6); this.emit('onOnlineEvent', event); } signalingMultiSyncEventHandler(g6) { this.core.logger.info(c6, `call Handler signalingMultiSyncEventHandler`, g6); const event = formatEvent(get(g6.content, 'data')); this.emit('onMultiClientEvent', event); } signalingSyncEventHandler(f6) { this.core.logger.info(c6, `call Handler signalingSyncEventHandler`, f6); const events = formatEvents(get(f6.content, 'datas')); this.cloud.batchMsgIdsMarkRead(f6); this.emit('onOfflineEvent', events); } signalingSyncChannelsHandler(e6) { this.core.logger.info(c6, `call Handler signalingSyncChannelsHandler`, e6); this.timer = 0; this.channels.clear(); const channels = formatChannels(get(e6.content, 'datas')); this.emit('onSyncRoomInfoList', channels); } registerInnerService(d6) { this._cloud = new SignallingCloud(d6); } unRegisterInnerService() { this._cloud = undefined; } } 