import { formatMembers } from './format'; export class SignalingBatchMarkReadRequest { constructor(a6, b6, ids) { this.sid = a6; this.cid = b6; this.ids = ids; } } export class SignallingCreateTag { constructor(type, name, z5) { this.type = type; this.channelName = name; this.ext = z5; } } export class SignalingCreateRequest { constructor(tag) { this.tag = tag; } } export class SignalingDelayTag { constructor(y5) { this.channelId = y5; } } export class SignalingDelayRequest { constructor(tag) { this.tag = tag; } } export class SignalingCloseTag { constructor(v5, w5, x5) { this.channelId = v5; this.isSave = w5; this.attachExt = x5; } } export class SignalingCloseRequest { constructor(tag) { this.tag = tag; } } export class SignalingJoinTag { constructor(p5, q5, r5, uid, s5, t5, u5) { this.channelId = p5; this.attachExt = q5; this.isSave = r5; this.uid = uid; this.rtcChannelName = s5; this.rtcTokenTtl = t5; this.rtcJoinRoomQueryParamMap = u5; } } export class SignalingJoinRequest { constructor(tag) { this.tag = tag; } } export class SignalingLeaveTag { constructor(m5, n5, o5) { this.channelId = m5; this.isSave = n5; this.attachExt = o5; } } export class SignalingLeaveRequest { constructor(tag) { this.tag = tag; } } export class SignalingInviteTag { constructor(e5, to, requestId, f5, g5, h5, i5, j5, k5, l5) { this.channelId = e5; this.to = to; this.requestId = requestId; this.needPush = f5; this.pushTitle = h5; this.pushContent = i5; this.pushPayload = j5; this.needBadge = g5; this.attachExt = k5; this.isSave = l5; } } export class SignalingInviteRequest { constructor(tag) { this.tag = tag; } } export class SignalingCancelInviteTag { constructor(b5, to, requestId, c5, d5) { this.channelId = b5; this.to = to; this.requestId = requestId; this.attachExt = c5; this.isSave = d5; } } export class SignalingCancelInviteRequest { constructor(tag) { this.tag = tag; } } export class SignalingRejectInviteTag { constructor(y4, to, requestId, z4, a5) { this.channelId = y4; this.to = to; this.requestId = requestId; this.attachExt = z4; this.isSave = a5; } } export class SignalingRejectInviteRequest { constructor(tag) { this.tag = tag; } } export class SignalingAcceptInviteTag { constructor(v4, to, requestId, w4, x4) { this.channelId = v4; this.to = to; this.requestId = requestId; this.attachExt = w4; this.isSave = x4; } } export class SignalingAcceptInviteRequest { constructor(tag) { this.tag = tag; } } export class SignalingCtrlTag { constructor(t4, to, u4) { this.channelId = t4; this.to = to; this.attachExt = u4; } } export class SignalingCtrlRequest { constructor(tag) { this.tag = tag; } } export class SignalingGetRoomInfoTag { constructor(s4) { this.channelName = s4; } } export class SignalingGetRoomInfoRequest { constructor(tag) { this.tag = tag; } } export class SignalingCallTag { constructor(type, to, requestId, g4, h4, uid, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4) { this.type = type; this.to = to; this.requestId = requestId; this.channelName = g4; this.ext = h4; this.uid = uid; this.needPush = i4; this.pushTitle = j4; this.pushContent = k4; this.pushPayload = l4; this.needBadge = m4; this.attachExt = n4; this.isSave = o4; this.rtcChannelName = p4; this.rtcTokenTtl = q4; this.rtcJoinRoomQueryParamMap = r4; } } export class SignalingCallRequest { constructor(tag) { this.tag = tag; } } export class SignalingJoinAndAcceptTag { constructor(a4, to, requestId, uid, b4, c4, d4, e4, f4) { this.channelId = a4; this.to = to; this.requestId = requestId; this.uid = uid; this.attachExt = b4; this.isSave = c4; this.rtcChannelName = d4; this.rtcTokenTtl = e4; this.rtcJoinRoomQueryParamMap = f4; } } export class SignalingJoinAndAcceptRequest { constructor(tag) { this.tag = tag; } } export function formatCreateResponse(response) { const info = { channelName: response.channelName, channelId: response.channelId, channelType: response.type, channelExtension: response.ext, channelValid: response.channelValid, createTime: response.channelCreateTime, expireTime: response.channelExpireTime, creatorAccountId: response.creator }; return info; } export function formatJoinResponse(response) { const y3 = { channelInfo: { channelType: response.type, channelName: response.channelName, channelId: response.channelId, createTime: response.channelCreateTime, expireTime: response.channelExpireTime, channelValid: response.channelValid, creatorAccountId: response.creator, channelExtension: response.ext }, members: formatMembers(response.members) }; const z3 = { rtcToken: response.rtcToken, rtcTokenTtl: response.rtcTokenTtl, rtcParams: response.rtcJoinRoomResponse }; return { roomInfo: y3, rtcInfo: z3 }; } export function formatGetInfoResponse(response) { const result = { channelInfo: { channelType: response.type, channelName: response.channelName, channelId: response.channelId, channelValid: response.channelValid, createTime: response.channelCreateTime, expireTime: response.channelExpireTime, creatorAccountId: response.creator, channelExtension: response.ext }, members: formatMembers(response.members) }; return result; } export function formatDelayResponse(response) { const result = { channelInfo: { channelType: response.type, channelName: response.channelName, channelValid: response.channelValid, channelId: response.channelId, createTime: response.channelCreateTime, expireTime: response.channelExpireTime, creatorAccountId: response.creator, channelExtension: response.ext }, members: formatMembers(response.members) }; return result; } export function formatCallResponse(response) { const v3 = { channelName: response.channelName, channelId: response.channelId, channelType: response.type, channelExtension: response.ext, channelValid: response.channelValid, createTime: response.channelCreateTime, expireTime: response.channelExpireTime, creatorAccountId: response.creator }; const w3 = { channelInfo: v3, members: formatMembers(response.members) }; const x3 = { rtcToken: response.rtcToken, rtcTokenTtl: response.rtcTokenTtl, rtcParams: response.rtcJoinRoomResponse }; const result = { roomInfo: w3, rtcInfo: x3, callStatus: response.callStatus }; return result; } export function formatCallSetupResponse(response) { const s3 = { channelName: response.channelName, channelId: response.channelId, channelType: response.type, channelValid: response.channelValid, channelExtension: response.ext, createTime: response.channelCreateTime, expireTime: response.channelExpireTime, creatorAccountId: response.creator }; const t3 = { channelInfo: s3, members: formatMembers(response.members) }; const u3 = { rtcToken: response.rtcToken, rtcTokenTtl: response.rtcTokenTtl, rtcParams: response.rtcJoinRoomResponse }; const result = { roomInfo: t3, rtcInfo: u3, callStatus: response.callStatus }; return result; } 