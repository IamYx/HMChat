import { RdbPredicates, RdbTableImpl, V2NIMErrorImpl, V2NIMErrorMap } from '@nimsdk/base'; import { TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME } from './types'; import { StickTopTimeEntity } from '../features/attribute/model/entity/UnreadCacheEntity'; import { registerAspect } from './Aspect'; const e1 = '[LocalConversationStickTopTable]'; const tableName = TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.tableType.tableName; export class LocalConversationStickTopTable extends RdbTableImpl { constructor(b3, c3) { super(b3); this.logger = c3.logger; registerAspect(this.tableName, LocalConversationStickTopTable, c3); } async createTable() { try { this.createTableError = null; const a3 = { tableName: TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.tableType.tableName, indexName: 'local_conversation_stick_top_time_table_id_index', columns: [ TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.CONVERSATION_ID ] }; await Promise.all([ await this.rdbStoreManager.createTable(TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.tableType.tableName, false, TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.columnsInfo), await this.rdbStoreManager.createTableUniqueIndex(a3) ]); } catch (e) { console.error(`create table data: lcst ${JSON.stringify(e)}`); this.createTableError = e; } } async queryByIds(v2) { try { if (!v2 || v2.length <= 0) { return []; } await this.ensureCreateTable(); this.logger.info(e1, 'queryByIds', v2); let w2 = new RdbPredicates(tableName); w2.in(TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.CONVERSATION_ID, v2); let values = await this.rdbStoreManager.query(w2); let result = []; values.map(value => { let z2 = this.parseStickTopTimeEntityByResultValue(value); result.push(z2); }); return result; } catch (e) { this.logger.error(e1, 'queryByIds', v2, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `stick top time table db queryByIds`, rawError: e } }); } } } async queryAll() { try { await this.ensureCreateTable(); this.logger.info(e1, 'queryAll'); let values = await this.rdbStoreManager.queryAll(tableName); let result = []; values.map(value => { let u2 = this.parseStickTopTimeEntityByResultValue(value); result.push(u2); }); return result; } catch (e) { this.logger.error(e1, 'queryAll', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `stick top time table db queryAll`, rawError: e } }); } } } async upsert(t2) { try { if (typeof t2 === 'undefined') { this.logger.info(e1, `upsert newEntities is undefined`); return; } await this.ensureCreateTable(); this.logger.info(e1, 'upsert', t2); const valuesBucket = {}; valuesBucket[TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.CONVERSATION_ID] = t2.conversationId; valuesBucket[TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.UPDATE_TIME] = t2.updateTime; valuesBucket[TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.EXT] = t2.ext ?? ''; await this.rdbStoreManager.insertOrReplace(tableName, [valuesBucket]); } catch (e) { this.logger.error(e1, 'upsert', t2, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `stick top time table db upsert`, rawError: e } }); } } } async upsertBatch(r2) { try { if (!r2 || r2.length <= 0) { this.logger.info(e1, `upsertBatch newEntities is illegal: ${r2}`); return; } await this.ensureCreateTable(); this.logger.info(e1, 'upsertBatch', r2); const valuesBuckets = new Array(); for (const s2 of r2) { const valuesBucket = {}; valuesBucket[TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.CONVERSATION_ID] = s2.conversationId; valuesBucket[TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.UPDATE_TIME] = s2.updateTime; valuesBucket[TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.EXT] = s2.ext ?? ''; valuesBuckets.push(valuesBucket); } await this.rdbStoreManager.insertOrReplace(tableName, valuesBuckets); } catch (e) { this.logger.error(e1, 'upsertBatch', r2, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `stick top time table db upsert`, rawError: e } }); } } } async delete(o2) { try { if (!o2 || o2.length <= 0) { return 0; } await this.ensureCreateTable(); this.logger.info(e1, 'delete', o2); let q2 = new RdbPredicates(tableName); q2.in(TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.CONVERSATION_ID, o2); return await this.rdbStoreManager.delete(q2); } catch (e) { this.logger.error(e1, 'delete', o2, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `conversation db delete`, rawError: e } }); } } } async deleteNotIn(m2) { try { if (!m2 || m2.length <= 0) { return 0; } await this.ensureCreateTable(); this.logger.info(e1, 'deleteNotIn', m2); let n2 = new RdbPredicates(tableName); n2.notIn(TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.CONVERSATION_ID, m2); return await this.rdbStoreManager.delete(n2); } catch (e) { this.logger.error(e1, 'deleteNotIn', m2, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `conversation db deleteNotIn`, rawError: e } }); } } } parseStickTopTimeEntityByResultSet(resultSet) { return new StickTopTimeEntity(resultSet.getString(resultSet.getColumnIndex(TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.CONVERSATION_ID)), resultSet.getLong(resultSet.getColumnIndex(TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.UPDATE_TIME)), resultSet.getString(resultSet.getColumnIndex(TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.EXT))); } parseStickTopTimeEntityByResultValue(valuesBucket) { return new StickTopTimeEntity(valuesBucket[TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.CONVERSATION_ID], valuesBucket[TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.UPDATE_TIME], valuesBucket[TABLE_LOCAL_CONVERSATION_STICK_TOP_TIME.COL_ENUM.EXT]); } } 