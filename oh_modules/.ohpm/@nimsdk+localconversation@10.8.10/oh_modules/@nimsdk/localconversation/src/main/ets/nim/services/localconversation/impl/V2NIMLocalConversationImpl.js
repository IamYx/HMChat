import { NIMBaseImpl, V2NIMConversationType } from '@nimsdk/base'; import { TABLE_LOCAL_CONVERSATION } from '../db/types'; import { V2NIMLocalConversationStatus } from '../utils/types'; export class V2NIMLocalConversationImpl extends NIMBaseImpl { constructor() { super(); this._conversationId = ''; this._type = V2NIMConversationType.V2NIM_CONVERSATION_TYPE_UNKNOWN; this._name = undefined; this._avatar = undefined; this._mute = undefined; this._stickTop = false; this._localExtension = undefined; this._lastMessage = undefined; this._unreadCount = 0; this._sortOrder = 0; this._createTime = 0; this._updateTime = 0; } get conversationId() { return this._conversationId; } get type() { return this._type; } get name() { return this._name; } get avatar() { return this._avatar; } get mute() { return this._mute; } get stickTop() { return this._stickTop; } get localExtension() { return this._localExtension; } get lastMessage() { return this._lastMessage; } get unreadCount() { return this._unreadCount; } get sortOrder() { return this._sortOrder; } get createTime() { return this._createTime; } get updateTime() { return this._updateTime; } set conversationId(b24) { this._conversationId = b24; } set type(a24) { this._type = a24; } set name(z23) { this._name = z23; } set avatar(y23) { this._avatar = y23; } set mute(x23) { this._mute = x23; } set stickTop(w23) { this._stickTop = w23; } set localExtension(v23) { this._localExtension = v23; } set lastMessage(u23) { this._lastMessage = u23; } set unreadCount(t23) { this._unreadCount = t23; } set sortOrder(s23) { this._sortOrder = s23; } set createTime(r23) { this._createTime = r23; } set updateTime(q23) { this._updateTime = q23; } static buildFromParams(l23, type, name, avatar, mute, m23, n23, o23, p23, sortOrder, createTime, updateTime) { return V2NIMLocalConversationImpl.initByParams(() => new V2NIMLocalConversationImpl(), l23, type, name, avatar, mute, m23, n23, o23, p23, sortOrder, createTime, updateTime); } static buildFromCloud(k23) { return V2NIMLocalConversationImpl.initByCloud(() => new V2NIMLocalConversationImpl(), k23); } static buildFromValueBucket(valuesBucket) { return V2NIMLocalConversationImpl.initByValueBucket(() => new V2NIMLocalConversationImpl(), valuesBucket); } fromParams(f23, type, name, avatar, mute, g23, h23, i23, j23, sortOrder, createTime, updateTime) { this.conversationId = f23; this.type = type; this.name = name; this.avatar = avatar; this.mute = mute; this.stickTop = g23; this.localExtension = h23; this.lastMessage = i23; this.unreadCount = j23; this.sortOrder = sortOrder; this.createTime = createTime; this.updateTime = updateTime; } fromCloud(e23) { this.conversationId = e23.conversationId; this.type = e23.type; this.name = e23.name; this.avatar = e23.avatar; this.mute = e23.mute; this.stickTop = e23.stickTop; this.localExtension = e23.localExtension; this.lastMessage = e23.lastMessage; this.unreadCount = e23.unreadCount; this.sortOrder = e23.sortOrder; this.createTime = e23.createTime; this.updateTime = e23.updateTime; } fromValueBucket(valuesBucket) { this.conversationId = valuesBucket[TABLE_LOCAL_CONVERSATION.COL_ENUM.CONVERSATION_ID]; this.type = valuesBucket[TABLE_LOCAL_CONVERSATION.COL_ENUM.TYPE]; this.name = undefined; this.avatar = undefined; this.mute = undefined; this.stickTop = !!(valuesBucket[TABLE_LOCAL_CONVERSATION.COL_ENUM.STICK_TOP]); this.localExtension = valuesBucket[TABLE_LOCAL_CONVERSATION.COL_ENUM.LOCAL_EXTENSION]; this.lastMessage = this.getLastMessageByBlob(valuesBucket[TABLE_LOCAL_CONVERSATION.COL_ENUM.LAST_MESSAGE]); this.unreadCount = valuesBucket[TABLE_LOCAL_CONVERSATION.COL_ENUM.UNREAD_COUNT]; this.sortOrder = valuesBucket[TABLE_LOCAL_CONVERSATION.COL_ENUM.SORT_ORDER]; this.createTime = valuesBucket[TABLE_LOCAL_CONVERSATION.COL_ENUM.CREATE_TIME]; this.updateTime = valuesBucket[TABLE_LOCAL_CONVERSATION.COL_ENUM.UPDATE_TIME]; } static parseArrayFromCloud(b23) { const c23 = new Array(b23.length); for (let d23 = 0; d23 < b23.length; d23++) { c23[d23] = V2NIMLocalConversationImpl.buildFromCloud(b23[d23]); } return c23; } generateBucket() { let valueBucket = {}; TABLE_LOCAL_CONVERSATION.tableType.columns.forEach((item) => { switch (item) { case TABLE_LOCAL_CONVERSATION.COL_ENUM.CONVERSATION_ID: valueBucket[item] = this.conversationId; break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.TYPE: valueBucket[item] = this.type; break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.STICK_TOP: valueBucket[item] = this.stickTop; break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.LOCAL_EXTENSION: valueBucket[item] = this.localExtension ?? ''; break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.LAST_MESSAGE: if (typeof this.lastMessage === 'undefined') { valueBucket[item] = ''; } else if (typeof this.lastMessage === 'string' && this.lastMessage === '') { valueBucket[item] = ''; } else { valueBucket[item] = JSON.stringify(this.lastMessage); } break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.UNREAD_COUNT: valueBucket[item] = this.unreadCount; break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.CREATE_TIME: valueBucket[item] = this.createTime; break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.SORT_ORDER: valueBucket[item] = this.sortOrder; break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.UPDATE_TIME: valueBucket[item] = this.updateTime; break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.STATUS: valueBucket[item] = V2NIMLocalConversationStatus.NORMAL; break; default: break; } }); return valueBucket; } static generateUpdateBucket(z22) { let valueBucket = {}; const a23 = Object.keys(z22); TABLE_LOCAL_CONVERSATION.tableType.columns.forEach((item) => { switch (item) { case TABLE_LOCAL_CONVERSATION.COL_ENUM.STICK_TOP: if (typeof z22.stickTop !== 'undefined') { valueBucket[item] = z22.stickTop; } break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.LOCAL_EXTENSION: if (typeof z22.localExtension !== 'undefined') { valueBucket[item] = z22.localExtension; } break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.LAST_MESSAGE: if (typeof z22.lastMessage !== 'undefined') { valueBucket[item] = JSON.stringify(z22.lastMessage); } else if (a23.includes('lastMessage')) { valueBucket[item] = ''; } break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.UNREAD_COUNT: if (typeof z22.unreadCount !== 'undefined') { valueBucket[item] = z22.unreadCount; } break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.CREATE_TIME: if (typeof z22.createTime !== 'undefined') { valueBucket[item] = z22.createTime; } break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.SORT_ORDER: if (typeof z22.sortOrder !== 'undefined') { valueBucket[item] = z22.sortOrder; } break; case TABLE_LOCAL_CONVERSATION.COL_ENUM.UPDATE_TIME: if (typeof z22.updateTime !== 'undefined') { valueBucket[item] = z22.updateTime; } break; default: break; } }); return valueBucket; } getLastMessageByBlob(x22) { if (x22 === '') { return undefined; } const y22 = JSON.parse(x22); return y22; } toJSON() { return { conversationId: this.conversationId, type: this.type, name: this.name, avatar: this.avatar, mute: this.mute, stickTop: this.stickTop, localExtension: this.localExtension, lastMessage: this.lastMessage, unreadCount: this.unreadCount, sortOrder: this.sortOrder, createTime: this.createTime, updateTime: this.updateTime }; } } 