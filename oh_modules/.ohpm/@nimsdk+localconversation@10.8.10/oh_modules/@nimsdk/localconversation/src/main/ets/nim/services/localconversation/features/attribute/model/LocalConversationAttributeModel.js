import { NIM_DATABASE_NAME_MAIN } from '@nimsdk/base'; import { LocalConversationAttributeTable } from '../../../db/LocalConversationAttributeTable'; import { LocalConversationStickTopTable } from '../../../db/LocalConversationStickTopTable'; const e1 = '[LocalConversationAttributeModel]'; export class LocalConversationAttributeModel { constructor(m13) { this.core = m13; this.db = new LocalConversationAttributeTable(m13.databaseService.getDatabase(m13, NIM_DATABASE_NAME_MAIN), m13); this.stickDb = new LocalConversationStickTopTable(m13.databaseService.getDatabase(m13, NIM_DATABASE_NAME_MAIN), m13); } async query(limit, offset, option) { const l13 = await this.db.query(limit, offset, option); this.core.logger.info(e1, `attribute query done. conversations.size: ${l13.length}`); return l13; } async queryById(j13) { const k13 = await this.db.queryById(j13); return k13; } async queryByIds(h13) { const i13 = await this.db.queryByIds(h13); return i13; } async insert(g13) { await this.db.insert(g13); return; } async update(e13) { const f13 = await this.db.update(e13); this.core.logger.info(e1, `attribute update done. affectedRow: ${f13}`); return; } async delete(c13, d13 = false) { if (d13) { await this.db.delete(c13); } else { await this.db.softDelete(c13); } this.core.logger.info(e1, `attribute delete done.}`); return; } async deleteBatch(a13, b13 = false) { if (b13) { await this.db.deleteBatch(a13); } else { await this.db.softDeleteBatch(a13); } this.core.logger.info(e1, `attribute deleteBatch done.`); return; } async queryStickTopTimeById(z12) { this.core.logger.info(e1, `sticktop queryAllStickTopTimeById. conversationId: ${z12}`); const entities = await this.stickDb.queryByIds([z12]); if (entities && entities.length > 0) { return entities[0]; } else { return undefined; } } async queryAllStickTopTimeIds() { this.core.logger.info(e1, `sticktop queryAllStickTopIds.`); const entities = await this.stickDb.queryAll(); const x12 = entities.map((y12) => { return y12.conversationId; }); return x12; } async deleteStickTopTime(w12) { this.core.logger.info(e1, `sticktop deleteStickTopTime, conversationIds: ${w12}`); await this.stickDb.delete(w12); return; } async deleteStickTopTimeNotIn(v12) { this.core.logger.info(e1, `sticktop deleteStickTopTimeNotIn, conversationIds: ${v12}`); await this.stickDb.deleteNotIn(v12); return; } async upsertStickTopTime(u12) { this.core.logger.info(e1, 'sticktop upsertStickTopTime, entity', u12); await this.stickDb.upsert(u12); return; } async upsertBatchStickTopTime(entities) { this.core.logger.info(e1, `sticktop upsertBatchStickTopTime, entities.size: ${entities.length}`); await this.stickDb.upsertBatch(entities); return; } async queryAllStickTopTime() { this.core.logger.info(e1, 'sticktop queryAllStickTopTime.'); return await this.stickDb.queryAll(); } } 