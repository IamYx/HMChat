import { RdbPredicates, RdbTableImpl, V2NIMErrorImpl, V2NIMErrorMap } from '@nimsdk/base'; import { UnreadCacheSubReadTimeEntity } from '../features/unread/model/entity/UnreadCacheEntity'; import { TABLE_LOCAL_CONVERSATION_READ_TIME } from './types'; import { registerAspect } from './Aspect'; const e1 = '[LocalConversationReadTimeTable]'; export class LocalConversationReadTimeTable extends RdbTableImpl { constructor(k2, l2) { super(k2); this.tableName = TABLE_LOCAL_CONVERSATION_READ_TIME.tableType.tableName; this.logger = l2.logger; registerAspect(this.tableName, LocalConversationReadTimeTable, l2); } async createTable() { try { this.createTableError = null; const j2 = { tableName: TABLE_LOCAL_CONVERSATION_READ_TIME.tableType.tableName, indexName: 'local_conversation_read_time_table_id_index', columns: [ TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.CONVERSATION_ID ] }; await Promise.all([ await this.rdbStoreManager.createTable(TABLE_LOCAL_CONVERSATION_READ_TIME.tableType.tableName, false, TABLE_LOCAL_CONVERSATION_READ_TIME.columnsInfo), await this.rdbStoreManager.createTableUniqueIndex(j2) ]); } catch (e) { console.error(`create table data: lrrt ${JSON.stringify(e)}`); this.createTableError = e; } } async queryById(h2) { try { await this.ensureCreateTable(); this.logger.info(e1, 'queryById', h2); let i2 = new RdbPredicates(this.tableName); i2.equalTo(TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.CONVERSATION_ID, h2); let columns = [ TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.CONVERSATION_ID, TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.READ_TIME ]; let values = await this.rdbStoreManager.query(i2, columns); let result = undefined; if (values.length > 0) { result = v1(values[0]); } return result; } catch (e) { this.logger.error(e1, 'queryById', h2, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `conversation db queryAll`, rawError: e } }); } } } async queryByIds(e2) { try { if (!e2 || e2.length <= 0) { return []; } await this.ensureCreateTable(); this.logger.info(e1, 'queryByIds', e2); let f2 = new RdbPredicates(this.tableName); f2.in(TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.CONVERSATION_ID, e2); let columns = [ TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.CONVERSATION_ID, TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.READ_TIME ]; let values = await this.rdbStoreManager.query(f2, columns); let result = []; values.map(value => { let g2 = v1(value); result.push(g2); }); return result; } catch (e) { this.logger.error(e1, 'queryByIds', e2, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `conversation db queryAll`, rawError: e } }); } } } async queryAll() { try { await this.ensureCreateTable(); this.logger.info(e1, 'queryAll'); let c2 = new RdbPredicates(this.tableName); c2.limitAs(w1); let columns = [ TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.CONVERSATION_ID, TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.READ_TIME ]; let values = await this.rdbStoreManager.query(c2, columns); let result = []; values.map(value => { let d2 = v1(value); result.push(d2); }); return result; } catch (e) { this.logger.error(e1, 'queryAll', JSON.stringify(e)); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `conversation db queryAll`, rawError: e } }); } } } async upsert(b2) { try { if (typeof b2 === 'undefined') { this.logger.info(e1, `upsert readTimeEntity is undefined`); return; } await this.ensureCreateTable(); this.logger.info(e1, 'upsert', b2); const valuesBucket = {}; valuesBucket[TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.READ_TIME] = b2.timestamp; valuesBucket[TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.CONVERSATION_ID] = b2.conversationId; await this.rdbStoreManager.insertOrReplace(this.tableName, [valuesBucket]); } catch (e) { this.logger.error(e1, 'upsert', b2, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `conversation db queryAll`, rawError: e } }); } } } async deleteBatch(z1) { try { if (!z1 || z1.length <= 0) { return 0; } await this.ensureCreateTable(); this.logger.info(e1, 'deleteBatch', z1); let a2 = new RdbPredicates(this.tableName); a2.in(TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.CONVERSATION_ID, z1); return await this.rdbStoreManager.delete(a2); } catch (e) { this.logger.error(e1, 'deleteBatch', z1, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `conversation db queryAll`, rawError: e } }); } } } } const w1 = 10000; function u1(resultSet) { return new UnreadCacheSubReadTimeEntity(resultSet.getString(resultSet.getColumnIndex(TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.CONVERSATION_ID)), resultSet.getLong(resultSet.getColumnIndex(TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.READ_TIME))); } function v1(valuesBucket) { return new UnreadCacheSubReadTimeEntity(valuesBucket[TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.CONVERSATION_ID], valuesBucket[TABLE_LOCAL_CONVERSATION_READ_TIME.COL_ENUM.READ_TIME]); } 