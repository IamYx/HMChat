import { NIM, PickForRequiredAndPartialTheRest, V2NIMConversationType, V2NIMLocalConversation, V2NIMLocalConversationFilter, V2NIMLocalConversationOperationResult, V2NIMLocalConversationUnreadCountChangedFilter } from '@nimsdk/base'; import { UnreadCacheEntity } from '../features/unread/model/entity/UnreadCacheEntity'; export declare enum SceneType {       P2P = 0,       TEAM = 1,       SUPER_TEAM = 5 } export declare class MarkConvAckTuple { private _conversationId; private _type; private _timestamp; constructor(c25: string, type: V2NIMConversationType, timestamp: number); get conversationId(): string; get type(): V2NIMConversationType; get timestamp(): number; } export declare enum V2NIMLocalConversationStatus {       NORMAL = 0,       DELETED = 1 } export declare enum NotifyEventType {       NO_EVENT = 0,       UPDATE_EVENT = 1,       CREATE_EVENT = 2 }       export declare class AddUnreadCountEvent {       notifyType: NotifyEventType;       isRecount: boolean;       constructor(y24: NotifyEventType, z24: boolean); }       export declare enum AllowMode {       NO = 0,       YES = 1,       ONLY_TIME = 2 } export declare enum UpdateReadTimeMode {       NOTHING = 1,       UPDATE_TO_LATEST_MESSAGE = 2 } export type LocalConversationAttributeUpdateInfo = PickForRequiredAndPartialTheRest<V2NIMLocalConversation, 'conversationId' | 'updateTime' | 'sortOrder'>; export declare class ClearUnreadByIdsResult { private failedResults; private succeedEntities; constructor(u24: V2NIMLocalConversationOperationResult[], v24: UnreadCacheEntity[]); get operationResults(): V2NIMLocalConversationOperationResult[]; get unreadCacheEntities(): UnreadCacheEntity[]; } export declare class NotifyEventPair { conversationId: string; eventType: NotifyEventType; constructor(t24: string, eventType: NotifyEventType); } export declare class ConvTimePair { updateTime: number; sortOrder: number; constructor(r24: number, s24: V2NIMLocalConversation); private calculateUpdateTime; private calculateSortOrder; } export declare class StickTopInfo { private _conversationId; private _updateTime; private _stickTop; private _ext; constructor(m24: string, updateTime: number, n24: boolean); get updateTime(): number; get stickTop(): boolean; get conversationId(): string; get ext(): string; }                   export declare function getCloudStickTopId(i24: string, j24: NIM): string;                   export declare function getConversationIdFomCloud(id: string, g24: NIM): string; export declare function generateFilterKey(filter: V2NIMLocalConversationFilter): string; export declare class V2NIMLocalConversationUnreadCountChangedFilterImpl implements V2NIMLocalConversationUnreadCountChangedFilter {           conversationTypes?: V2NIMConversationType[];       ignoreMuted: boolean;       equals: (filter: V2NIMLocalConversationFilter) => boolean; } 