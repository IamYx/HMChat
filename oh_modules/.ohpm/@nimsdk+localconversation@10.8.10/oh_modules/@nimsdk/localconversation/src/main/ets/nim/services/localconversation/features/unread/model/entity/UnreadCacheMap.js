import HashMap from "@ohos.util.HashMap"; import { UnreadNotifyBy } from '../../LocalConversationUnreadService'; export class UnreadCacheMap { constructor(a20) { this.map = new HashMap(); this.unreadChangedHandler = a20; } load(z19) { this.map = z19; this.unreadChangedHandler.unreadCountChangedHandler(UnreadNotifyBy.SYNC_START, true, true); } set(w19, x19) { const y19 = this.map.get(w19); this.map.set(w19, x19); return this.notifyUnreadCountChange(y19, x19); } setWithoutNotify(t19, u19) { const v19 = this.map.get(t19); this.map.set(t19, u19); return this.hasUnreadCountChanged(v19, u19) || this.hasMuteChanged(v19, u19); } setBatch(p19) { const q19 = new Array(p19.length); for (let r19 = 0; r19 < p19.length; r19++) { const s19 = p19[r19]; q19[r19] = this.map.get(s19.conversationId); this.map.set(s19.conversationId, s19); } this.notifyUnreadCountChangeBatch(q19, p19); } remove(n19) { const o19 = this.map.get(n19); this.map.remove(n19); return this.notifyUnreadCountChange(o19, undefined); } removeBatch(i19) { const j19 = new Array(i19.length); const k19 = new Array(i19.length); for (let l19 = 0; l19 < i19.length; l19++) { const m19 = i19[l19]; j19[l19] = this.map.get(m19); k19[l19] = undefined; this.map.remove(m19); } this.notifyUnreadCountChangeBatch(j19, k19); } notifyUnreadCountChange(e19, f19) { const g19 = this.hasUnreadCountChanged(e19, f19); const h19 = this.hasMuteChanged(e19, f19); this.unreadChangedHandler.unreadCountChangedHandler(UnreadNotifyBy.NORMAL, g19, h19); return g19 || h19; } notifyUnreadCountChangeBatch(x18, y18) { let z18 = false; let a19 = false; if (x18.length === y18.length) { for (let b19 = 0; b19 < y18.length; b19++) { const c19 = x18[b19]; const d19 = y18[b19]; if (!z18) { z18 = this.hasUnreadCountChanged(c19, d19); } if (!a19) { a19 = this.hasMuteChanged(c19, d19); } } } this.unreadChangedHandler.unreadCountChangedHandler(UnreadNotifyBy.NORMAL, z18, a19); } hasUnreadCountChanged(t18, u18) { const v18 = t18?.unreadCount ?? 0; const w18 = u18?.unreadCount ?? 0; return v18 !== w18; } hasMuteChanged(p18, q18) { const r18 = !!(p18?.mute); const s18 = !!(q18?.mute); return r18 !== s18; } hasKey(o18) { return this.map.hasKey(o18); } get(n18) { return this.map.get(n18); } values() { return this.map.values(); } keys() { return this.map.keys(); } entries() { return this.map.entries(); } clear() { return this.map.clear(); } get length() { return this.map.length; } } 