import { NIM, V2NIMClearHistoryNotification, V2NIMLocalConversationOperationResult, V2NIMLocalConversationOption, V2NIMLocalConversationResult, V2NIMLocalConversationUpdate, V2NIMMessage, V2NIMMessageDeletedNotification, V2NIMMessageRevokeNotification } from '@nimsdk/base'; import { NotifyEventType } from '../../utils/types'; import V2NIMLocalConversationServiceImpl from '../../V2NIMLocalConversationServiceImpl'; import { HashMap } from '@kit.ArkTS'; import { V2NIMLocalConversationImpl } from '../../impl/V2NIMLocalConversationImpl'; export declare class LocalConversationAttributeService { private core; private service; private model; constructor(r12: NIM, service: V2NIMLocalConversationServiceImpl);                    getListByOption(offset: number, limit: number, option: V2NIMLocalConversationOption): Promise<V2NIMLocalConversationResult>;           getById(m12: string): Promise<V2NIMLocalConversationImpl | undefined>;           getByIds(k12: string[]): Promise<V2NIMLocalConversationImpl[]>;           create(h12: string): Promise<V2NIMLocalConversationImpl>;           deleteById(f12: string): Promise<void>;           deleteByIds(x11: string[]): Promise<V2NIMLocalConversationOperationResult[]>;                       stickTop(r11: string, s11: boolean, updateTime: number): Promise<void>;               update(l11: string, m11: V2NIMLocalConversationUpdate): Promise<void>;               updateLocalExtension(f11: string, g11: string): Promise<void>;   onMessageReceived(message: V2NIMMessage): Promise<NotifyEventType>; onMessageSent(message: V2NIMMessage): Promise<NotifyEventType>; onMessageInserted(message: V2NIMMessage): Promise<NotifyEventType>; onMessagesModify(e11: V2NIMMessage[]): Promise<HashMap<string, NotifyEventType>>; onMessagesSynced(d11: V2NIMMessage[]): Promise<HashMap<string, NotifyEventType>>; onMessagesFetched(c11: V2NIMMessage[]): Promise<HashMap<string, NotifyEventType>>; onMessagesDeleted(p10: V2NIMMessageDeletedNotification[]): Promise<HashMap<string, NotifyEventType>>; onMessagesRevoked(a10: V2NIMMessageRevokeNotification[]): Promise<HashMap<string, NotifyEventType>>; onMessagesCleared(q9: V2NIMClearHistoryNotification[]): Promise<HashMap<string, NotifyEventType>>; onConversationSetMute(m9: string, mute: boolean): Promise<NotifyEventType>;   private replaceLastMessage; private replaceLastMessages; private researchLastMessage;           private uniqueConversationByMessages;           private uniqueConversationByDeletedNotifications;           private uniqueConversationByRevokeNotifications;           private uniqueConversationByClearNotifications;                     private acquireLastMessageByReplaceMode; private computedFieldForConversationBatch;   private computedFieldForConversation;           private getTeamNameByConversation;           private computedFieldForConversations;             private allowUpdateLocalConvLastMessage;             private allowRecountOnDelete; private allowRecountOnRevoke; private allowRecountOnModify; private allowRecountOnSync; private allowRecountOnFetch;                   private allowRecountLocalConvLastMessage;                         private allowAndUpdateStickTop;               private allowAndAddStickTop;               private allowAndDeleteStickTop; private forceCreate;           private mockLastMessageByRevokeNotification;         queryAllStickTopTimeIds(): Promise<string[]>;         deleteStickTopTimeNotIn(q4: string[]): Promise<void>;           private getRemoteSenderName; } 