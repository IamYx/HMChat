import { NIM, NIMServiceName, Packet, V2NIMClearHistoryNotification, V2NIMConversationType, V2NIMLocalConversationConfig, V2NIMLocalConversationFilter, V2NIMLocalConversationListener, V2NIMLocalConversationOperationResult, V2NIMLocalConversationOption, V2NIMLocalConversationResult, V2NIMLocalConversationServiceInternal, V2NIMLocalConversationUnreadCountChangedFilter, V2NIMLocalConversationUpdate, V2NIMMessage, V2NIMMessageDeletedNotification, V2NIMMessageRevokeNotification, V2Service } from '@nimsdk/base'; import { LocalConversationAttributeService } from './features/attribute/LocalConversationAttributeService'; import { LocalConversationCloudService } from './features/cloud/LocalConversationCloudService'; import { LocalConversationUnreadService } from './features/unread/LocalConversationUnreadService'; import { V2NIMLocalConversationImpl } from './impl/V2NIMLocalConversationImpl'; export default class V2NIMLocalConversationServiceImpl extends V2Service<V2NIMLocalConversationListener> implements V2NIMLocalConversationServiceInternal { private isLogin; config: V2NIMLocalConversationConfig;   private _attribute?; private _unread?; private _cloud?; constructor(c31: NIM, serviceName: NIMServiceName, config: V2NIMLocalConversationConfig); private setListener; private registerInnerService; private unRegisterInnerService; get attribute(): LocalConversationAttributeService; get unread(): LocalConversationUnreadService; get cloud(): LocalConversationCloudService; onLoginStart(accountId: string): Promise<void>; onLoginFinished(accountId: string): Promise<void>; onLogout(): void; loadOnLogin(): Promise<void>; getConversationList(offset: number, limit: number): Promise<V2NIMLocalConversationResult>; getConversationListByOption(offset: number, limit: number, option: V2NIMLocalConversationOption): Promise<V2NIMLocalConversationResult>; getConversation(b31: string): Promise<V2NIMLocalConversationImpl>; getConversationListByIds(a31: string[]): Promise<V2NIMLocalConversationImpl[]>; createConversation(z30: string): Promise<V2NIMLocalConversationImpl>; deleteConversation(x30: string, y30?: boolean): Promise<void>; deleteConversationListByIds(v30: string[], w30?: boolean): Promise<V2NIMLocalConversationOperationResult[]>; stickTopConversation(t30: string, u30: boolean): Promise<void>; updateConversation(r30: string, s30: V2NIMLocalConversationUpdate): Promise<void>; updateConversationLocalExtension(p30: string, q30: string): Promise<void>; getTotalUnreadCount(): number; getUnreadCountByIds(o30: string[]): Promise<number>; getUnreadCountByFilter(filter: V2NIMLocalConversationFilter): Promise<number>; clearTotalUnreadCount(): Promise<void>; clearUnreadCountByIds(n30: string[]): Promise<V2NIMLocalConversationOperationResult[]>; clearUnreadCountByTypes(types: V2NIMConversationType[]): Promise<void>; subscribeUnreadCountByFilter(filter: V2NIMLocalConversationFilter): void; unsubscribeUnreadCountByFilter(filter: V2NIMLocalConversationFilter): void; markConversationRead(m30: string): Promise<number>; getConversationReadTime(l30: string): Promise<number>;              onMessageReceived(message: V2NIMMessage): Promise<void>;           onMessageSent(message: V2NIMMessage): Promise<void>;           onMessageInserted(message: V2NIMMessage): Promise<void>;           onMessagesDeleted(c30: V2NIMMessageDeletedNotification[]): Promise<void>;           onMessagesRevoked(z29: V2NIMMessageRevokeNotification[]): Promise<void>;           onMessagesModify(w29: V2NIMMessage[]): Promise<void>;               onMessagesCleared(t29: V2NIMClearHistoryNotification[]): Promise<void>;           onMessagesSynced(q29: V2NIMMessage[]): Promise<void>;           onMessagesFetched(n29: V2NIMMessage[]): Promise<void>;             onConversationSetMute(k29: string, mute: boolean): Promise<void>; private observeMainSyncState;     v2IGetConversationList(offset: number, limit: number): Promise<V2NIMLocalConversationResult>; v2IGetConversationListByOption(offset: number, limit: number, option: V2NIMLocalConversationOption): Promise<V2NIMLocalConversationResult>; v2IGetConversation(i29: string): Promise<V2NIMLocalConversationImpl>; v2IGetConversationListByIds(h29: string[]): Promise<V2NIMLocalConversationImpl[]>; v2ICreateConversation(f29: string): Promise<V2NIMLocalConversationImpl>; v2IDeleteConversation(d29: string, e29?: boolean): Promise<void>; v2IDeleteConversationListByIds(x28: string[], y28?: boolean | undefined): Promise<V2NIMLocalConversationOperationResult[]>; v2IStickTopConversation(u28: string, v28: boolean): Promise<void>; v2IUpdateConversation(s28: string, t28: V2NIMLocalConversationUpdate): Promise<void>; v2IUpdateConversationLocalExtension(q28: string, r28: string): Promise<void>; v2IGetTotalUnreadCount(): number; v2IGetUnreadCountByIds(o28: string[]): Promise<number>; v2IGetUnreadCountByFilter(filter: V2NIMLocalConversationFilter): Promise<number>; v2IClearTotalUnreadCount(): Promise<void>; v2IClearUnreadCountByIds(e28: string[]): Promise<V2NIMLocalConversationOperationResult[]>; v2IClearUnreadCountByTypes(types: V2NIMConversationType[]): Promise<void>; v2ISubscribeUnreadCountByFilter(filter: V2NIMLocalConversationFilter): void; v2IUnsubscribeUnreadCountByFilter(filter: V2NIMLocalConversationFilter): void; v2IGetConversationReadTime(x27: string): Promise<number>; v2IMarkConversationRead(r27: string): Promise<number>;                            private notifyConversation;                     private notifyMultiConversations;             private resolveMismatchedMessages; triggerOnConversationCreated(y26: V2NIMLocalConversationImpl): void; triggerOnConversationDeleted(x26: string[]): void; triggerOnConversationChanged(w26: V2NIMLocalConversationImpl[]): void; triggerOnTotalUnreadCountChanged(v26: number): void; triggerOnUnreadCountChangedByFilter(filter: V2NIMLocalConversationUnreadCountChangedFilter, u26: number): void; triggerOnConversationReadTimeUpdated(t26: string, timestamp: number): void;      private syncMarkSessionAckHandler; private syncMarkSuperTeamSessionAckHandler; v2ISyncMultiMarkSessionAckHandler(i26: Packet, j26: boolean): Promise<void>; v2ISyncMultiMarkSuperTeamSessionAckHandler(d26: Packet, e26: boolean): Promise<void>; private nimMultiSyncAddStickTopSessionHandler; private nimMultiSyncDeleteStickTopSessionHandler;                   v2ISyncStickTopSessionsHandler(i25: Packet, j25: boolean): Promise<void>;               private getAckTuplesFromEntities;   private updateSyncP2PTeamReadTime; private updateSyncSuperReadTime; private updateSyncStickTopTime; private validateFilter; private verifyLoginStatus; } 