import { NIM, V2NIMClearHistoryNotification, V2NIMConversationType, V2NIMLocalConversationFilter, V2NIMMessage, V2NIMMessageDeletedNotification, V2NIMMessageRevokeNotification } from '@nimsdk/base'; import { ClearUnreadByIdsResult, MarkConvAckTuple, NotifyEventType } from '../../utils/types'; import V2NIMLocalConversationServiceImpl from '../../V2NIMLocalConversationServiceImpl'; import { HashMap } from '@kit.ArkTS'; export declare class LocalConversationUnreadService { private core; private service; private model; private unreadChangedHandler; constructor(g18: NIM, service: V2NIMLocalConversationServiceImpl); onDatabaseOpen(): Promise<void>;   getTotal(): number; getByIds(d18: string[]): number; getByFilter(filter: V2NIMLocalConversationFilter): Promise<number>;       getReadTimeById(v17: string): Promise<number>;               deleteByConversationIds(u17: string[]): Promise<void>; clearTotal(): Promise<ClearUnreadByIdsResult>; clearByIds(i17: string[]): Promise<ClearUnreadByIdsResult>; clearByTypes(types: V2NIMConversationType[]): Promise<ClearUnreadByIdsResult>; clearBySyncTuple(e17: MarkConvAckTuple): Promise<NotifyEventType>;            addFilter(filter: V2NIMLocalConversationFilter): void;         deleteFilter(filter: V2NIMLocalConversationFilter): void;   onMessageReceived(message: V2NIMMessage): Promise<NotifyEventType>; onMessageInserted(message: V2NIMMessage): Promise<NotifyEventType>; onMessagesDeleted(a17: V2NIMMessageDeletedNotification[]): Promise<HashMap<string, NotifyEventType>>; onMessagesRevoked(y16: V2NIMMessageRevokeNotification[]): Promise<HashMap<string, NotifyEventType>>; onMessagesCleared(w16: V2NIMClearHistoryNotification[]): Promise<HashMap<string, NotifyEventType>>; onMessagesSynced(u16: V2NIMMessage[]): Promise<HashMap<string, NotifyEventType>>; onMessagesFetched(s16: V2NIMMessage[]): Promise<HashMap<string, NotifyEventType>>; onMessageSent(message: V2NIMMessage): Promise<NotifyEventType>; onConversationSetMute(p16: string, mute: boolean): Promise<NotifyEventType>; onMessagesModify(n16: V2NIMMessage[]): Promise<HashMap<string, NotifyEventType>>;      private doMessageReceived; private doMessageInserted; private doMessagesDeleted; private doMessagesRevoked; private doMessagesCleared; private doMessagesSynced; private doMessagesFetched; private doMessageSent; private doConversationSetMute; private doMessagesModify;              getOrCreateById(z15: string): Promise<number>; notifyUnreadCountChangedAfterSyncCompleted(): void; notifyUnreadCountChangedAfterOnMessagesFetched(): void;           private checkUnreadCache; private checkUnreadCacheBatch;                 private checkUnreadEnable;           private keepUnreadEnableMessages; } export declare class UnreadChangedHandler { private core; private service;                                           private unreadCountByFilter; private lastAtSyncStart; constructor(s15: NIM, service: V2NIMLocalConversationServiceImpl);             unreadCountChangedHandler(by: UnreadNotifyBy, m15: boolean, n15: boolean): void;         addFilter(filter: V2NIMLocalConversationFilter): void;         deleteFilter(filter: V2NIMLocalConversationFilter): void;             private isForce;               private ifNotifyWhenSync; } export declare enum UnreadNotifyBy {       NORMAL = 0,         SYNC_START = 1,         SYNC_END = 2 } 