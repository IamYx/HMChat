import { HashMap } from '@kit.ArkTS'; import { UnreadChangedHandler } from '../../LocalConversationUnreadService'; import { UnreadCacheEntity } from './UnreadCacheEntity';           export declare class UnreadCacheMap { private map; private unreadChangedHandler; constructor(a20: UnreadChangedHandler);           load(z19: HashMap<string, UnreadCacheEntity>): void;               set(w19: string, x19: UnreadCacheEntity): boolean;                 setWithoutNotify(t19: string, u19: UnreadCacheEntity): boolean;             setBatch(p19: UnreadCacheEntity[]): void;             remove(n19: string): boolean;             removeBatch(i19: string[]): void;                 private notifyUnreadCountChange;                 private notifyUnreadCountChangeBatch;               private hasUnreadCountChanged;             private hasMuteChanged; hasKey(o18: string): boolean; get(n18: string): UnreadCacheEntity; values(): IterableIterator<UnreadCacheEntity>; keys(): IterableIterator<string>; entries(): IterableIterator<[ string, UnreadCacheEntity ]>; clear(): void; get length(): number; } 