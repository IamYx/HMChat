import { NIM, V2NIMLocalConversationConfig, V2NIMMessage } from '@nimsdk/base'; import { HashMap } from '@kit.ArkTS'; import { UnreadCacheEntity, UnreadCacheSubReadTimeEntity } from './entity/UnreadCacheEntity'; import { MarkConvAckTuple, NotifyEventType } from '../../../utils/types'; import V2NIMLocalConversationServiceImpl from '../../../V2NIMLocalConversationServiceImpl'; import { UnreadCacheMap } from './entity/UnreadCacheMap'; import { UnreadChangedHandler } from '../LocalConversationUnreadService'; export declare class LocalConversationUnreadModel { private core; private service; private rdbStoreManager; private cacheMap; private unreadTable; private readTimeTable; constructor(v22: NIM, service: V2NIMLocalConversationServiceImpl, w22: UnreadChangedHandler); initCacheFromDb(): Promise<void>; queryCache(l22: string): UnreadCacheEntity | null; queryAllCache(): UnreadCacheMap; updateCacheBatch(entities: UnreadCacheEntity[]): void; getTotal(): number; getOrCreateById(j22: string, config: V2NIMLocalConversationConfig, notify: boolean): Promise<number>; getByIds(g22: string[]): number;   addUnreadCount(message: V2NIMMessage, config: V2NIMLocalConversationConfig): Promise<NotifyEventType>; addUnreadCountBatch(c22: V2NIMMessage[], config: V2NIMLocalConversationConfig): Promise<HashMap<string, NotifyEventType>>; private addUnreadCountInMemory; recountUnreadCountBatch(s21: V2NIMMessage[], config: V2NIMLocalConversationConfig): Promise<HashMap<string, NotifyEventType>>;                   private recountUnreadCount;                         conversationSetMute(g21: string, mute: boolean, config: V2NIMLocalConversationConfig): Promise<NotifyEventType>; private recountUnreadCountByReadTime;           private syncReadTimeToDb;             private upsertReadTimeToDb; private syncUnreadCountToDb; private syncReadTimeAndUnreadCountToDb; deleteReadTimeBatch(l20: string[]): Promise<void>;                     clearBySyncTuple(f20: MarkConvAckTuple, config: V2NIMLocalConversationConfig): Promise<NotifyEventType>; updateConversations(entities: UnreadCacheEntity[]): Promise<void>;           queryReadTimeEntity(b20: string): Promise<UnreadCacheSubReadTimeEntity | undefined>; } 