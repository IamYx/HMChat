import { AbsLocalConversationTable } from './AbsLocalConversationTable'; import { RdbPredicates, V2NIMErrorImpl, V2NIMErrorMap } from '@nimsdk/base'; import { UnreadCacheSubUnreadCountEntity } from '../features/unread/model/entity/UnreadCacheEntity'; import { TABLE_LOCAL_CONVERSATION } from './types'; import { V2NIMLocalConversationStatus } from '../utils/types'; import { registerAspect } from './Aspect'; const e1 = '[LocalConversationUnreadTable]'; export class LocalConversationUnreadTable extends AbsLocalConversationTable { constructor(n3, p3) { super(n3); this.logger = p3.logger; registerAspect('unread_table', LocalConversationUnreadTable, p3); } async queryById(k3) { try { if (!k3 || k3.length <= 0) { return undefined; } await this.ensureCreateTable(); this.logger.info(e1, 'queryById', k3); let l3 = new RdbPredicates(this.tableName); l3.equalTo(TABLE_LOCAL_CONVERSATION.COL_ENUM.CONVERSATION_ID, k3) .and() .notEqualTo(TABLE_LOCAL_CONVERSATION.COL_ENUM.STATUS, V2NIMLocalConversationStatus.DELETED); let columns = [ TABLE_LOCAL_CONVERSATION.COL_ENUM.CONVERSATION_ID, TABLE_LOCAL_CONVERSATION.COL_ENUM.UNREAD_COUNT ]; let values = await this.rdbStoreManager.query(l3, columns); if (values.length > 0) { const m3 = v1(values[0]); return m3; } else { return undefined; } } catch (e) { this.logger.error(e1, 'queryById', k3, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `localconversation unread db queryAll`, rawError: e } }); } } } async queryByIds(h3) { try { if (!h3 || h3.length <= 0) { return []; } await this.ensureCreateTable(); this.logger.info(e1, 'queryByIds', h3); let i3 = new RdbPredicates(this.tableName); i3.in(TABLE_LOCAL_CONVERSATION.COL_ENUM.CONVERSATION_ID, h3) .and() .notEqualTo(TABLE_LOCAL_CONVERSATION.COL_ENUM.STATUS, V2NIMLocalConversationStatus.DELETED); let columns = [ TABLE_LOCAL_CONVERSATION.COL_ENUM.CONVERSATION_ID, TABLE_LOCAL_CONVERSATION.COL_ENUM.UNREAD_COUNT ]; let values = await this.rdbStoreManager.query(i3, columns); let result = []; values.map(value => { let j3 = v1(value); result.push(j3); }); return result; } catch (e) { this.logger.error(e1, 'queryByIds', h3, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `localconversation unread db queryAll`, rawError: e } }); } } } async updateUnreadCount(f3) { try { await this.ensureCreateTable(); this.logger.info(e1, 'updateUnreadCount', f3); const valuesBucket = {}; valuesBucket[TABLE_LOCAL_CONVERSATION.COL_ENUM.UNREAD_COUNT] = f3.unreadCount; let g3 = new RdbPredicates(this.tableName); g3.equalTo(TABLE_LOCAL_CONVERSATION.COL_ENUM.CONVERSATION_ID, f3.conversationId); return await this.rdbStoreManager.update(valuesBucket, g3); } catch (e) { this.logger.error(e1, 'updateUnreadCount', f3, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `localconversation unread db updateUnreadCount`, rawError: e } }); } } } async updateUnreadCountBatch(d3) { try { await this.ensureCreateTable(); this.logger.info(e1, 'updateUnreadCountBatch', d3); await this.rdbStoreManager.beginTransaction(); for (const e3 of d3) { this.updateUnreadCount(e3); } await this.rdbStoreManager.commit(); } catch (e) { await this.rdbStoreManager.rollBack(); this.logger.error(e1, 'updateUnreadCountBatch', d3, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `localconversation unread db updateUnreadCountBatch`, rawError: e } }); } } } } function u1(resultSet) { return new UnreadCacheSubUnreadCountEntity(resultSet.getString(resultSet.getColumnIndex(TABLE_LOCAL_CONVERSATION.COL_ENUM.CONVERSATION_ID)), resultSet.getLong(resultSet.getColumnIndex(TABLE_LOCAL_CONVERSATION.COL_ENUM.UNREAD_COUNT))); } function v1(valuesBucket) { return new UnreadCacheSubUnreadCountEntity(valuesBucket[TABLE_LOCAL_CONVERSATION.COL_ENUM.CONVERSATION_ID], valuesBucket[TABLE_LOCAL_CONVERSATION.COL_ENUM.UNREAD_COUNT]); } 