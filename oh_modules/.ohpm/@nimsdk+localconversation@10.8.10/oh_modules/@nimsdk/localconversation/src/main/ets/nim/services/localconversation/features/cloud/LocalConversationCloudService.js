import { V2NIMConversationType, V2NIMErrorCode, V2NIMErrorImpl } from '@nimsdk/base'; import { chunk, get } from '@nimsdk/vendor'; import { MarkConvAckTuple, NotifyEventPair, SceneType } from '../../utils/types'; import { AddStickTopSessionRequest, DeleteStickTopSessionRequest, MarkMultSessionsAckParam, MarkMultSessionsAckRequest, MarkMultSuperTeamSessionsAckParam, MarkMultSuperTeamSessionsAckRequest, MarkSessionAckRequest, MarkSuperTeamSessionAckRequest, StickTopSessionParam } from './request/LocalConversationCloudRequest'; const e1 = '[LocalConversationCloudService]'; export class LocalConversationCloudService { constructor(w14, service) { this.core = w14; this.service = service; } async markAck(v14) { if (v14.length === 1) { await this.markConversationAck(v14[0]); } else if (v14.length > 1) { await this.markMultiConversationAck(v14); } } async stickTop(t14, u14) { if (u14) { return await this.addStickTop(t14); } else { return await this.cancelStickTop(t14); } } async processSyncMarkConversationAck(to, scene, timestamp) { const type = this.sceneToType(scene); let q14 = undefined; switch (type) { case V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P: q14 = this.core.conversationIdUtil.p2pConversationId(to); break; case V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM: q14 = this.core.conversationIdUtil.teamConversationId(to); break; case V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM: q14 = this.core.conversationIdUtil.superTeamConversationId(to); break; default: this.core.logger.error(e1, `type is out of expected, type: ${type}`); return undefined; } const r14 = new MarkConvAckTuple(q14, type, timestamp); this.service.triggerOnConversationReadTimeUpdated(q14, timestamp); const s14 = await this.service.unread.clearBySyncTuple(r14); return new NotifyEventPair(q14, s14); } async processSyncStickTopBatch(o14) { await Promise.all(o14.map((p14) => { return this.service.attribute.stickTop(p14.conversationId, p14.stickTop, p14.updateTime); })); return; } async processSyncStickTop(n14) { await this.service.attribute.stickTop(n14.conversationId, n14.stickTop, n14.updateTime); } async markNormalConversationAck(m14) { const to = this.core.conversationIdUtil.parseConversationTargetId(m14.conversationId); const scene = this.typeToScene(m14.type); if (typeof scene === 'undefined') { this.core.logger.error(e1, 'markConversationAck, unexpected scene'); return; } const request = new MarkSessionAckRequest(scene, to, m14.timestamp); await this.core.loginService.sendCmd('markSessionAck', request); return; } async markSuperTeamConversationAck(l14) { const to = this.core.conversationIdUtil.parseConversationTargetId(l14.conversationId); const request = new MarkSuperTeamSessionAckRequest(to, l14.timestamp); await this.core.loginService.sendCmd('markSuperTeamSessionAck', request); return; } async markMultiNormalConversationAck(f14, g14) { if (typeof f14 === 'undefined' || f14.length <= 0) { return; } const h14 = chunk(f14, g14); for (const i14 of h14) { const j14 = []; for (const k14 of i14) { const to = this.core.conversationIdUtil.parseConversationTargetId(k14.conversationId); const scene = this.typeToScene(k14.type); if (typeof scene === 'undefined') { this.core.logger.error(e1, 'markMultiNormalConversationAck, unexpected scene'); continue; } const data = new MarkMultSessionsAckParam(scene, to, k14.timestamp); j14.push(data); } if (j14.length <= 0) { continue; } const request = new MarkMultSessionsAckRequest(j14); await this.core.loginService.sendCmd('markMultSessionsAck', request); } } async markMultiSuperTeamConversationAck(z13, a14) { if (typeof z13 === 'undefined' || z13.length <= 0) { return; } const b14 = chunk(z13, a14); for (const c14 of b14) { const d14 = []; for (const e14 of c14) { const to = this.core.conversationIdUtil.parseConversationTargetId(e14.conversationId); const data = new MarkMultSuperTeamSessionsAckParam(to, e14.timestamp); d14.push(data); } if (d14.length <= 0) { continue; } const request = new MarkMultSuperTeamSessionsAckRequest(d14); await this.core.loginService.sendCmd('markMultSuperTeamSessionsAck', request); } } async markConversationAck(y13) { this.core.logger.info(e1, 'markConversationAck, tuple', y13); if (y13.type !== V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM) { await this.markNormalConversationAck(y13); } else { await this.markSuperTeamConversationAck(y13); } } async markMultiConversationAck(t13) { const u13 = []; const v13 = []; for (const x13 of t13) { switch (x13.type) { case V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P: u13.push(x13); break; case V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM: u13.push(x13); break; case V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM: v13.push(x13); break; default: break; } } const w13 = 50; await this.markMultiNormalConversationAck(u13, w13); await this.markMultiSuperTeamConversationAck(v13, w13); } async addStickTop(r13) { const param = new StickTopSessionParam(r13, this.core); const request = new AddStickTopSessionRequest(param); const s13 = (await this.core.sendCmd('nimAddStickTopSession', request)); this.core.logger.info(e1, 'add stick top, conversationId', r13, 'result:', s13); return get(s13.content, 'data.updateTime'); } async cancelStickTop(p13) { const param = new StickTopSessionParam(p13, this.core); const request = new DeleteStickTopSessionRequest(param); const q13 = (await this.core.sendCmd('nimDeleteStickTopSession', request)); this.core.logger.info(e1, 'cancel stick top, conversationId', p13, 'result:', q13); if (get(q13.raw.code) !== V2NIMErrorCode.V2NIM_ERROR_CODE_SUCCESS && q13.error !== null) { this.core.logger.info(e1, `calcel stick top failed, conversationId: ${p13}`); throw new V2NIMErrorImpl(q13.error); } else { return get(q13.content, 'timetag'); } } sceneToType(scene) { switch (scene) { case SceneType.P2P: return V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P; case SceneType.TEAM: return V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM; case SceneType.SUPER_TEAM: return V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM; default: return V2NIMConversationType.V2NIM_CONVERSATION_TYPE_UNKNOWN; } } typeToScene(type) { switch (type) { case V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P: return SceneType.P2P; case V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM: return SceneType.TEAM; case V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM: return undefined; default: return undefined; } } } 