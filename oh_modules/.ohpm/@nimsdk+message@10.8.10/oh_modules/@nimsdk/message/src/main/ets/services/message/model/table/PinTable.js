import { ColumnInfo, ColumnType, RdbPredicates, RdbTableImpl, V2NIMErrorImpl, V2NIMErrorMap } from '@nimsdk/base'; import { registerAspect } from './Aspect'; const d46 = { tableName: 'message_pin_table', columns: [ "conversation_id", "conversation_type", "client_id", "server_id", "sender_id", "receive_id", "operator_id", "message_create_time", "server_extension", "create_time", "update_time" ] }; const e46 = [ new ColumnInfo("conversation_id", ColumnType.TEXT, -1, false), new ColumnInfo("conversation_type", ColumnType.INTEGER, -1, false), new ColumnInfo("client_id", ColumnType.TEXT, -1, false), new ColumnInfo("server_id", ColumnType.TEXT, -1, false), new ColumnInfo("sender_id", ColumnType.TEXT, -1, false), new ColumnInfo("receive_id", ColumnType.TEXT, -1, false), new ColumnInfo("operator_id", ColumnType.TEXT, -1, false), new ColumnInfo("message_create_time", ColumnType.INTEGER, -1, false), new ColumnInfo("server_extension", ColumnType.TEXT, -1, false), new ColumnInfo("create_time", ColumnType.INTEGER, -1, false), new ColumnInfo("update_time", ColumnType.INTEGER, -1, false) ]; const f46 = d46.tableName; const s41 = '[PinTable]'; export class PinTable extends RdbTableImpl { constructor(q46, r46) { super(q46); this.logger = r46.logger; registerAspect(f46, PinTable, r46); } async createTable() { try { this.createTableError = null; await Promise.all([ await this.rdbStoreManager.createTable(f46, false, e46), await this.rdbStoreManager.createIndex(f46, { indexName: 'conversation_id_index', columns: ['conversation_id'] }), await this.rdbStoreManager.createIndex(f46, { indexName: 'conversation_id_message_index', columns: ['conversation_id', 'client_id'] }) ]); } catch (e) { this.logger.error(s41, `create table data: pin `, e); this.createTableError = e; } } async insert(p46) { try { if (typeof p46 === 'undefined') { this.logger.info(s41, `insert illegal pin: ${p46}`); return; } await this.ensureCreateTable(); this.logger.info(s41, 'insert', p46); const valueBuckets = Array.isArray(p46) ? p46.map(generateBucket) : [generateBucket(p46)]; if (valueBuckets.length <= 0) { this.logger.info(s41, `insert pin valueBuckets length is 0`); return; } await this.rdbStoreManager.insertOrReplace(f46, valueBuckets); } catch (e) { this.logger.error(s41, 'insert', p46, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `insert ${p46}`, rawError: e } }); } } async update(o46) { try { await this.ensureCreateTable(); this.logger.info(s41, 'update', o46); const valueBucket = {}; valueBucket["sender_id"] = o46.messageRefer.senderId; valueBucket["receive_id"] = o46.messageRefer.receiverId; valueBucket["message_create_time"] = o46.messageRefer.createTime; valueBucket["server_id"] = o46.messageRefer.messageServerId; valueBucket["conversation_type"] = o46.messageRefer.conversationType; valueBucket["server_extension"] = o46.serverExtension ?? ''; valueBucket["create_time"] = o46.createTime; valueBucket["update_time"] = o46.updateTime; valueBucket["operator_id"] = o46.operatorId; const predicates = new RdbPredicates(f46).equalTo("conversation_id", o46.messageRefer.conversationId). and(). equalTo("client_id", o46.messageRefer.messageClientId); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(s41, 'update', o46, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `update ${JSON.stringify(o46)}`, rawError: e } }); } } async delete(n46) { try { await this.ensureCreateTable(); this.logger.info(s41, 'delete', n46); const predicates = new RdbPredicates(f46).equalTo('conversation_id', n46.messageRefer.conversationId). and(). equalTo('client_id', n46.messageRefer.messageClientId); return await this.rdbStoreManager.delete(predicates); } catch (e) { this.logger.error(s41, 'delete', n46, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `delete ${n46}`, rawError: e } }); } } async deleteByConversationId(m46) { try { await this.ensureCreateTable(); this.logger.info(s41, 'deleteByConversationId', m46); const predicates = new RdbPredicates(f46).equalTo('conversation_id', m46); return await this.rdbStoreManager.delete(predicates); } catch (e) { this.logger.error(s41, 'deleteByConversationId', m46, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `delete ${m46}`, rawError: e } }); } } async queryByClientId(k46, clientId) { try { await this.ensureCreateTable(); this.logger.info(s41, 'queryByClientId', k46, clientId); const predicates = new RdbPredicates(f46).equalTo('conversation_id', k46).and().equalTo('client_id', clientId); const values = await this.rdbStoreManager.query(predicates); let l46 = {}; if (values.length > 0) { l46 = c46(values[0]); } return l46; } catch (e) { this.logger.error(s41, 'queryByClientId', k46, clientId, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryByClientId ${k46}`, rawError: e } }); } } async queryByConversationId(j46) { try { await this.ensureCreateTable(); this.logger.info(s41, 'queryByConversationId', j46); const predicates = new RdbPredicates(f46).equalTo('conversation_id', j46).orderByDesc('update_time'); const values = await this.rdbStoreManager.query(predicates); let result = []; values.map(value => { result.push(c46(value)); }); return result; } catch (e) { this.logger.error(s41, 'queryByConversationId', j46, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryByConversationId ${j46}`, rawError: e } }); } } async query(i46) { try { await this.ensureCreateTable(); this.logger.info(s41, 'query', i46); const predicates = new RdbPredicates(f46).equalTo('conversation_id', i46); const values = await this.rdbStoreManager.query(predicates); let result = []; values.map(value => { result.push(c46(value)); }); return result; } catch (e) { this.logger.error(s41, 'query', i46, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `delete ${i46}`, rawError: e } }); } } } function generateBucket(message) { let valueBucket = {}; d46.columns.forEach((item) => { switch (item) { case 'conversation_id': valueBucket[item] = message.messageRefer.conversationId; break; case 'conversation_type': valueBucket[item] = message.messageRefer.conversationType; break; case 'client_id': valueBucket[item] = message.messageRefer.messageClientId; break; case 'server_id': valueBucket[item] = message.messageRefer.messageServerId; break; case 'sender_id': valueBucket[item] = message.messageRefer.senderId; break; case 'receive_id': valueBucket[item] = message.messageRefer.receiverId; break; case 'operator_id': valueBucket[item] = message.operatorId; break; case 'message_create_time': valueBucket[item] = message.messageRefer.createTime; break; case 'create_time': valueBucket[item] = message.createTime; break; case 'update_time': valueBucket[item] = message.updateTime; break; case 'server_extension': valueBucket[item] = message.serverExtension ?? ''; default: break; } }); return valueBucket; } function c46(valuesBucket) { try { const g46 = {}; const h46 = {}; h46.senderId = valuesBucket['sender_id']; h46.receiverId = valuesBucket['receive_id']; h46.messageClientId = valuesBucket['client_id']; h46.messageServerId = valuesBucket['server_id']; h46.createTime = valuesBucket['message_create_time']; h46.conversationType = valuesBucket['conversation_type']; h46.conversationId = valuesBucket['conversation_id']; g46.messageRefer = h46; g46.operatorId = valuesBucket['operator_id']; g46.createTime = valuesBucket['create_time']; g46.updateTime = valuesBucket['update_time']; g46.serverExtension = valuesBucket['server_extension']; return g46; } catch (e) { console.error(`errr ${JSON.stringify(e)}`); return {}; } } 