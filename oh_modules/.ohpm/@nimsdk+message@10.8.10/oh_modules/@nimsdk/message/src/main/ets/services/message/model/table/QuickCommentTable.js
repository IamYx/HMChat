import { ColumnInfo, ColumnType, RdbPredicates, RdbTableImpl, V2NIMErrorImpl, V2NIMErrorMap } from '@nimsdk/base'; import { registerAspect } from './Aspect'; const u46 = [ new ColumnInfo('client_id', ColumnType.TEXT, -1, false), new ColumnInfo('operator_id', ColumnType.TEXT, -1, false), new ColumnInfo('type', ColumnType.INTEGER, -1, false), new ColumnInfo('create_time', ColumnType.INTEGER, -1, false), new ColumnInfo('extension', ColumnType.TEXT, -1, false) ]; const v46 = { tableName: 'quick_comment_table', columns: [ 'client_id', 'operator_id', 'type', 'create_time', 'extension' ] }; const s41 = '[QuickCommentTable]'; export class QuickCommentTable extends RdbTableImpl { constructor(f47, g47) { super(f47); this.logger = g47.logger; registerAspect(v46.tableName, QuickCommentTable, g47); } async createTable() { try { this.createTableError = null; const d47 = { tableName: v46.tableName, indexName: 'quick_comment_unique_index', columns: ['client_id', 'operator_id', 'type'] }; const e47 = { tableName: v46.tableName, indexName: 'quick_comment_client_id_index', columns: ['client_id'] }; await Promise.all([ await this.rdbStoreManager.createTable(v46.tableName, false, u46), await this.rdbStoreManager.createTableUniqueIndex(d47), await this.rdbStoreManager.createTableIndex(e47) ]); } catch (e) { this.logger.error(s41, `quick_comment_client_id_index`, e); this.createTableError = e; } } async addComment(comment) { try { if (typeof comment === 'undefined') { this.logger.info(s41, `addComment comment is undefined`); return; } await this.ensureCreateTable(); this.logger.info(s41, 'addComment', comment); const valueBucket = generateBucket(comment); await this.rdbStoreManager.insertOrReplace(v46.tableName, [valueBucket]); } catch (e) { this.logger.error(s41, 'addComment', comment, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `addComment ${comment}`, rawError: e } }); } } async removeComment(comment) { try { await this.ensureCreateTable(); this.logger.info(s41, 'removeComment', comment); const predicates = new RdbPredicates(v46.tableName) .equalTo('client_id', comment.messageRefer.messageClientId) .and() .equalTo('operator_id', comment.operatorId) .and() .equalTo('type', comment.index); await this.rdbStoreManager.delete(predicates); } catch (e) { this.logger.error(s41, 'removeComment', comment, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `removeComment ${comment}`, rawError: e } }); } } async removeAllComment(c47) { try { await this.ensureCreateTable(); this.logger.info(s41, 'removeAllComment', c47); const predicates = new RdbPredicates(v46.tableName) .equalTo('client_id', c47); await this.rdbStoreManager.delete(predicates); } catch (e) { this.logger.error(s41, 'removeAllComment', c47, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `removeAllComment ${c47}`, rawError: e } }); } } async queryComment(b47) { try { await this.ensureCreateTable(); this.logger.info(s41, 'queryComment', b47); const predicates = new RdbPredicates(v46.tableName) .equalTo('client_id', b47); const values = await this.rdbStoreManager.query(predicates); let result = []; values.map(value => { result.push(t46(value)); }); return result; } catch (e) { this.logger.error(s41, 'queryComment', b47, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `removeAllComment ${b47}`, rawError: e } }); } } async getTimestamp(a47) { try { await this.ensureCreateTable(); this.logger.info(s41, 'getTimestamp', a47); const predicates = new RdbPredicates(v46.tableName) .equalTo('client_id', a47); let values = await this.rdbStoreManager.query(predicates); let timestamp = 0; if (values.length > 0) { const comment = t46(values[0]); timestamp = comment.createTime; } return timestamp; } catch (e) { this.logger.error(s41, 'getTimestamp', a47, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `getTimestamp ${a47}`, rawError: e } }); } } } function generateBucket(comment) { let valueBucket = {}; v46.columns.forEach((item) => { switch (item) { case 'client_id': valueBucket[item] = comment.messageRefer.messageClientId; break; case 'operator_id': valueBucket[item] = comment.operatorId; break; case 'create_time': valueBucket[item] = comment.createTime; break; case 'type': valueBucket[item] = comment.index; break; case 'extension': valueBucket[item] = comment.serverExtension; break; default: break; } }); return valueBucket; } function s46(resultSet) { let x46 = {}; x46.messageRefer = {}; let y46 = resultSet.getString(resultSet.getColumnIndex('client_id')); let z46 = resultSet.getString(resultSet.getColumnIndex('operator_id')); let createTime = resultSet.getDouble(resultSet.getColumnIndex('create_time')); let type = resultSet.getLong(resultSet.getColumnIndex('type')); let extension = resultSet.getString(resultSet.getColumnIndex('extension')); x46.messageRefer.messageClientId = y46; x46.operatorId = z46; x46.createTime = createTime; x46.index = type; x46.serverExtension = extension; return x46; } function t46(valuesBucket) { let w46 = {}; w46.messageRefer = {}; w46.messageRefer.messageClientId = valuesBucket['client_id']; w46.operatorId = valuesBucket['operator_id']; w46.createTime = valuesBucket['create_time']; w46.index = valuesBucket['type']; w46.serverExtension = valuesBucket['extension']; return w46; } 