import { cmdConfigMessage, cmdMapMessage, NIM_DATABASE_NAME_MESSAGE, registerParser, V2NIMConversationType, V2NIMErrorCode, V2NIMErrorImpl, V2NIMMessageType, V2Service } from '@nimsdk/base'; import { assign, get } from '@nimsdk/vendor'; import { BatchMarkReadRequest } from '../cloud/MessageRequest'; import { V2NIMMessageModel } from '../model/V2NIMMessageModel'; import { formatCustomMessage, formatMessageRefer, formatNotificationMessage, formatRevokeMessage } from '../utils/Format'; import { registerAspect } from './Aspect'; import { CollectService } from './collect/CollectService'; import { CommentService } from './comment/CommentService'; import { DeleteService } from './delete/DeleteService'; import { GetService } from './get/GetService'; import { MessageModel } from './MessageModel'; import { ModifyService } from './modify/ModifyService'; import { PersistService } from './persist/PersistService'; import { PinService } from './pin/PinService'; import { ReceiptService } from './receipt/ReceiptService'; import { ReceiveService } from './receive/ReceiveService'; import { RevokeService } from './revoke/RevokeService'; import { SendService } from './send/SendService'; import { TranslateService } from './translate/TranslateService'; const s41 = '[MessageService]'; export default class V2NIMMessageServiceImpl extends V2Service { constructor(h71, serviceName, config) { super(serviceName, h71); this.lastMessageTimers = []; this.customAttachmentParsers = []; registerParser(h71, { cmdMap: cmdMapMessage, cmdConfig: cmdConfigMessage }); h71.messageService = this; this._messageFilter = config.messageFilter; registerAspect(V2NIMMessageServiceImpl, h71); } get model() { if (this._model) { return this._model; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get pinService() { if (this._pinService) { return this._pinService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get commentService() { if (this._commentService) { return this._commentService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get receiptService() { if (this._receiptService) { return this._receiptService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get sendService() { if (this._sendService) { return this._sendService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get receiveService() { if (this._receiveService) { return this._receiveService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get persistService() { if (this._persistService) { return this._persistService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get deleteService() { if (this._deleteService) { return this._deleteService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get revokeService() { if (this._revokeService) { return this._revokeService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get collectService() { if (this._collectService) { return this._collectService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get translateService() { if (this._translateService) { return this._translateService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get getService() { if (this._getService) { return this._getService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get modifyService() { if (this._modifyService) { return this._modifyService; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'illegal state' } }); } } get messageFilter() { return this._messageFilter; } async messageFilterShouldIgnore(message) { if (this.messageFilter) { const copy = assign({}, message); return await this.messageFilter?.shouldIgnore(copy); } else { return false; } } v2ICreateMessageByResultValue(valuesBucket) { const g71 = V2NIMMessageModel.createMessageByValue(valuesBucket); if (g71.isDeleted) { return undefined; } else { return g71.transform(); } } async v2IGetLastMessageOfConversation(a71) { try { return new Promise((b71, c71) => { const d71 = setTimeout(() => { this.model.messageTable.queryConversationMessage(a71) .then((e71) => { e71.filter((message) => { return message.messageConfig?.lastMessageUpdateEnabled ?? true; }); let f71 = undefined; if (e71 && e71.length > 0) { f71 = e71[e71.length - 1]; } b71(f71); }) .catch((err) => { c71(err); }); }, 500); this.lastMessageTimers.push(d71); }); } catch (e) { console.info('getLastMessageOfConversation timer throw err'); return; } } async v2IGetLastMessageOfLocalConversation(x70, y70 = true) { let z70 = await this.model.messageTable.queryConversationMessage(x70); if (y70) { z70 = z70.filter((message) => { return message.messageConfig?.lastMessageUpdateEnabled ?? true; }); } else { } if (z70 && z70.length > 0) { return z70[z70.length - 1]; } else { return undefined; } } async v2IGetLastMessageFast(v70, w70 = true) { const model = await this.model.messageTable.queryConversationLastMessage(v70, w70); if (model) { return model.transform(); } else { return undefined; } } async v2IDeleteLocalMessageByConversation(u70) { await this.model.deleteByConversationId(u70); } async onLoginStart(accountId) { try { this.core.logger.info(s41, 'onLoginStart', accountId); this.registerInnerService(this.core); } catch (e) { this.core.logger.error(s41, 'onLoginStart', e); } } async onLoginFinished(accountId) { } onLogout() { this.core.logger.info(s41, 'onLogout'); this.unRegisterInnerService(); if (this.lastMessageTimers.length > 0) { this.lastMessageTimers.map(item => clearTimeout(item)); } } sendMessage(message, q70, params, progress) { this.core.logger.info(s41, `call API sendMessage`, message, q70, params); const sendMessage = this.v2IProcessMessageAttachment(message); const r70 = new V2NIMMessageModel().implement(sendMessage, params?.targetConfig); return new Promise((s70, t70) => { this.sendService.sendMessage(r70, q70, params, progress).then(result => { this.core.syncService.updateSyncTimestamp2(message.createTime, 'roamingMsgs'); this.markMessagesAck([result.message]); s70(result); }).catch((err) => { t70(err); }); }); } replyMessage(message, p70, params, progress) { this.core.logger.info(s41, `call API replyMessage`, message, p70, params); return this.sendService.replyMessage(message, p70, params, progress); } revokeMessage(message, params) { this.core.logger.info(s41, `call API revokeMessage`, message, params); return this.revokeService.revokeMessage(message, params); } modifyMessage(message, params) { this.core.logger.info(s41, `call API modifyMessage`, message, params); return this.modifyService.modifyMessage(message, params); } getMessageList(option) { this.core.logger.info(s41, `call API getMessageList`, option); return this.getService.getMessageList(option); } getMessageListByRefers(o70) { this.core.logger.info(s41, `call API getMessageListByRefers`, o70); return this.getService.getMessageListByRefers(o70); } getMessageListByIds(n70) { this.core.logger.info(s41, `call API getMessageListByIds`, n70); return this.getService.getMessageListByIds(n70); } searchCloudMessages(params) { this.core.logger.info(s41, `call API searchCloudMessages`, params); return this.getService.searchCloudMessages(params); } getThreadMessageList(option) { this.core.logger.info(s41, `call API getThreadMessageList`, option); return this.getService.getThreadMessageList(option); } getLocalThreadMessageList(message) { this.core.logger.info(s41, `call API getLocalThreadMessageList`, message); return this.getService.getLocalThreadMessageList(message); } deleteMessage(message, l70, m70) { this.core.logger.info(s41, `call API deleteMessage`, message, l70, m70); return this.deleteService.deleteMessage(message, l70, m70); } deleteMessages(i70, j70, k70) { this.core.logger.info(s41, `call API deleteMessages`, i70, j70, k70); return this.deleteService.deleteMessages(i70, j70, k70); } clearHistoryMessage(option) { this.core.logger.info(s41, `call API clearHistoryMessage`, option); return this.deleteService.clearHistoryMessage(option); } updateMessageLocalExtension(message, h70) { this.core.logger.info(s41, `call API updateMessageLocalExtension`, message, h70); return this.persistService.updateMessageLocalExtension(message, h70); } insertMessageToLocal(message, f70, g70, createTime) { this.core.logger.info(s41, `call API insertMessageToLocal`, f70, g70, createTime); return this.persistService.insertMessageToLocal(message, f70, g70, createTime); } pinMessage(message, e70) { this.core.logger.info(s41, `call API pinMessage`, message, e70); return this.pinService.pinMessage(message, e70); } unpinMessage(c70, d70) { this.core.logger.info(s41, `call API unpinMessage`, c70, d70); return this.pinService.unpinMessage(c70, d70); } updatePinMessage(message, b70) { this.core.logger.info(s41, `call API updatePinMessage`, message, b70); return this.pinService.updatePinMessage(message, b70); } getPinnedMessageList(a70) { this.core.logger.info(s41, `call API getPinnedMessageList`, a70); return this.pinService.getPinnedMessageList(a70); } addQuickComment(message, index, y69, z69) { this.core.logger.info(s41, `call API addQuickComment`, message, index, y69, z69); return this.commentService.addQuickComment(message, index, y69, z69); } removeQuickComment(w69, index, x69) { this.core.logger.info(s41, `call API removeQuickComment`, w69, index, x69); return this.commentService.removeQuickComment(w69, index, x69); } getQuickCommentList(v69) { this.core.logger.info(s41, `call API getQuickCommentList`, v69); return this.commentService.getQuickCommentList(v69); } addCollection(params) { this.core.logger.info(s41, `call API addCollection`, params); return this.collectService.addCollection(params); } removeCollections(collections) { this.core.logger.info(s41, `call API removeCollections`, collections); return this.collectService.removeCollections(collections); } async updateCollectionExtension(t69, u69) { this.core.logger.info(s41, `call API updateCollectionExtension`, t69, u69); return await this.collectService.updateCollectionExtension(t69, u69); } getCollectionListByOption(option) { this.core.logger.info(s41, `call API getCollectionListByOption`, option); return this.collectService.getCollectionListByOption(option); } sendP2PMessageReceipt(message) { this.core.logger.info(s41, `call API sendP2PMessageReceipt`, message); return this.receiptService.sendP2PMessageReceipt(message); } getP2PMessageReceipt(s69) { this.core.logger.info(s41, `call API getP2PMessageReceipt`, s69); return this.receiptService.getP2PMessageReceipt(s69); } isPeerRead(message) { this.core.logger.info(s41, `call API isPeerRead`, message); return this.receiptService.isPeerRead(message); } sendTeamMessageReceipts(r69) { this.core.logger.info(s41, `call API sendTeamMessageReceipts`, r69); return this.receiptService.sendTeamMessageReceipts(r69); } getTeamMessageReceipts(q69) { this.core.logger.info(s41, `call API getTeamMessageReceipts`, q69); return this.receiptService.getTeamMessageReceipts(q69); } getTeamMessageReceiptDetail(o69, p69) { this.core.logger.info(s41, `call API getTeamMessageReceiptDetail`, o69, p69); return this.receiptService.getTeamMessageReceiptDetail(o69, p69); } voiceToText(params) { this.core.logger.info(s41, `call API voiceToText`, params); return this.translateService.voiceToText(params); } cancelMessageAttachmentUpload(message) { this.core.logger.info(s41, `call API cancelMessageAttachmentUpload`, message); return this.sendService.cancelMessageAttachmentUpload(message); } registerCustomAttachmentParser(n69) { this.core.logger.info(s41, `call API registerCustomAttachmentParser`, n69); if (typeof n69 === 'function' && this.customAttachmentParsers.indexOf(n69) === -1) { this.customAttachmentParsers.unshift(n69); } } unregisterCustomAttachmentParser(l69) { this.core.logger.info(s41, `call API unregisterCustomAttachmentParser`, l69); const m69 = this.customAttachmentParsers.indexOf(l69); if (m69 > -1) { this.customAttachmentParsers.splice(m69, 1); } } async searchLocalMessages(params) { this.core.logger.info(s41, `call API searchLocalMessages`, params); return this.core.searchService.v2ISearch(params); } v2IGetUnreadMessageList(j69, k69) { return this.getService.getUnreadMessageList(j69, k69); } v2IGetUnreadMessageCount(h69, i69) { return this.getService.getUnreadMessageCount(h69, i69); } v2IProcessMessageAttachment(message) { if (message.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_NOTIFICATION) { return formatNotificationMessage(this.core, message); } else if (message.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM) { return formatCustomMessage(message, this.customAttachmentParsers); } return message; } markMessagesAck(e69) { if (!(e69 && e69.length > 0)) { return; } const f69 = []; const g69 = []; e69.forEach((msg) => { if (msg.senderId === this.core.account) { return; } if (msg.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) { f69.push(msg); } else if (msg.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) { g69.push(msg); } }); if (f69.length > 0) { this.core.sendCmd('v2BatchMarkRead', new BatchMarkReadRequest(7, 2, f69.map((msg) => msg.messageServerId))); } if (g69.length > 0) { this.core.sendCmd('v2BatchMarkRead', new BatchMarkReadRequest(8, 3, g69.map((msg) => msg.messageServerId))); } } v2IFormatMessageRefer(message) { return formatMessageRefer(this.core, message); } v2IFormatRevokeMessage(data) { return formatRevokeMessage(this.core, data); } async v2ISyncOfflineMsgsHandler(d69) { this.core.logger.info('SyncService', 'v2ISyncOfflineMsgsHandler start'); await this.receiveService.onSyncOfflineMessages(d69); this.core.logger.info('SyncService', 'v2ISyncOfflineMsgsHandler end'); } async v2ISyncRoamingMsgsHandler(c69) { this.core.logger.info('SyncService', 'v2ISyncRoamingMsgsHandler start'); await this.receiveService.onSyncRoamingMessages(c69); this.core.logger.info('SyncService', 'v2ISyncRoamingMsgsHandler end'); } async v2ISyncP2PMessageReceiptsHandler(b69) { this.core.logger.info('SyncService', 'v2ISyncP2PMessageReceiptsHandler start'); await this.receiptService.syncP2PMessageReceiptsHandler(b69); this.core.logger.info('SyncService', 'v2ISyncP2PMessageReceiptsHandler end'); } async v2ISyncRevokeMessageHandler(z68) { this.core.logger.info('SyncService', 'v2ISyncRevokeMessageHandler start'); const a69 = get(z68.content, 'timetag'); await this.core.notificationService.v2IMarkSysMsgAck(get(z68.content, 'datas')); await this.core.syncService.updateSyncTimestamp2(a69, 'recallMsg'); await this.revokeService.onRevokeMessage(get(z68.content, 'datas')); this.core.logger.info('SyncService', 'v2ISyncRevokeMessageHandler end'); } async v2ISyncSuperTeamRevokeMessageHandler(x68) { this.core.logger.info('SyncService', 'v2ISyncSuperTeamRevokeMessageHandler start'); const y68 = get(x68.content, 'timetag'); await this.core.notificationService.v2IMarkSysMsgAck(get(x68.content, 'datas')); await this.core.syncService.updateSyncTimestamp2(y68, 'deleteSuperTeamMsg'); await this.revokeService.onRevokeMessage(get(x68.content, 'datas')); this.core.logger.info('SyncService', 'v2ISyncSuperTeamRevokeMessageHandler end'); } async v2ISyncClearHistoryMessageHandler(w68) { this.core.logger.info('SyncService', 'v2ISyncClearHistoryMessageHandler start'); await this.deleteService.syncClearHistoryMessages(w68); this.core.logger.info('SyncService', 'v2ISyncClearHistoryMessageHandler end'); } async v2ISyncOnDeleteMessagesHandler(v68) { this.core.logger.info('SyncService', 'v2ISyncOnDeleteMessagesHandler start'); await this.deleteService.onSyncDeleteMessages(v68); this.core.logger.info('SyncService', 'v2ISyncOnDeleteMessagesHandler end'); } async v2IUpdateAttachment(u68, filePath) { if (typeof u68 !== 'undefined' && typeof filePath !== 'undefined') { await this.sendService.updateAttachmentFilePath(u68, filePath); } } async v2ISyncMessageOnModifiedHandler(t68) { this.core.logger.info('SyncService', 'v2ISyncMessageOnModifiedHandler start'); await this.modifyService.onModifiedHandler(t68); this.core.logger.info('SyncService', 'v2ISyncMessageOnModifiedHandler end'); } async v2ISyncMessageModifiedRoamHandler(s68) { this.core.logger.info('SyncService', 'v2ISyncMessageModifiedRoamHandler start'); await this.modifyService.onSyncModifiedHandler(s68); this.core.logger.info('SyncService', 'v2ISyncMessageModifiedRoamHandler end'); } registerInnerService(q68) { const r68 = q68.databaseService.getDatabase(q68, NIM_DATABASE_NAME_MESSAGE); this._model = new MessageModel(q68, r68); this._pinService = new PinService(q68, r68); this._commentService = new CommentService(q68, r68); this._receiptService = new ReceiptService(q68, this._model.messageTable); this._sendService = new SendService(q68, this._model.messageTable); this._receiveService = new ReceiveService(q68, this._model.messageTable); this._persistService = new PersistService(q68, this._model.messageTable); this._deleteService = new DeleteService(q68, this._model.messageTable); this._revokeService = new RevokeService(q68, this._model.messageTable); this._collectService = new CollectService(q68); this._translateService = new TranslateService(q68); this._getService = new GetService(q68, this._model.messageTable); this._modifyService = new ModifyService(q68, this._model.messageTable); } unRegisterInnerService() { this._model = undefined; this._pinService = undefined; this._commentService = undefined; this._receiptService = undefined; this._sendService = undefined; this._receiveService = undefined; this._persistService = undefined; this._deleteService = undefined; this._revokeService = undefined; this._collectService = undefined; this._translateService = undefined; this._getService = undefined; } async onMsgHandler(p68) { this.core.logger.info(s41, `call Handler onMsgHandler`); await this.receiveService.onReceiveMessage(p68); } onP2PMessageReceiptsHandler(o68) { this.core.logger.info(s41, `call Handler onP2PMessageReceiptsHandler`); this.receiptService.onP2PMessageReceiptsHandler(o68); } onTeamMessageReceiptsHandler(n68) { this.core.logger.info(s41, `call Handler onTeamMessageReceiptsHandler`); this.receiptService.onTeamMessageReceiptsHandler(n68); } onRevokeMessageHandler(l68) { this.core.logger.info(s41, `call Handler onRevokeMessageHandler`); const m68 = get(l68.content, 'data.createTime'); this.core.notificationService.v2IMarkSysMsgAck([get(l68.content, 'data')]); this.core.syncService.updateSyncTimestamp2(m68, 'recallMsg'); this.revokeService.onRevokeMessage([get(l68.content, 'data')]); } onAddQuickCommentHandler(k68) { this.core.logger.info(s41, `call Handler onAddQuickCommentHandler`); this.commentService.onAddQuickComment(k68); } onRemoveQuickCommentHandler(j68) { this.core.logger.info(s41, `call Handler onRemoveQuickCommentHandler`); this.commentService.onRemoveQuick(j68); } onPinMessageHandler(i68) { this.core.logger.info(s41, `call Handler onPinMessageHandler`); this.pinService.onPinMessage(i68); } onUnpinMessageHandler(h68) { this.core.logger.info(s41, `call Handler onUnpinMessageHandler`); this.pinService.onUnpinMessage(h68); } onUpdatePinMessageHandler(g68) { this.core.logger.info(s41, `call Handler onUpdatePinMessageHandler`); this.pinService.onUpdateMessage(g68); } onClearHistoryMessageHandler(f68) { this.core.logger.info(s41, `call Handler onClearHistoryMessageHandler`); this.deleteService.onClearHistoryMessage(f68); } onDeleteMessageHandler(e68) { this.core.logger.info(s41, `call Handler onDeleteMessageHandler`); this.deleteService.onDeleteMessage(e68); } onDeleteMessagesHandler(d68) { this.core.logger.info(s41, `call Handler onDeleteMessagesHandler`); this.deleteService.onDeleteMessages(d68); } } 