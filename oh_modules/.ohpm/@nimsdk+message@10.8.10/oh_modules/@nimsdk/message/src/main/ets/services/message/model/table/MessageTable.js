import HashMap from "@ohos.util.HashMap"; import { ColumnInfo, ColumnType, RdbPredicates, RdbTableImpl, V2NIMErrorImpl, V2NIMErrorMap } from '@nimsdk/base'; import { V2NIMMessageModel } from '../V2NIMMessageModel'; import { registerAspect } from './Aspect'; import { EM_CONFIG_ENABLE_LAST_MESSAGE, EM_CONFIG_ENABLE_UNREAD } from './TableConst'; const t42 = [ new ColumnInfo("client_id", ColumnType.TEXT, -1, false), new ColumnInfo("server_id", ColumnType.TEXT, -1, true), new ColumnInfo("create_time", ColumnType.INTEGER, -1, true), new ColumnInfo("sender_id", ColumnType.TEXT, -1, true), new ColumnInfo("receiver_id", ColumnType.TEXT, -1, true), new ColumnInfo("conversation_id", ColumnType.TEXT, -1, true), new ColumnInfo("conversation_type", ColumnType.INTEGER, -1, true), new ColumnInfo("send_state", ColumnType.INTEGER, -1, true), new ColumnInfo("status", ColumnType.INTEGER, -1, true), new ColumnInfo("message_type", ColumnType.INTEGER, -1, true), new ColumnInfo("sub_type", ColumnType.INTEGER, -1, true), new ColumnInfo("is_self", ColumnType.BOOLEAN, -1, true), new ColumnInfo("text", ColumnType.TEXT, -1, true), new ColumnInfo("attachment", ColumnType.TEXT, -1, true), new ColumnInfo("robot_info", ColumnType.TEXT, -1, true), new ColumnInfo("ai_account_id", ColumnType.TEXT, -1, true), new ColumnInfo("ai_status", ColumnType.INTEGER, -1, true), new ColumnInfo("modify_account_id", ColumnType.TEXT, -1, true), new ColumnInfo("modify_time", ColumnType.INTEGER, -1, true), new ColumnInfo("server_extension", ColumnType.TEXT, -1, true), new ColumnInfo("local_extension", ColumnType.TEXT, -1, true), new ColumnInfo("callback_extension", ColumnType.TEXT, -1, true), new ColumnInfo("message_config", ColumnType.TEXT, -1, true), new ColumnInfo("push_config", ColumnType.TEXT, -1, true), new ColumnInfo("route_config", ColumnType.TEXT, -1, true), new ColumnInfo("antispam_config", ColumnType.TEXT, -1, true), new ColumnInfo("robot_config", ColumnType.TEXT, -1, true), new ColumnInfo("thread_root", ColumnType.TEXT, -1, true), new ColumnInfo("thread_root_id", ColumnType.TEXT, -1, true), new ColumnInfo("thread_reply", ColumnType.TEXT, -1, true), new ColumnInfo("thread_reply_id", ColumnType.TEXT, -1, true), new ColumnInfo("read_receipt_state", ColumnType.INTEGER, 0, true), new ColumnInfo("config_enable_unread", ColumnType.INTEGER, -1, false).setDefault(EM_CONFIG_ENABLE_UNREAD.INVALID), new ColumnInfo("config_enable_last_message", ColumnType.INTEGER, -1, false).setDefault(EM_CONFIG_ENABLE_LAST_MESSAGE.INVALID) ]; export const MESSAGE_TABLE = { tableName: 'message_table', columns: [ "client_id", "server_id", "create_time", "sender_id", "receiver_id", "conversation_type", "conversation_id", "send_state", "status", "message_type", "sub_type", "is_self", "text", "attachment", "robot_info", "ai_account_id", "ai_status", "modify_account_id", "modify_time", "server_extension", "local_extension", "callback_extension", "message_config", "push_config", "route_config", "antispam_config", "robot_config", "thread_root", "thread_root_id", "thread_reply", "thread_reply_id", "read_receipt_state", "config_enable_unread", "config_enable_last_message" ] }; const u42 = MESSAGE_TABLE.tableName; const s41 = '[MessageTable]'; export class MessageTable extends RdbTableImpl { constructor(a46, b46) { super(a46, u42); this.logger = b46.logger; registerAspect(u42, MessageTable, b46); } async saveMessage(message, y45) { try { if (typeof message === 'undefined') { this.logger.info(s41, `saveMessage message is undefined.`); return; } await this.ensureCreateTable(); const z45 = await this.query(message.messageClientId); if (z45) { const valueBucket = message.generateBucket(); if (y45) { valueBucket["status"] = 0; } const predicates = new RdbPredicates(u42).equalTo("client_id", message.messageClientId); await this.rdbStoreManager.update(valueBucket, predicates); } else { const valueBucket = message.generateBucket(); valueBucket["status"] = 0; await this.rdbStoreManager.insertOrReplace(u42, [valueBucket]); } } catch (e) { this.logger.error(s41, 'saveMessage', message, y45, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `saveMessage ${message}`, rawError: e } }); } } async inlineSaveMessage(message) { try { if (typeof message === 'undefined') { this.logger.info(s41, `inlineSaveMessage message is undefined.`); return; } await this.ensureCreateTable(); const valueBucket = message.generateBucket(); valueBucket["status"] = 0; await this.rdbStoreManager.insertOrReplace(u42, [valueBucket]); } catch (e) { this.logger.error(s41, 'inlineSaveMessage', message, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `inlineSaveMessage ${message}`, rawError: e } }); } } async resetDeleteStatus(message) { try { if (typeof message === 'undefined') { this.logger.info(s41, `resetDeleteStatus message is undefined.`); return; } await this.ensureCreateTable(); const valueBucket = message.generateBucket(); valueBucket["status"] = 0; const predicates = new RdbPredicates(u42).equalTo("client_id", message.messageClientId); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(s41, 'resetDeleteStatus', message, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `resetDeleteStatus ${message}`, rawError: e } }); } } async saveMessages(p45) { try { await this.ensureCreateTable(); if (typeof p45 === 'undefined' || p45.length === 0) { return []; } const q45 = p45.map((message) => { return message.messageClientId; }); const r45 = await this.queryListIncludeDelete(q45); const s45 = new HashMap(); r45.map((x45) => { s45.set(x45.messageClientId, x45); }); const t45 = []; const u45 = []; const v45 = []; for (const message of p45) { const valueBucket = message.generateBucket(); if (s45.hasKey(message.messageClientId)) { t45.push(message); const w45 = s45.get(message.messageClientId).isDeleted === true; valueBucket["status"] = w45 ? 1 : 0; } else { u45.push(message); } v45.push(valueBucket); } this.logger.info(s41, `saveMessages, valueBucketArr length: ${v45.length}, updateList size: ${t45.length}, insertList size: ${u45.length}`); await this.rdbStoreManager.insertOrReplace(u42, v45); return u45; } catch (e) { this.logger.error(s41, 'saveMessages', p45, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `saveMessages ${p45}`, rawError: e } }); } } async inLineSaveMessages(n45) { try { await this.ensureCreateTable(); let o45 = []; for (const message of n45) { const valueBucket = message.generateBucket(); valueBucket["status"] = 0; o45.push(valueBucket); } await this.rdbStoreManager.insert(u42, o45); } catch (e) { this.logger.error(s41, 'inLineSaveMessages', n45, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `inLineSaveMessages ${n45}`, rawError: e } }); } } async updateReadReceipts(m45) { try { await this.ensureCreateTable(); const predicates = new RdbPredicates(u42).in("client_id", m45); const valueBucket = {}; valueBucket["read_receipt_state"] = 1; await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(s41, 'updateReadReceipts', m45, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `updateReadReceipts ${m45}`, rawError: e } }); } } async updateSendingState(j45, k45, serverId, createTime, l45) { try { await this.ensureCreateTable(); const valueBucket = {}; valueBucket["send_state"] = k45; if (typeof serverId === 'string' && serverId.trim() !== '') { valueBucket["server_id"] = serverId; } if (typeof createTime === 'number' && createTime > 0) { valueBucket["create_time"] = createTime; } if (l45 !== undefined) { valueBucket["callback_extension"] = l45; } const predicates = new RdbPredicates(u42).equalTo("client_id", j45); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(s41, 'updateSendingState', j45, k45, serverId, createTime, l45, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `updateSendingState ${j45}, ${k45}, ${JSON.stringify(e)}}`, rawError: e } }); } } async updateLocalExtension(h45, i45) { try { await this.ensureCreateTable(); const valueBucket = {}; valueBucket["local_extension"] = i45; const predicates = new RdbPredicates(u42).equalTo("client_id", h45); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(s41, 'updateLocalExtension', h45, i45, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `updateLocalExtension ${h45} : ${i45}`, rawError: e } }); } } async updateAttachment(f45, g45) { try { await this.ensureCreateTable(); if (typeof g45 !== 'string' || g45.length === 0) { return; } const valueBucket = {}; valueBucket["attachment"] = g45; const predicates = new RdbPredicates(u42).equalTo("client_id", f45); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(s41, 'updateAttachment', f45, g45, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `updateAttachment ${f45}, ${g45}`, rawError: e } }); } } async updateAttachmentFilePath(b45, filePath) { try { await this.ensureCreateTable(); const c45 = await this.queryListExcludeDelete([b45]); if (c45.length > 0) { const message = c45[0]; const d45 = message.attachment; if (d45 !== undefined) { d45.path = filePath; try { const e45 = JSON.stringify(d45); await this.updateAttachment(b45, e45); } catch (e) { this.logger.error(s41, 'updateAttachmentFilePath attach', b45, filePath, e); } } } } catch (e) { this.logger.error(s41, 'updateAttachmentFilePath', b45, filePath, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `updateAttachmentFilePath ${b45}, ${filePath}`, rawError: e } }); } } async modify(a45) { try { await this.ensureCreateTable(); const valueBucket = {}; if (typeof a45.text !== 'undefined') { valueBucket["text"] = a45.text; } if (typeof a45.raw !== 'undefined') { valueBucket["attachment"] = a45.raw; } if (typeof a45.extension !== 'undefined') { valueBucket["server_extension"] = a45.extension; } if (typeof a45.subType !== 'undefined') { valueBucket["sub_type"] = a45.subType; } if (typeof a45.modifyTime !== 'undefined') { valueBucket["modify_time"] = a45.modifyTime; } if (typeof a45.modifyAccountId !== 'undefined') { valueBucket["modify_account_id"] = a45.modifyAccountId; } const predicates = new RdbPredicates(u42).equalTo("client_id", a45.messageClientId); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(s41, 'modify', a45.messageClientId, a45.raw, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `modify ${a45.messageClientId}, ${a45.raw}`, rawError: e } }); } } async getModifyTime(z44) { try { if (typeof z44 === 'undefined') { return 0; } await this.ensureCreateTable(); const predicates = new RdbPredicates(u42).equalTo("client_id", z44) .beginWrap() .isNull("status") .or() .notEqualTo("status", 2) .endWrap(); const values = await this.rdbStoreManager.query(predicates); let result = 0; if (values.length > 0) { const value = values[0]; const message = V2NIMMessageModel.createMessageByValue(value); result = message.modifyTime ?? 0; } return result; } catch (e) { this.logger.error(s41, 'getModifyTime', z44, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `getModifyTime ${z44}`, rawError: e } }); } } async deletes(w44) { try { await this.ensureCreateTable(); const x44 = w44.map(y44 => { return new RdbPredicates(u42).equalTo("client_id", y44); }); await this.rdbStoreManager.deletes(u42, x44); } catch (e) { this.logger.error(s41, 'deletes', w44, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `delete ${w44}`, rawError: e } }); } } async deleteByClientId(clientId) { try { await this.ensureCreateTable(); const valueBucket = {}; valueBucket["status"] = 1; const predicates = new RdbPredicates(u42) .equalTo("client_id", clientId); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(s41, 'deleteByClientId', clientId, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `deleteByClientId ${clientId}`, rawError: e } }); } } async deleteByConversationId(v44) { try { await this.ensureCreateTable(); const valueBucket = {}; valueBucket["status"] = 1; const predicates = new RdbPredicates(u42) .equalTo("conversation_id", v44); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(s41, 'deleteByConversationId', v44, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `deleteByClientId ${v44}`, rawError: e } }); } } async deleteByOption(u44, start, end) { try { await this.ensureCreateTable(); const valueBucket = {}; valueBucket["status"] = 1; const predicates = new RdbPredicates(u42) .equalTo("conversation_id", u44) .between("create_time", start, end); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(s41, 'deleteByOption', u44, start, end, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `deleteByOption ${u44}`, rawError: e } }); } } async invisibleByConversationId(t44, start, end) { try { await this.ensureCreateTable(); const valueBucket = {}; valueBucket["status"] = 2; const predicates = new RdbPredicates(u42) .equalTo("conversation_id", t44) .between("create_time", start, end) .beginWrap() .isNull("status") .or() .notEqualTo("status", 1) .endWrap(); await this.rdbStoreManager.update(valueBucket, predicates); } catch (e) { this.logger.error(s41, 'invisibleByConversationId', t44, start, end, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `invisibleByConversationId ${t44}`, rawError: e } }); } } async queryListExcludeDelete(s44) { try { if (!s44 || s44.length <= 0) { return []; } await this.ensureCreateTable(); const predicates = new RdbPredicates(u42) .in("client_id", s44) .and() .orderByDesc("create_time") .beginWrap() .isNull("status") .or() .equalTo("status", 0) .endWrap(); const values = await this.rdbStoreManager.query(predicates); const result = []; values.map(value => { const message = V2NIMMessageModel.createMessageByValue(value); result.push(message); }); return result; } catch (e) { this.logger.error(s41, 'queryListExcludeDelete', s44, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryList ${s44}`, rawError: e } }); } } async queryListIncludeDelete(r44) { try { if (!r44 || r44.length <= 0) { return []; } await this.ensureCreateTable(); const predicates = new RdbPredicates(u42).in("client_id", r44) .beginWrap() .isNull("status") .or() .notEqualTo("status", 2) .endWrap() .orderByDesc("create_time"); const values = await this.rdbStoreManager.query(predicates); const result = []; values.map(value => { const message = V2NIMMessageModel.createMessageByValue(value); result.push(message); }); return result; } catch (e) { this.logger.error(s41, 'queryListIncludeDelete', r44, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryListIncludeDelete ${r44}`, rawError: e } }); } } async queryConversationUnreadMessages(p44, q44) { try { await this.ensureCreateTable(); const predicates = new RdbPredicates(u42) .equalTo("conversation_id", p44) .equalTo("is_self", false) .greaterThan("create_time", q44) .beginWrap() .isNull("status") .or() .equalTo("status", 0) .endWrap(); const values = await this.rdbStoreManager.query(predicates); const result = []; values.map(value => { result.push(V2NIMMessageModel.createMessageByValue(value)); }); return result; } catch (e) { this.logger.error(s41, 'queryConversationUnreadMessages', p44, q44, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryConversationUnreadMessages ${p44}`, rawError: e } }); } } async queryConversationUnreadMessageCount(m44, n44) { try { await this.ensureCreateTable(); let o44 = `
        SELECT COUNT(*) FROM ${this.tableName}
        WHERE ${"conversation_id"} = ?
        AND ${"is_self"} = ?
        AND ${"create_time"} > ?
        AND ${"config_enable_unread"} = ?
        AND (
            ${"status"} IS NULL
            OR ${"status"} = ${0}
        )
      `; const valueBuckets = await this.rdbStoreManager.queryBySql(o44, [ m44, false, n44, EM_CONFIG_ENABLE_UNREAD.ON ]); if (valueBuckets.length > 0) { const count = valueBuckets[0]['COUNT(*)']; return count; } else { return 0; } } catch (e) { this.logger.error(s41, 'queryConversationUnreadMessageCount', m44, n44, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryConversationUnreadMessageCount ${m44}`, rawError: e } }); } } async queryConversationMessage(k44, l44) { try { await this.ensureCreateTable(); this.logger.info(s41, 'queryConversationMessage', k44, l44); const predicates = new RdbPredicates(u42) .equalTo("conversation_id", k44) .beginWrap() .isNull("status") .or() .notEqualTo("status", 2) .endWrap(); if (typeof l44 === 'undefined' || l44 === false) { l44 = false; } const values = await this.rdbStoreManager.query(predicates); const result = []; values.map(value => { if (l44) { result.push(V2NIMMessageModel.createMessageByValue(value)); } else { const message = V2NIMMessageModel.createMessageByValue(value); if (message.isDeleted === false) { result.push(message); } } }); return result; } catch (e) { this.logger.error(s41, 'queryConversationMessage', k44, l44, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryConversationMessage ${k44}, ${JSON.stringify(e)}`, rawError: e } }); } } async queryConversationLastMessage(i44, j44) { try { await this.ensureCreateTable(); this.logger.info(s41, 'queryConversationLastMessage', i44, j44); const predicates = new RdbPredicates(u42) .equalTo("conversation_id", i44) .beginWrap() .isNull("status") .or() .equalTo("status", 0) .endWrap() .orderByDesc("create_time") .limitAs(1); if (j44) { predicates.equalTo("config_enable_last_message", EM_CONFIG_ENABLE_LAST_MESSAGE.ON); } const values = await this.rdbStoreManager.query(predicates); if (values.length > 0) { return V2NIMMessageModel.createMessageByValue(values[0]); } else { return undefined; } } catch (e) { this.logger.error(s41, 'queryConversationLastMessage', i44, j44, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryConversationLastMessage ${i44}, ${JSON.stringify(e)}`, rawError: e } }); } } async queryMessagesByOperationExclude(f44, g44, endTime, limit, h44, direction) { try { await this.ensureCreateTable(); this.logger.info(s41, 'queryMessagesByOperationExclude', f44, g44, endTime, limit, JSON.stringify(h44), direction); const predicates = new RdbPredicates(u42) .equalTo("conversation_id", f44) .greaterThanOrEqualTo("create_time", g44); if (endTime === 0) { predicates.lessThanOrEqualTo("create_time", Number.MAX_VALUE); } else { predicates.lessThanOrEqualTo("create_time", endTime); } if (h44.length > 0) { predicates.in("message_type", h44); } predicates .beginWrap() .equalTo("status", 0) .or() .isNull("status") .endWrap() .limitAs(limit + 1); direction ? predicates.orderByAsc("create_time") : predicates.orderByDesc("create_time"); direction ? predicates.orderByAsc("server_id") : predicates.orderByDesc("server_id"); direction ? predicates.orderByAsc("client_id") : predicates.orderByDesc("client_id"); const values = await this.rdbStoreManager.query(predicates); const result = []; values.map(value => { const message = V2NIMMessageModel.createMessageByValue(value); result.push(message); }); this.logger.info(s41, 'queryMessagesByOperationExclude result', result); return result; } catch (e) { this.logger.error(s41, 'queryMessagesByOperationExclude', f44, g44, endTime, limit, h44, direction, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryMessagesByOperationExclude ${f44}`, rawError: e } }); } } async queryMessagesByOperation(c44, d44, endTime, limit, e44, direction) { try { await this.ensureCreateTable(); this.logger.info(s41, 'queryMessagesByOperation', c44, d44, endTime, limit, JSON.stringify(e44), direction); const predicates = new RdbPredicates(u42).equalTo("conversation_id", c44) .and() .greaterThanOrEqualTo("create_time", d44) .beginWrap() .isNull("status") .or() .notEqualTo("status", 2) .endWrap() .and() .limitAs(limit); if (e44.length > 0) { predicates.in("message_type", e44); } if (endTime === 0) { predicates.lessThanOrEqualTo("create_time", Number.MAX_VALUE); } else { predicates.lessThanOrEqualTo("create_time", endTime); } direction ? predicates.orderByAsc("create_time") : predicates.orderByDesc("create_time"); const values = await this.rdbStoreManager.query(predicates); const result = []; values.map(value => { const message = V2NIMMessageModel.createMessageByValue(value); result.push(message); }); this.logger.info(s41, 'queryMessagesByOperation result', result); return result; } catch (e) { this.logger.error(s41, 'queryMessagesByOperation', c44, d44, endTime, limit, e44, direction, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryMessagesByOperation ${c44}`, rawError: e } }); } } async queryExcludeDeleteStatus(b44) { try { await this.ensureCreateTable(); this.logger.info(s41, 'queryExcludeDeleteStatus, id', b44); const predicates = new RdbPredicates(u42) .equalTo("client_id", b44) .beginWrap() .isNull("status") .or() .equalTo("status", 0) .endWrap(); const values = await this.rdbStoreManager.query(predicates); if (values.length > 0) { const value = values[0]; const message = V2NIMMessageModel.createMessageByValue(value); return message; } return undefined; } catch (e) { this.logger.error(s41, 'queryExcludeDeleteStatus', e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryExcludeDeleteStatus ${b44}`, rawError: e } }); } } async queryIncludeDeleteStatus(a44) { try { await this.ensureCreateTable(); this.logger.info(s41, 'queryIncludeDeleteStatus'); const predicates = new RdbPredicates(u42) .equalTo("client_id", a44) .beginWrap() .isNull("status") .or() .notEqualTo("status", 2) .endWrap(); const values = await this.rdbStoreManager.query(predicates); if (values.length > 0) { return V2NIMMessageModel.createMessageByValue(values[0]); } return undefined; } catch (e) { this.logger.error(s41, 'queryIncludeDeleteStatus', e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryIncludeDeleteStatus ${a44}`, rawError: e } }); } } async query(z43) { try { await this.ensureCreateTable(); const predicates = new RdbPredicates(u42) .equalTo("client_id", z43) .beginWrap() .isNull("status") .or() .notEqualTo("status", 2) .endWrap(); const values = await this.rdbStoreManager.query(predicates); if (values.length > 0) { const message = V2NIMMessageModel.createMessageByValue(values[0]); return message; } return undefined; } catch (e) { this.logger.error(s41, 'query', z43, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `query ${z43}`, rawError: e } }); } } async queryMessages(x43) { try { await this.ensureCreateTable(); this.logger.info(s41, 'queryMessages', x43.length); const predicates = new RdbPredicates(u42) .in("client_id", x43) .beginWrap() .isNull("status") .or() .notEqualTo("status", 2) .endWrap(); const y43 = new HashMap(); const values = await this.rdbStoreManager.query(predicates); values.map(value => { const message = V2NIMMessageModel.createMessageByValue(value); y43.set(message.messageClientId, message); }); return y43; } catch (e) { this.logger.error(s41, 'queryMessages', x43, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryMessages ${x43}`, rawError: e } }); } } async queryThreadMessages(v43) { try { await this.ensureCreateTable(); this.logger.info(s41, 'queryThreadMessages', v43); const predicates = new RdbPredicates(u42).equalTo("thread_root_id", v43) .beginWrap() .isNull("status") .or() .notEqualTo("status", 2) .endWrap() .and() .orderByAsc("create_time"); const values = await this.rdbStoreManager.query(predicates); const w43 = []; values.map(value => { const message = V2NIMMessageModel.createMessageByValue(value); if (message.isDeleted === false) { w43.push(message); } }); return w43; } catch (e) { this.logger.error(s41, 'queryThreadMessages', v43, e); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryThreadMessages ${v43}`, rawError: e } }); } } async createTable() { try { this.createTableError = null; await Promise.allSettled([ await this.rdbStoreManager.createTable(this.tableName, false, t42), await this.rdbStoreManager.createUniqueIndex(this.tableName, { indexName: 'client_id_index', columns: ["client_id"] }), await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'conversation_id_index', columns: ["conversation_id"] }), await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'conversation_id_type_index', columns: ["conversation_id", "conversation_type"] }), await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'conversation_id_type_timestamp_index', columns: ["conversation_id", "conversation_type", "create_time"] }), await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'conversation_id_type_timestamp_state_index', columns: ["conversation_id", "conversation_type", "create_time", "send_state"] }), await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'status_index', columns: ["status"] }), await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'send_state_index', columns: ["send_state"] }), await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'create_time_index', columns: ["create_time"] }), await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'create_time_state_index', columns: ["send_state", "create_time"] }), await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'thread_message_id_index', columns: ["thread_root_id"] }), await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'reply_message_id_index', columns: ["thread_root_id"] }) ]); const info = new ColumnInfo("read_receipt_state", ColumnType.INTEGER, 0, true); await this.rdbStoreManager.upgradeVersion(this.tableName, info); const p43 = new Date().getTime(); this.logger.info(s41, `upgradeVersion config start`); const q43 = new ColumnInfo("config_enable_unread", ColumnType.INTEGER, -1, false).setDefault(EM_CONFIG_ENABLE_UNREAD.INVALID); const r43 = new ColumnInfo("config_enable_last_message", ColumnType.INTEGER, -1, false).setDefault(EM_CONFIG_ENABLE_LAST_MESSAGE.INVALID); await this.rdbStoreManager.upgradeVersion(this.tableName, q43); await this.rdbStoreManager.upgradeVersion(this.tableName, r43); await Promise.allSettled([ await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'config_enable_unread_index', columns: [ "config_enable_unread" ] }), await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'config_enable_last_message_index', columns: [ "config_enable_last_message" ] }), await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'recount_unread_count_index', columns: [ "conversation_id", "is_self", "create_time", "status", "config_enable_unread" ] }), await this.rdbStoreManager.createIndex(this.tableName, { indexName: 'research_last_message_index', columns: [ "conversation_id", "create_time", "status", "config_enable_last_message" ] }) ]); const s43 = new Date().getTime(); this.logger.info(s41, `upgradeVersion config end, cost: ${s43 - p43}ms`); const t43 = new Date().getTime(); await this.refreshConfigEnableUnreadSql(); await this.refreshConfigEnableLastMessageSql(); const u43 = new Date().getTime(); this.logger.info(s41, `upgradeVersion config refresh end, cost: ${u43 - t43}ms`); } catch (e) { this.logger.error(s41, `create table data: message `, e); this.createTableError = e; } } async refreshConfigEnableUnreadSql() { try { this.logger.info(s41, `refreshConfigEnableUnreadSql start`); const predicates = new RdbPredicates(u42) .equalTo("config_enable_unread", EM_CONFIG_ENABLE_UNREAD.INVALID) .limitAs(1); const values = await this.rdbStoreManager.query(predicates); if (values.length <= 0) { this.logger.info(s41, `refreshConfigEnableUnreadSql none invalid`); return; } const o43 = `
      UPDATE ${this.tableName}
      SET ${"config_enable_unread"} =
        CASE
          WHEN ${"message_config"} LIKE '%"unreadEnabled":false%' THEN ${EM_CONFIG_ENABLE_UNREAD.OFF}
          ELSE ${EM_CONFIG_ENABLE_UNREAD.ON}
        END
      WHERE ${"config_enable_unread"} = ${EM_CONFIG_ENABLE_UNREAD.INVALID};
      `; await this.rdbStoreManager.executeSql(o43); this.logger.info(s41, `refreshConfigEnableUnreadSql end`); } catch (e) { this.logger.error(s41, `refresh config enable unread sql failed`, e); this.createTableError = e; } } async refreshConfigEnableLastMessageSql() { try { this.logger.info(s41, `refreshConfigEnableLastMessageSql start`); const predicates = new RdbPredicates(u42) .equalTo("config_enable_last_message", EM_CONFIG_ENABLE_LAST_MESSAGE.INVALID) .limitAs(1); const values = await this.rdbStoreManager.query(predicates); if (values.length <= 0) { this.logger.info(s41, `refreshConfigEnableLastMessageSql none invalid`); return; } const n43 = `
      UPDATE ${this.tableName}
      SET ${"config_enable_last_message"} =
        CASE
          WHEN ${"message_config"} LIKE '%"lastMessageUpdateEnabled":false%' THEN ${EM_CONFIG_ENABLE_LAST_MESSAGE.OFF}
          ELSE ${EM_CONFIG_ENABLE_LAST_MESSAGE.ON}
        END
      WHERE ${"config_enable_last_message"} = ${EM_CONFIG_ENABLE_LAST_MESSAGE.INVALID};
      `; await this.rdbStoreManager.executeSql(n43); this.logger.info(s41, `refreshConfigEnableLastMessageSql end`); } catch (e) { this.logger.error(s41, `refresh config enable last message sql failed`, e); this.createTableError = e; } } async refreshConfigEnableUnread() { try { let e43 = 0; while (true) { e43 += 1; const start = new Date().getTime(); this.logger.info(s41, `refreshConfigEnableUnread batch: ${e43}`); const predicates = new RdbPredicates(u42) .equalTo("config_enable_unread", EM_CONFIG_ENABLE_UNREAD.INVALID) .limitAs(5000); const values = await this.rdbStoreManager.query(predicates); if (values.length <= 0) { break; } const f43 = []; const g43 = []; values.map((v) => { const l43 = V2NIMMessageModel.createMessageByValue(v); const m43 = l43.messageConfig?.unreadEnabled ?? true; if (m43) { f43.push(l43.messageClientId); } else { g43.push(l43.messageClientId); } }); if (f43.length > 0) { const j43 = {}; j43["config_enable_unread"] = EM_CONFIG_ENABLE_UNREAD.ON; const k43 = new RdbPredicates(u42).in("client_id", f43); await this.rdbStoreManager.update(j43, k43); } if (g43.length > 0) { const h43 = {}; h43["config_enable_unread"] = EM_CONFIG_ENABLE_UNREAD.OFF; const i43 = new RdbPredicates(u42).in("client_id", g43); await this.rdbStoreManager.update(h43, i43); } const end = new Date().getTime(); this.logger.info(s41, `refreshConfigEnableUnread batch: ${e43}, cost: ${end - start}ms`); } } catch (e) { this.logger.error(s41, `refresh config enable unread failed`, e); this.createTableError = e; } } async refreshConfigEnableLastMessage() { try { let v42 = 0; while (true) { v42 += 1; const start = new Date().getTime(); this.logger.info(s41, `refreshConfigEnableLastMessage batch: ${v42}`); const predicates = new RdbPredicates(u42) .equalTo("config_enable_last_message", EM_CONFIG_ENABLE_LAST_MESSAGE.INVALID) .limitAs(5000); const values = await this.rdbStoreManager.query(predicates); if (values.length <= 0) { break; } const w42 = []; const x42 = []; values.map((v) => { const c43 = V2NIMMessageModel.createMessageByValue(v); const d43 = c43.messageConfig?.lastMessageUpdateEnabled ?? true; if (d43) { w42.push(c43.messageClientId); } else { x42.push(c43.messageClientId); } }); if (w42.length > 0) { const a43 = {}; a43["config_enable_last_message"] = EM_CONFIG_ENABLE_LAST_MESSAGE.ON; const b43 = new RdbPredicates(u42).in("client_id", w42); await this.rdbStoreManager.update(a43, b43); } if (x42.length > 0) { const y42 = {}; y42["config_enable_last_message"] = EM_CONFIG_ENABLE_LAST_MESSAGE.OFF; const z42 = new RdbPredicates(u42).in("client_id", x42); await this.rdbStoreManager.update(y42, z42); } const end = new Date().getTime(); this.logger.info(s41, `refreshConfigEnableLastMessage batch: ${v42}, cost: ${end - start}ms`); } } catch (e) { this.logger.error(s41, `refresh config enable last message failed`, e); this.createTableError = e; } } } 