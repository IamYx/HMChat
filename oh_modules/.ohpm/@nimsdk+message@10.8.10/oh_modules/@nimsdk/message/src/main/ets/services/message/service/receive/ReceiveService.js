import HashMap from "@ohos.util.HashMap"; import { V2NIMErrorCode, V2NIMErrorImpl, V2NIMMessageType } from '@nimsdk/base'; import { get } from '@nimsdk/vendor/'; import { V2NIMMessageModel } from '../../model/V2NIMMessageModel'; import { completeMessage } from '../../utils/Format'; import { ReceiveModel } from './ReceiveModel'; const s41 = '[ReceiveService]'; export class ReceiveService { constructor(t65, table) { this.core = t65; this.model = new ReceiveModel(t65, table); } async onReceiveMessage(p65) { try { const message = get(p65, 'content.msg'); this.core.logger.info(s41, 'onReceiveMessage', message); const q65 = completeMessage(this.core, message); const msg = this.core.messageService.v2IProcessMessageAttachment(q65); if (await this.core.messageService.messageFilterShouldIgnore(msg)) { this.core.logger.info(s41, `this message is filtered onReceiveMessage`); this.core.syncService.updateSyncTimestamp2(msg.createTime, 'roamingMsgs'); this.core.messageService.markMessagesAck([msg]); if (msg.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_NOTIFICATION) { this.sendTeamProcessNotifications([q65]); } return; } const r65 = await this.receiveMessage(msg); this.core.syncService.updateSyncTimestamp2(message.createTime, 'roamingMsgs'); this.core.messageService.markMessagesAck([r65]); if (msg.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_NOTIFICATION) { this.sendTeamProcessNotifications([q65]); } const s65 = get(p65.content, 'msg.userUpdateTime'); await this.core.userService.v2IRefreshUserInfo(q65.senderId, s65); await this.core.localConversationService.onMessageReceived(msg); this.core.messageService.emit('onReceiveMessages', [r65]); } catch (e) { this.core.logger.error(s41, 'onReceiveMessage', p65, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `onReceiveMessage ${JSON.stringify(e)}`, rawError: e } }); } } } async onSyncOfflineMessages(f65) { try { let g65 = get(f65.content, 'data'); this.core.logger.info(s41, 'onSyncOfflineMessages', g65.length); const h65 = g65.map((msg) => { const o65 = completeMessage(this.core, msg); const message = this.core.messageService.v2IProcessMessageAttachment(o65); return message; }); const i65 = h65.map(item => item.messageClientId); const j65 = await this.model.getReceivedMessages(i65); const k65 = h65.filter(item => !j65.get(item.messageClientId)); const l65 = []; const m65 = []; for (const n65 of k65) { if (n65.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_NOTIFICATION) { m65.push(n65); } if (await this.core.messageService.messageFilterShouldIgnore(n65)) { this.core.logger.info(s41, `msg: ${n65.messageClientId} is ignored in onSyncOfflineMessages`); continue; } else { l65.push(n65); } } if (l65.length > 0) { await this.receiveMessages(l65); this.core.messageService.markMessagesAck(k65); this.core.messageService.emit('onReceiveMessages', l65); await this.refreshUsersByMessage(l65); } else if (k65.length > 0 && l65.length <= 0) { this.core.messageService.markMessagesAck(k65); } this.sendTeamProcessNotifications(m65); } catch (e) { this.core.logger.error(s41, 'onSyncOfflineMessages', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `onSyncOfflineMessages ${JSON.stringify(e)}`, rawError: e } }); } } } async onSyncRoamingMessages(v64) { try { const w64 = get(v64.content, 'data'); const x64 = w64.map((msg) => { const e65 = completeMessage(this.core, msg); const message = this.core.messageService.v2IProcessMessageAttachment(e65); return message; }); const y64 = x64.map(item => item.messageClientId); const z64 = await this.model.getReceivedMessages(y64); const a65 = x64.filter(item => { return !z64.get(item.messageClientId); }); const b65 = []; const c65 = []; for (const d65 of a65) { if (d65.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_NOTIFICATION) { c65.push(d65); } if (await this.core.messageService.messageFilterShouldIgnore(d65)) { this.core.logger.info(s41, `msg: ${d65.messageClientId} is filtered onSyncRoamingMessages`); continue; } else { b65.push(d65); } } if (b65.length > 0) { await this.roamingMessages(b65); this.core.messageService.emit('onReceiveMessages', b65); await this.refreshUsersByMessage(b65); } this.sendTeamProcessNotifications(c65); } catch (e) { this.core.logger.error(s41, 'onSyncRoamingMessages', e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `onSyncRoamingMessages ${JSON.stringify(e)}`, rawError: e } }); } } } async receiveMessages(t64) { try { this.core.logger.info(s41, 'receiveMessages, size', t64.length); const u64 = t64.map(item => new V2NIMMessageModel().implement(item)); await this.model.inLineInserts(u64); return; } catch (e) { this.core.logger.error(s41, 'receiveMessages', t64, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `receiveMessage ${JSON.stringify(e)}`, rawError: e } }); } } } async receiveMessage(message) { try { const model = new V2NIMMessageModel().implement(message); await this.model.insert(model); return message; } catch (e) { this.core.logger.error(s41, 'receiveMessage', message, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `receiveMessage ${JSON.stringify(e)}`, rawError: e } }); } } } async roamingMessages(r64) { try { this.core.logger.info(s41, 'roamingMessages', r64.length); const s64 = r64.map(item => new V2NIMMessageModel().implement(item)); await this.model.inLineInserts(s64); } catch (e) { this.core.logger.error(s41, 'roamingMessage', r64, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `roamingMessage ${JSON.stringify(e)}`, rawError: e } }); } } } async refreshUsersByMessage(p64) { const q64 = new HashMap(); p64.map((msg) => { q64.set(msg.senderId, get(msg, 'userUpdateTime')); }); await this.core.userService.v2IRefreshUserInfoBatch(q64); this.core.eventBus.emit('V2NIMConversationService/checkBackFill', p64.map((msg) => msg.conversationId)); await this.core.localConversationService.onMessagesSynced(p64); return; } sendTeamProcessNotifications(notifications) { notifications .sort((left, right) => { return left.createTime - right.createTime; }) .map((notification) => { this.core.eventBus.emit('V2NIMTeamService/teamProcessNotification', notification); }); } } 