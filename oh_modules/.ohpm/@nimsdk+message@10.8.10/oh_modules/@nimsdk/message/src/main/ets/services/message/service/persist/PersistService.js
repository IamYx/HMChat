import { V2NIMConversationType, V2NIMErrorCode, V2NIMErrorImpl, V2NIMMessageSendingState, validate, validateConversationId } from '@nimsdk/base'; import { receiveIdBySenderId } from '../../utils/Tools'; import { PersistModel } from './PersistModel'; const s41 = '[PersistService]'; export class PersistService { constructor(m60, table) { this.core = m60; this.model = new PersistModel(table); } async insertMessageToLocal(message, j60, k60, createTime) { this.core.logger.info(s41, 'insertMessageToLocal', message, j60, k60, createTime); validateConversationId(this.core.account, j60); if (createTime && createTime > 0) { message.createTime = createTime; } if (typeof k60 !== undefined && k60?.length > 0) { message.senderId = k60; } message.conversationId = j60; message.conversationType = this.core.conversationIdUtil.parseConversationType(j60); if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) { if (typeof message.senderId === 'undefined' || message.senderId.length <= 0) { message.senderId = this.core.account; } if (!j60.split('|').includes(message.senderId)) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'params is invalid' } }); } } else if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM || message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM) { if (typeof message.senderId === 'undefined' || message.senderId.length <= 0) { message.senderId = j60.split('|')[0]; } } message.receiverId = receiveIdBySenderId(message.senderId, j60, this.core.account); message.isSelf = message.senderId == this.core.account; try { message.sendingState = V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED; const l60 = await this.model.insertMessageToLocal(message, j60, message.senderId, message.createTime); const msg = this.core.messageService.v2IProcessMessageAttachment(l60); this.core.eventBus.emit('V2NIMConversationService/insertMessage', msg); await this.core.localConversationService.onMessageInserted(msg); this.core.messageService.emit('onSendMessage', msg); return msg; } catch (e) { this.core.logger.error(s41, 'insertMessageToLocal', message, j60, k60, createTime, e); message.sendingState = V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_FAILED; this.core.messageService.emit('onSendMessage', message); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `insertMessageToLocal ${JSON.stringify(e)}`, rawError: e } }); } } } async updateMessageLocalExtension(message, h60) { try { this.core.logger.info(s41, 'updateMessageLocalExtension', message, h60); if (message.messageClientId.length === 0) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_PARAMETER_ERROR, detail: { reason: 'params is null' } }); } validate({ localExtension: { type: 'string', required: true } }, { localExtension: h60 }, '', true); const i60 = await this.model.isSavedMessage(message.messageClientId); if (!i60) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST, detail: { reason: 'request resource not exist' } }); } await this.model.updateMessageLocalExtension(message.messageClientId, h60); message.localExtension = h60; return message; } catch (e) { this.core.logger.error(s41, 'updateMessageLocalExtension', message, h60, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `updateMessageLocalExtension ${JSON.stringify(e)}`, rawError: e } }); } } } } 