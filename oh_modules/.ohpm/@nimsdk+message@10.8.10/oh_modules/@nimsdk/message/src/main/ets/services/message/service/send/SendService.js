import { checkStubServiceErrorCode, guid, V2NIMClientAntispamOperateType, V2NIMConversationType, V2NIMErrorCode, V2NIMErrorImpl, V2NIMLoginStatus, V2NIMMessageAttachmentUploadState, V2NIMMessageSendingState, V2NIMMessageType, V2NIMStorageSceneConfig, validate, validateConversationId } from '@nimsdk/base'; import { V2NIMMessageModel } from '../../model/V2NIMMessageModel'; import { formatAIMessageConfig } from '../../utils/Format'; import { compatibleAttachmentRawWithV1 } from '../../utils/Tools'; import { replyMessageRule, sendMessageRule } from '../Rules'; import { SendCloud } from './SendCloud'; import { SendModel } from './SendModel'; const s41 = '[SendService]'; export class SendService { constructor(w67, table) { this.core = w67; this.model = new SendModel(w67, table); this.cloud = new SendCloud(w67); } async sendMessage(message, v67, params, progress) { this.core.logger.info(s41, 'sendMessage', message, v67, params); await this.validParams(message, v67, params); try { await this.checkResendMessage(message); await this.clientAntispam(message, params); await this.attachmentUpload(message, progress); await this.sendMessageCmd(message); return await this.sendMessageFinally(message); } catch (e) { await this.sendMessageFailed(message); this.core.logger.error(s41, 'sendMessage', message, v67, params, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `sendMessage ${JSON.stringify(e)}`, rawError: e } }); } } } async replyMessage(message, u67, params, progress) { try { this.core.logger.info(s41, 'replyMessage', message, u67, params); validate({ message: { type: 'object' } }, { message: message }, '', true); message.messageClientId = message.messageClientId || guid(); validate(replyMessageRule, { message: message, replyMessage: u67, params: params }, '', true); validateConversationId(this.core.account, u67.conversationId); const msg = this.generateMessageModel(message, u67); return this.sendMessage(msg, u67.conversationId, params, progress); } catch (e) { this.core.logger.error(s41, 'replyMessage', message, u67, params, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `replyMessage ${JSON.stringify(e)}`, rawError: e } }); } } } async cancelMessageAttachmentUpload(message) { this.core.logger.info(s41, 'cancelMessageAttachmentUpload', message); if (this.core.loginService.getLoginStatus() !== V2NIMLoginStatus.V2NIM_LOGIN_STATUS_LOGINED) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE }); } try { validate({ messageClientId: { type: 'string', allowEmpty: false } }, message, '', true); } catch (e) { this.core.logger.error(s41, 'cancelMessageAttachmentUpload', message, e); throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `cancelMessageAttachmentUpload: invalid parameter` } }); } try { if (![V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO, V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE, V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE, V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO ].includes(message.messageType)) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_MISUSE, detail: { reason: `cancelMessageAttachmentUpload: messageType ${message.messageType} incorrect` } }); } if (message.sendingState === V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_FAILED || message.sendingState === V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST, detail: { reason: `cancelMessageAttachmentUpload: message is already failed or succeeded` } }); } const task = { taskId: message.messageClientId }; await this.core.storageService.v2ICancelUploadFile(task); } catch (e) { this.core.logger.error(s41, 'cancelMessageAttachmentUpload', message, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { this.core.logger.error(s41, `cancelMessageAttachmentUpload `, e); throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST, detail: { reason: `cancelMessageAttachmentUpload: resource not exist` } }); } } } async updateAttachmentFilePath(t67, filePath) { await this.model.updateDownloadAttachment(t67, filePath); } generateMessageModel(message, r67) { const s67 = new V2NIMMessageModel().implement(message); if (r67) { const root = r67.threadRoot; s67.threadReply = { senderId: r67.senderId, receiverId: r67.receiverId, messageServerId: r67.messageServerId, createTime: r67.createTime, messageClientId: r67.messageClientId, conversationType: r67.conversationType, conversationId: r67.conversationId }; s67.threadRoot = { senderId: root ? root.senderId : r67.senderId, receiverId: root ? root.receiverId : r67.receiverId, messageServerId: root ? root.messageServerId : r67.messageServerId, createTime: root ? root.createTime : r67.createTime, messageClientId: root ? root.messageClientId : r67.messageClientId, conversationType: root ? root.conversationType : r67.conversationType, conversationId: root ? root.conversationId : r67.conversationId }; } return s67; } async validParams(message, o67, params) { validate({ message: { type: 'object' } }, { message: message }, '', true); message.messageClientId = message.messageClientId || guid(); if (message.conversationId && message.conversationId !== o67) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'sendMessage: message.conversationId is not equal to conversationId' } }); } validate(sendMessageRule, { conversationId: o67, message: message, params: params }, '', true); validateConversationId(this.core.account, o67); if (params?.messageConfig) { message.messageConfig = params.messageConfig; } if (params?.antispamConfig) { message.antispamConfig = params.antispamConfig; } if (params?.routeConfig) { message.routeConfig = params.routeConfig; } if (params?.robotConfig) { message.robotConfig = params.robotConfig; } if (params?.pushConfig) { message.pushConfig = params.pushConfig; if (message.pushConfig.pushEnabled === false) { message.pushConfig.forcePush = false; } } if (params?.aiConfig) { const q67 = {}; q67.accountId = params.aiConfig.accountId; q67.aiStatus = 1; message.aiConfig = q67; message.aiConfigParams = formatAIMessageConfig(message, params.aiConfig); } message.conversationId = o67; message.conversationType = this.core.conversationIdUtil.parseConversationType(o67); message.senderId = this.core.account; message.receiverId = this.core.conversationIdUtil.parseConversationTargetId(o67); if ((message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM || message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM) && params?.targetConfig) { let p67 = params.targetConfig.receiverIds; if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM && params.targetConfig.inclusive === false) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'setting inclusive to false for super teams is not allowed' } }); } p67 = p67.filter((id) => id && id !== this.core.account); if (p67.length === 0) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'receiverIds cannot be empty or only contain yourself' } }); } params.targetConfig.receiverIds = p67; message.targetConfig = params.targetConfig; } else { message.targetConfig = undefined; } return message; } async checkResendMessage(message) { const n67 = await this.model.query(message.messageClientId); if (n67?.isDeleted) { message.resend = false; return message; } if (n67 !== undefined && n67.messageServerId !== null && n67.messageServerId.length > 0 && n67.sendingState === V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_MISUSE, detail: { reason: 'sendMessage: message.messageServerId is not empty. Msg is not allowed to be sent.' } }); } if (n67 !== undefined && n67.sendingState === V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_FAILED) { message.resend = true; } else { message.resend = false; } message.sendingState = V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_SENDING; if (n67 !== undefined) { await this.model.resetDeleteStatus(message); } else { await this.model.inlineSaveMessage(message); } this.core.eventBus.emit('V2NIMConversationService/sendMessage', message, message.sendingState); try { this.core.localConversationService.onMessageSent(message); } catch (e) { checkStubServiceErrorCode(e); } return message; } async clientAntispam(message, params) { this.core.logger.info(s41, 'clientAntispam', message, params); let l67; const m67 = message.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT || message.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_TIPS; if (params?.clientAntispamEnabled && m67 && message.text) { l67 = this.core.clientAntispamUtil.checkTextAntispam(message.text, params?.clientAntispamReplace); message.clientAntispamHit = false; switch (l67.operateType) { case V2NIMClientAntispamOperateType.V2NIM_CLIENT_ANTISPAM_OPERATE_REPLACE: message.text = l67.replacedText; break; case V2NIMClientAntispamOperateType.V2NIM_CLIENT_ANTISPAM_OPERATE_SERVER_SHIELD: message.clientAntispamHit = true; break; case V2NIMClientAntispamOperateType.V2NIM_CLIENT_ANTISPAM_OPERATE_CLIENT_SHIELD: throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_CLIENT_ANTISPAM, detail: { reason: 'sendMessage: text intercepted by client antispam' } }); } } message.clientAntispamResult = l67; return message; } async attachmentUpload(message, progress) { this.core.logger.info(s41, 'attachmentUpload', message); if (!this.isMediaType(message.messageType)) { this.core.messageService.emit('onSendMessage', message.transform()); return message; } const h67 = message.attachment; if (typeof h67.url !== 'undefined' && h67.url.length > 0) { message.attachmentUploadState = V2NIMMessageAttachmentUploadState.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_SUCCESS; this.core.messageService.emit('onSendMessage', message.transform()); return message; } const i67 = this.core.storageService.v2IHasStorageScene(h67.sceneName); if (i67 === false) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `invalid param scene name not exist` } }); } const filePath = h67.path ?? ''; try { message.attachmentUploadState = V2NIMMessageAttachmentUploadState.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_UPLOADING; h67.uploadState = message.attachmentUploadState; this.core.messageService.emit('onSendMessage', message.transform()); const j67 = { taskId: message.messageClientId, uploadParams: { filePath: filePath, sceneName: h67.sceneName ?? V2NIMStorageSceneConfig.DEFAULT_IM().sceneName } }; const k67 = { fileType: message.messageType }; const result = await this.core.storageService.v2IUploadFileTask(j67, progress, k67); message.attachmentUploadState = V2NIMMessageAttachmentUploadState.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_SUCCESS; h67.uploadState = message.attachmentUploadState; this.completeAttachment(message, result); await this.model.updateAttachment(message.messageClientId, message.attachment?.raw); this.core.messageService.emit('onSendMessage', message.transform()); } catch (e) { this.core.logger.error(s41, 'attachmentUpload', message, e); message.attachmentUploadState = V2NIMMessageAttachmentUploadState.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_FAILED; h67.uploadState = message.attachmentUploadState; h67.ext = h67.ext?.indexOf('.') === -1 ? `.${h67.ext}` : h67.ext; this.core.messageService.emit('onSendMessage', message.transform()); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `attachmentUpload ${JSON.stringify(e)}`, rawError: e } }); } } return message; } async sendMessageCmd(message) { try { this.core.logger.info(s41, 'sendMessageCmd', message); const userInfo = await this.core.userService.v2IGetLocalUser(this.core.account); message.userUpdateTime = userInfo?.updateTime || 0; message = await this.cloud.sendMessage(message); message.sendingState = V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED; await this.model.updateSendingState(message.messageClientId, message.sendingState, message.messageServerId, message.createTime, message.callbackExtension); return message; } catch (e) { this.core.logger.error(s41, 'sendMessageCmd', message, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `sendMessageCmd ${JSON.stringify(e)}`, rawError: e } }); } } } async sendMessageFinally(message) { let result = { message: message.transform(), antispamResult: message.antispamResult, clientAntispamResult: message.clientAntispamResult }; this.core.eventBus.emit('V2NIMConversationService/sendMessage', message, message.sendingState); try { this.core.localConversationService.onMessageSent(message); } catch (e) { checkStubServiceErrorCode(e); } this.core.logger.info(s41, 'sendMessageFinally', result); if (message.msgAckSnapshot) { const total = message.msgAckSnapshot; const snapshot = { conversationId: message.conversationId, messageServerId: message.messageServerId, messageClientId: message.messageClientId, readCount: 0, unreadCount: Number(total) }; this.core.messageService.emit('onReceiveTeamMessageReadReceipts', [snapshot]); } if (message.senderId === message.receiverId) { this.core.messageService.markMessagesAck([message]); } this.core.messageService.emit('onSendMessage', result.message); return result; } async sendMessageFailed(message) { this.core.logger.info(s41, 'sendMessageFailed', message); message.sendingState = V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_FAILED; await this.model.updateSendingState(message.messageClientId, V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_FAILED); this.core.eventBus.emit('V2NIMConversationService/sendMessage', message, message.sendingState); try { this.core.localConversationService.onMessageSent(message); } catch (e) { checkStubServiceErrorCode(e); } this.core.messageService.emit('onSendMessage', message.transform()); } completeAttachment(message, result) { const d67 = message.attachment; d67.url = result.url; d67.size = result.size; d67.ext = result.ext && result.ext.indexOf('.') === -1 ? `.${result.ext}` : result.ext; d67.uploadState = V2NIMMessageAttachmentUploadState.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_SUCCESS; if (message.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE) { const g67 = message.attachment; g67.height = g67.height > 0 ? g67.height : result.h ?? 0; g67.width = g67.width > 0 ? g67.width : result.w ?? 0; } else if (message.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO) { const f67 = message.attachment; f67.height = f67.height > 0 ? f67.height : result.h ?? 0; f67.width = f67.width > 0 ? f67.width : result.w ?? 0; f67.duration = f67.duration > 0 ? f67.duration : result.dur ?? 0; } else if (message.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO) { const e67 = message.attachment; e67.duration = e67.duration > 0 ? e67.duration : result.dur ?? 0; } d67.raw = compatibleAttachmentRawWithV1(d67, message.messageType); } isMediaType(messageType) { const mediaTypes = [ V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO, V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO, V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE, V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE ]; return mediaTypes.includes(messageType); } } 