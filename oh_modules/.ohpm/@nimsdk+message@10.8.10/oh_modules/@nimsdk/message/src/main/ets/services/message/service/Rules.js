import { getEnumValues, V2NIMConversationType, V2NIMMessageType, V2NIMQueryDirection, V2NIMSortOrder } from '@nimsdk/base'; export const revokeMsgRule = { messageClientId: { type: 'string', allowEmpty: false }, messageServerId: { type: 'string', allowEmpty: false }, conversationType: { type: 'enum', values: getEnumValues(V2NIMConversationType) }, createTime: { type: 'number' } }; export const revokeMessageParamRule = { postscript: { type: 'string', required: false }, serverExtension: { type: 'string', required: false }, pushContent: { type: 'string', required: false }, pushPayload: { type: 'string', required: false }, env: { type: 'string', required: false } }; export const messageConfigRule = { readReceiptEnabled: { type: 'boolean', required: false }, conversationUpdateEnabled: { type: 'boolean', required: false }, historyEnabled: { type: 'boolean', required: false }, roamingEnabled: { type: 'boolean', required: false }, onlineSyncEnabled: { type: 'boolean', required: false }, offlineEnabled: { type: 'boolean', required: false }, unreadEnabled: { type: 'boolean', required: false } }; export const routeConfigRule = { routeEnabled: { type: 'boolean', required: false }, routeEnvironment: { type: 'string', required: false } }; export const pushConfigRule = { pushEnabled: { type: 'boolean', required: false }, pushNickEnabled: { type: 'boolean', required: false }, pushContent: { type: 'string', required: false }, pushPayload: { type: 'string', required: false }, forcePush: { type: 'boolean', required: false }, forceContent: { type: 'string', required: false }, forcePushAccountIds: { type: 'array', required: false, itemType: 'string' } }; export const antispamConfigRule = { antispamEnabled: { type: 'boolean', required: false }, antispamBusinessId: { type: 'string', required: false }, antispamCustomMessage: { type: 'string', required: false }, antispamCheating: { type: 'string', required: false }, antispamExtension: { type: 'string', required: false } }; export const robotConfigRule = { accountId: { type: 'string', required: false }, topic: { type: 'string', required: false }, function: { type: 'string', required: false }, customContent: { type: 'string', required: false } }; export const targetConfigParamsBase = { receiverIds: { type: 'array', itemType: 'string', required: true }, inclusive: { type: 'boolean', required: true }, newMemberVisible: { type: 'boolean', required: false } }; const e66 = { accountId: { type: 'string', allowEmpty: false }, content: { type: 'object', required: false, rules: { msg: { type: 'string', allowEmpty: false }, type: { type: 'number', allowEmpty: false } } }, messages: { type: 'array', required: false, rules: { msg: { type: 'string', allowEmpty: false }, type: { type: 'number' }, role: { type: 'enum', values: [ "assistant", "user", "system" ] } } }, promptVariables: { type: 'jsonstr', required: false }, modelConfigParams: { type: 'object', required: false, rules: { prompt: { type: 'string', required: false }, maxTokens: { type: 'number', required: false }, topP: { type: 'number', required: false }, temperature: { type: 'number', required: false } } } }; export const sendMessageParamsRule = { messageConfig: { type: 'object', required: false, rules: messageConfigRule }, routeConfig: { type: 'object', required: false, rules: routeConfigRule }, pushConfig: { type: 'object', required: false, rules: pushConfigRule }, antiSpamConfig: { type: 'object', required: false, rules: antispamConfigRule }, robotConfig: { type: 'object', required: false, rules: robotConfigRule }, targetConfig: { type: 'object', required: false, rules: targetConfigParamsBase }, aiConfig: { type: 'object', required: false, rules: e66 }, }; export const replyMessageRule = { message: { type: 'object', rules: { text: { type: 'string', required: false }, messageType: { type: 'enum', values: getEnumValues(V2NIMMessageType) }, messageClientId: { type: 'string', allowEmpty: false } } }, params: { type: 'object', rules: sendMessageParamsRule, required: false }, replyMessage: { type: 'object', rules: { conversationType: { type: 'enum', values: getEnumValues(V2NIMConversationType) }, receiverId: { type: 'string', allowEmpty: false }, senderId: { type: 'string', allowEmpty: false }, messageClientId: { type: 'string', allowEmpty: false }, messageServerId: { type: 'string', allowEmpty: false }, createTime: { type: 'number' } } } }; export const sendMessageRule = { conversationId: { type: 'string', allowEmpty: false }, message: { type: 'object', rules: { text: { type: 'stringObject', required: false }, messageType: { type: 'enum', values: getEnumValues(V2NIMMessageType) }, messageClientId: { type: 'string', allowEmpty: false }, attachment: { type: 'object', required: false, rules: { file: { type: 'file', required: false } } } } }, params: { type: 'object', required: false, rules: sendMessageParamsRule } }; export const revokeMessageRule = { message: { type: 'object', rules: revokeMsgRule }, params: { type: 'object', rules: revokeMessageParamRule, required: false } }; export const getMessageListRule = { conversationId: { type: 'string', allowEmpty: false }, messageTypes: { type: 'array', required: false, itemType: 'enum', values: getEnumValues(V2NIMMessageType) }, beginTime: { type: 'number', required: false }, endTime: { type: 'number', required: false }, limit: { type: 'number', min: 1, required: false }, direction: { type: 'enum', values: getEnumValues(V2NIMQueryDirection), required: false }, anchorMessage: { type: 'object', required: false, rules: { conversationId: { type: 'string', allowEmpty: false }, messageClientId: { type: 'string', allowEmpty: false }, messageServerId: { type: 'string', allowEmpty: false }, createTime: { type: 'number' } } } }; export const msgReferRule = { conversationType: { type: 'enum', values: getEnumValues(V2NIMConversationType) }, receiverId: { type: 'string', allowEmpty: false }, senderId: { type: 'string', allowEmpty: false }, messageServerId: { type: 'string', allowEmpty: false }, messageClientId: { type: 'string', allowEmpty: false } }; export const getMsgReferRule = { conversationType: { type: 'enum', values: getEnumValues(V2NIMConversationType) }, receiverId: { type: 'string', allowEmpty: false }, senderId: { type: 'string', allowEmpty: false }, messageClientId: { type: 'string', allowEmpty: false } }; export const getMessageListByRefersRule = { messageRefers: { type: 'array', required: true, rules: getMsgReferRule } }; export const deleteMessageRule = { conversationId: { type: 'string', allowEmpty: false }, conversationType: { type: 'enum', values: getEnumValues(V2NIMConversationType) }, receiverId: { type: 'string', allowEmpty: false }, senderId: { type: 'string', allowEmpty: false }, messageClientId: { type: 'string', allowEmpty: false }, createTime: { type: 'number' } }; export const deleteMessagesRule = { messages: { type: 'array', rules: deleteMessageRule, required: true, min: 1 } }; export const clearHistoryMessageRule = { conversationId: { type: 'string', allowEmpty: false }, serverExtension: { type: 'string', required: false }, onlineSync: { type: 'boolean', required: false }, deleteRoam: { type: 'boolean', required: false } }; export const serverExtensionRule = { serverExtension: { type: 'string', required: false } }; export const sendP2PMessageReceiptRule = { messageClientId: { type: 'string', allowEmpty: false }, conversationType: { type: 'enum', values: [V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P] }, receiverId: { type: 'string', allowEmpty: false }, createTime: { type: 'number' } }; export const sendTeamMessageReceiptsRule = { messages: { type: 'array', rules: { messageClientId: { type: 'string', allowEmpty: false }, conversationType: { type: 'enum', values: [V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM] }, receiverId: { type: 'string', allowEmpty: false }, createTime: { type: 'number' } }, min: 1 } }; export const voiceToTextRule = { voiceUrl: { type: 'string', required: false, allowEmpty: true }, file: { type: 'file', required: false }, voicePath: { type: 'string', required: false, allowEmpty: true }, mimeType: { type: 'string', required: false, allowEmpty: false }, sampleRate: { type: 'string', required: false, allowEmpty: false }, duration: { type: 'number', required: true, min: 0 }, sceneName: { type: 'string', required: false } }; export const messageRules = { conversationType: { type: 'enum', values: getEnumValues(V2NIMConversationType) }, receiverId: { type: 'string', allowEmpty: false }, senderId: { type: 'string', allowEmpty: false }, messageServerId: { type: 'string', allowEmpty: false }, messageClientId: { type: 'string', allowEmpty: false }, createTime: { type: 'number' } }; export const quickCommentRule = { message: { type: 'object', rules: messageRules }, index: { type: 'number', min: 1 }, serverExtension: { type: 'string', required: false }, pushConfig: { type: 'object', required: false, rules: { pushEnabled: { type: 'boolean', required: false }, needBadge: { type: 'boolean', required: false }, title: { type: 'string', required: false, allowEmpty: false }, content: { type: 'string', required: false, allowEmpty: false }, pushPayload: { type: 'string', required: false, allowEmpty: false } } } }; export const getQuickCommentRule = { messages: { type: 'array', min: 1, rules: { conversationType: { type: 'enum', values: getEnumValues(V2NIMConversationType) }, receiverId: { type: 'string', allowEmpty: false }, senderId: { type: 'string', allowEmpty: false }, messageServerId: { type: 'string', allowEmpty: false }, messageClientId: { type: 'string', allowEmpty: false }, createTime: { type: 'number' } } } }; export const addCollectionRule = { params: { type: 'object', rules: { collectionType: { type: 'number', min: 1 }, collectionData: { type: 'string', allowEmpty: false }, serverExtension: { type: 'string', required: false, allowEmpty: true }, uniqueId: { type: 'string', required: false } } } }; export const removeCollectionRule = { collections: { type: 'array', min: 1, rules: { collectionId: { type: 'string', allowEmpty: false }, collectionType: { type: 'number', min: 1 }, createTime: { type: 'number' } } } }; export const updateCollectionExtensionRule = { serverExtension: { type: 'string', required: false, allowEmpty: true }, collection: { type: 'object', rules: { collectionId: { type: 'string', allowEmpty: false }, collectionType: { type: 'number', min: 1 }, createTime: { type: 'number', min: 1 } } } }; export const getCollectionListByOptionRule = { beginTime: { type: 'number', required: false }, endTime: { type: 'number', required: false }, limit: { type: 'number', min: 1, required: false }, direction: { type: 'enum', required: false, values: getEnumValues(V2NIMQueryDirection) }, collectionType: { type: 'number', required: false }, anchorCollection: { type: 'object', required: false, rules: { collectionId: { type: 'string', allowEmpty: false, required: false }, createTime: { type: 'number', required: false } } } }; export const searchCloudMessagesRule = { keyword: { type: 'string', allowEmpty: false }, beginTime: { type: 'number', required: false }, endTime: { type: 'number', required: false }, sortOrder: { type: 'enum', values: getEnumValues(V2NIMSortOrder), required: false }, conversationLimit: { type: 'number', min: 0, required: false }, messageLimit: { type: 'number', min: 1, required: false }, p2pAccountIds: { type: 'array', required: false, itemType: 'string' }, teamIds: { type: 'array', required: false, itemType: 'string' }, senderAccountIds: { type: 'array', required: false, itemType: 'string' }, messageTypes: { type: 'array', required: false, itemType: 'enum', values: getEnumValues(V2NIMMessageType) }, messageSubtypes: { type: 'array', required: false, itemType: 'number' } }; export const getTeamMessageReceiptsDetailRule = { message: { type: 'object', rules: { receiverId: { type: 'string', allowEmpty: false }, messageServerId: { type: 'string', allowEmpty: false }, conversationType: { type: 'enum', values: [V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM] } } } }; export const getTeamMessageReceiptsRule = { messages: { type: 'array', rules: { receiverId: { type: 'string', allowEmpty: false }, messageServerId: { type: 'string', allowEmpty: false }, conversationType: { type: 'enum', values: [V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM] } }, min: 1 } }; export const fileMessageRule = { sceneName: { type: 'string', required: false }, name: { type: 'string', required: false } }; export const audioMessageRule = { ...fileMessageRule, duration: { type: 'number', required: false } }; export const videoMessageRule = { ...audioMessageRule, width: { type: 'number', required: false }, height: { type: 'number', required: false } }; export const imageMessageRule = { ...fileMessageRule, width: { type: 'number', required: false }, height: { type: 'number', required: false } }; export const getThreadMessageListRule = { messageRefer: { type: 'object', required: true, rules: msgReferRule }, beginTime: { type: 'number', required: false }, endTime: { type: 'number', required: false }, limit: { type: 'number', min: 1, required: false }, direction: { type: 'enum', values: getEnumValues(V2NIMQueryDirection), required: false }, excludeMessageServerId: { type: 'string', required: false, allowEmpty: false } }; export const modifyMessageRules = { senderId: { type: 'string', allowEmpty: false }, receiverId: { type: 'string', allowEmpty: false }, createTime: { type: 'number' }, messageClientId: { type: 'string', allowEmpty: false }, messageServerId: { type: 'string', allowEmpty: false } }; export const modifyMessageParamsRules = { subType: { type: 'number', min: 0, required: false }, text: { type: 'string', required: false }, attachment: { type: 'object', required: false }, serverExtension: { type: 'string', required: false }, routeConfig: { type: 'object', required: false, rules: routeConfigRule }, pushConfig: { type: 'object', required: false, rules: pushConfigRule }, antiSpamConfig: { type: 'object', required: false, rules: antispamConfigRule }, clientAntispamEnabled: { type: 'boolean', required: false }, clientAntispamReplace: { type: 'string', required: false } }; 