import { HashMap } from '@kit.ArkTS'; import { NIM, RdbStoreManager, RdbTableImpl, TableType, V2NIMMessageSendingState, V2NIMMessageType } from '@nimsdk/base'; import { ModifyMessageModel } from '../ModifyMessageModel'; import { V2NIMMessageModel } from '../V2NIMMessageModel'; export declare const enum COL_NAME { CLIENT_ID = "client_id", SERVER_ID = "server_id", CREATE_TIME = "create_time", SENDER_ID = "sender_id", RECEIVER_ID = "receiver_id", CONVERSATION_TYPE = "conversation_type", CONVERSATION_ID = "conversation_id", SEND_STATE = "send_state", STATUS = "status", MESSAGE_TYPE = "message_type", SUB_TYPE = "sub_type", IS_SELF = "is_self", TEXT = "text", ATTACHMENT = "attachment", ROBOT_INFO = "robot_info", AI_ACCOUNT_ID = "ai_account_id", AI_STATUS = "ai_status", MODIFY_ACCOUNT_ID = "modify_account_id", MODIFY_TIME = "modify_time", SERVER_EXTENSION = "server_extension", LOCAL_EXTENSION = "local_extension", CALLBACK_EXTENSION = "callback_extension", MESSAGE_CONFIG = "message_config", PUSH_CONFIG = "push_config", ROUTE_CONFIG = "route_config", ANTISPAM_CONFIG = "antispam_config", ROBOT_CONFIG = "robot_config", THREAD_ROOT = "thread_root", THREAD_ROOT_ID = "thread_root_id", THREAD_REPLY = "thread_reply", THREAD_REPLY_ID = "thread_reply_id", READ_RECEIPT_STATE = "read_receipt_state", CONFIG_ENABLE_UNREAD = "config_enable_unread", CONFIG_ENABLE_LAST_MESSAGE = "config_enable_last_message" } export declare const MESSAGE_TABLE: TableType; export declare const enum MSG_STATUS_ENUM { GOOD = 0, DELETE = 1, INVISIBLE = 2 } export declare class MessageTable extends RdbTableImpl { private logger; constructor(a46: RdbStoreManager, b46: NIM);             saveMessage(message: V2NIMMessageModel, y45?: boolean): Promise<void>; inlineSaveMessage(message: V2NIMMessageModel): Promise<void>; resetDeleteStatus(message: V2NIMMessageModel): Promise<void>;           saveMessages(p45: V2NIMMessageModel[]): Promise<V2NIMMessageModel[]>; inLineSaveMessages(n45: V2NIMMessageModel[]): Promise<void>; updateReadReceipts(m45: string[]): Promise<void>; updateSendingState(j45: string, k45: V2NIMMessageSendingState, serverId?: string, createTime?: number, l45?: string): Promise<void>; updateLocalExtension(h45: string, i45: string): Promise<void>; updateAttachment(f45: string, g45?: string): Promise<void>; updateAttachmentFilePath(b45: string, filePath: string): Promise<void>; modify(a45: ModifyMessageModel): Promise<void>; getModifyTime(z44: string): Promise<number>; private deletes; deleteByClientId(clientId: string): Promise<void>; deleteByConversationId(v44: string): Promise<void>;               deleteByOption(u44: string, start: number, end: number): Promise<void>;               invisibleByConversationId(t44: string, start: number, end: number): Promise<void>; queryListExcludeDelete(s44: string[]): Promise<V2NIMMessageModel[]>; queryListIncludeDelete(r44: string[]): Promise<V2NIMMessageModel[]>; queryConversationUnreadMessages(p44: string, q44: number): Promise<V2NIMMessageModel[]>; queryConversationUnreadMessageCount(m44: string, n44: number): Promise<number>; queryConversationMessage(k44: string, l44?: boolean): Promise<V2NIMMessageModel[]>; queryConversationLastMessage(i44: string, j44: boolean): Promise<V2NIMMessageModel | undefined>; queryMessagesByOperationExclude(f44: string, g44: number, endTime: number, limit: number, h44: V2NIMMessageType[], direction: number): Promise<V2NIMMessageModel[]>; queryMessagesByOperation(c44: string, d44: number, endTime: number, limit: number, e44: V2NIMMessageType[], direction: number): Promise<V2NIMMessageModel[]>; queryExcludeDeleteStatus(b44: string): Promise<V2NIMMessageModel | undefined>; queryIncludeDeleteStatus(a44: string): Promise<V2NIMMessageModel | undefined>; query(z43: string): Promise<V2NIMMessageModel | undefined>; queryMessages(x43: string[]): Promise<HashMap<string, V2NIMMessageModel>>; queryThreadMessages(v43: string): Promise<V2NIMMessageModel[]>; createTable(): Promise<void>; private refreshConfigEnableUnreadSql; private refreshConfigEnableLastMessageSql;         private refreshConfigEnableUnread; private refreshConfigEnableLastMessage; } 