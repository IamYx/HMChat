import { V2NIMQueryDirection, validateConversationId, ValidateErrorV2 } from "@nimsdk/base"; export class V2NIMMessageListOptionModel { constructor(option) { this.conversationId = option.conversationId; this.messageTypes = option.messageTypes ?? []; this.beginTime = option.beginTime ?? 0; this.endTime = option.endTime ?? 0; this.limit = option.limit ?? 50; this.anchorMessage = option.anchorMessage ?? null; this.direction = option.direction ?? V2NIMQueryDirection.V2NIM_QUERY_DIRECTION_DESC; this.strictMode = option.strictMode ?? false; this.onlyQueryLocal = option.onlyQueryLocal ?? false; if (this.anchorMessage) { const u47 = this.anchorMessage.createTime; if (this.direction === V2NIMQueryDirection.V2NIM_QUERY_DIRECTION_DESC && this.endTime === 0) { this.endTime = u47; } else if (this.direction === V2NIMQueryDirection.V2NIM_QUERY_DIRECTION_ASC && this.beginTime === 0) { this.beginTime = u47; } } if (this.onlyQueryLocal) { this.strictMode = false; } } static validateParam(q47, option) { let r47 = option.conversationId; let s47 = option.beginTime ?? 0; let endTime = option.endTime ?? 0; let limit = option.limit ?? 50; let t47 = option.anchorMessage; let direction = option.direction ?? V2NIMQueryDirection.V2NIM_QUERY_DIRECTION_DESC; validateConversationId(q47, r47); if (s47 < 0) { throw new ValidateErrorV2({ detail: { reason: `beginTime: ${s47} is less than 0`, } }); } if (endTime < 0) { throw new ValidateErrorV2({ detail: { reason: `endTime: ${endTime} is less than 0`, } }); } if (s47 > endTime && endTime > 0) { throw new ValidateErrorV2({ detail: { reason: `beginTime: ${s47} is bigger than endTime: ${endTime} when endTime is more than 0`, } }); } if (limit <= 0) { throw new ValidateErrorV2({ detail: { reason: `limit: ${limit} is less than 0`, } }); } if (option.anchorMessage && !t47) { throw new ValidateErrorV2({ detail: { reason: `anchorMessage is not from NIMSDK`, } }); } if (t47) { if (t47.messageClientId.length <= 0) { throw new ValidateErrorV2({ detail: { reason: `clientId: ${t47.messageClientId} of anchor is empty`, } }); } if (t47.createTime <= 0) { throw new ValidateErrorV2({ detail: { reason: `anchorMessage: ${t47.messageClientId} of anchor is invalid`, } }); } if (t47.conversationId != r47) { throw new ValidateErrorV2({ detail: { reason: `conversationId: ${t47.conversationId} of anchor is not equal to current conversationId: ${r47}`, } }); } if (direction == V2NIMQueryDirection.V2NIM_QUERY_DIRECTION_DESC) { if (endTime > 0 && endTime != t47.createTime) { throw new ValidateErrorV2({ detail: { reason: `createTime: ${t47.createTime} of anchor is not equal to endTime: ${endTime} when direction is DESC`, } }); } } if (direction == V2NIMQueryDirection.V2NIM_QUERY_DIRECTION_ASC) { if (s47 > 0 && s47 != t47.createTime) { throw new ValidateErrorV2({ detail: { reason: `createTime: ${t47.createTime} of anchor is not equal to beginTime: ${s47} when direction is ASC`, } }); } } } } isGetRecentMessages() { return this.endTime == 0 && !this.anchorMessage && this.direction == V2NIMQueryDirection.V2NIM_QUERY_DIRECTION_DESC; } } 