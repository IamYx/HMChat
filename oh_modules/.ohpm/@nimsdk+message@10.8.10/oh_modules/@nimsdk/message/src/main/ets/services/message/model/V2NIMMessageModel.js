import { V2NIMConversationType, V2NIMMessageSendingState, V2NIMMessageType } from '@nimsdk/base'; import { get, set, unset } from '@nimsdk/vendor'; import { MESSAGE_TABLE } from './table/MessageTable'; import { EM_CONFIG_ENABLE_LAST_MESSAGE, EM_CONFIG_ENABLE_UNREAD } from './table/TableConst'; export class V2NIMMessageModel { constructor() { this.messageClientId = ''; this.messageServerId = ''; this.createTime = 0; this.senderId = ''; this.receiverId = ''; this.conversationType = V2NIMConversationType.V2NIM_CONVERSATION_TYPE_UNKNOWN; this.conversationId = ''; this.isSelf = false; this.sendingState = V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_UNKNOWN; this.messageType = V2NIMMessageType.V2NIM_MESSAGE_TYPE_INVALID; this.messageStatus = { errorCode: 200, readReceiptSent: false }; } get attachment() { return this._attachment; } set attachment(w48) { this._attachment = w48; } get messageConfig() { return this._messageConfig; } set messageConfig(v48) { this._messageConfig = v48; } get pushConfig() { return this._pushConfig; } set pushConfig(u48) { this._pushConfig = u48; } get routeConfig() { return this._routeConfig; } set routeConfig(t48) { this._routeConfig = t48; } get antispamConfig() { return this._antispamConfig; } set antispamConfig(config) { this._antispamConfig = config; } get robotConfig() { return this._robotConfig; } set robotConfig(s48) { this._robotConfig = s48; } get targetConfig() { return this._targetConfig; } set targetConfig(r48) { this._targetConfig = r48; } get aiConfig() { return this._aiConfig; } set aiConfig(q48) { this._aiConfig = q48; } get threadRoot() { return this._threadRoot; } set threadRoot(p48) { this._threadRoot = p48; } get threadReply() { return this._threadReply; } set threadReply(o48) { this._threadReply = o48; } static createMessageByValue(valueBucket) { const message = new V2NIMMessageModel(); let e48; let f48; MESSAGE_TABLE.columns.forEach((item) => { switch (item) { case "client_id": message.messageClientId = valueBucket[item]; break; case "server_id": message.messageServerId = valueBucket[item]; break; case "create_time": message.createTime = valueBucket[item]; break; case "sender_id": message.senderId = valueBucket[item]; break; case "receiver_id": message.receiverId = valueBucket[item]; break; case "conversation_type": message.conversationType = valueBucket[item]; break; case "conversation_id": message.conversationId = valueBucket[item]; break; case "send_state": message.sendingState = valueBucket[item] === V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_UNKNOWN ? 3 : valueBucket[item]; break; case "message_type": message.messageType = valueBucket[item]; break; case "sub_type": message.subType = valueBucket[item]; break; case "text": { if (valueBucket[item] == null) { message.text = undefined; } else { message.text = valueBucket[item]; } } break; case "modify_time": message.modifyTime = valueBucket[item]; break; case "modify_account_id": message.modifyAccountId = valueBucket[item]; break; case "attachment": const g48 = valueBucket[item]; message.formatAttachment(g48); break; case "server_extension": message.serverExtension = valueBucket[item]; break; case "is_self": message.isSelf = (valueBucket[item] > 0) ? true : false; break; case "local_extension": message.localExtension = valueBucket[item]; break; case "callback_extension": message.callbackExtension = valueBucket[item]; break; case "message_config": const h48 = valueBucket[item]; message.messageConfig = h48 ? JSON.parse(h48) : undefined; break; case "route_config": const i48 = valueBucket[item]; message.routeConfig = i48 ? JSON.parse(i48) : undefined; break; case "robot_config": const j48 = valueBucket[item]; message.robotConfig = j48 ? JSON.parse(j48) : undefined; break; case "thread_root": const k48 = valueBucket[item]; message.threadRoot = k48 ? JSON.parse(k48) : undefined; break; case "thread_reply": const l48 = valueBucket[item]; message.threadReply = l48 ? JSON.parse(l48) : undefined; break; case "antispam_config": const m48 = valueBucket[item]; message.antispamConfig = m48 ? JSON.parse(m48) : undefined; break; case "push_config": const n48 = valueBucket[item]; message.pushConfig = n48 ? JSON.parse(n48) : undefined; break; case "ai_account_id": f48 = valueBucket[item]; break; case "ai_status": e48 = valueBucket[item]; break; case "status": message.isDeleted = valueBucket[item] > 0 ? true : false; break; case "read_receipt_state": message.messageStatus.readReceiptSent = (valueBucket[item] > 0) ? true : false; break; case "config_enable_unread": case "config_enable_last_message": default: break; } }); if (e48 !== undefined || f48 !== undefined) { message.aiConfig = { accountId: f48, aiStatus: e48 }; } return message; } generateBucket() { let valueBucket = {}; MESSAGE_TABLE.columns.forEach((item) => { switch (item) { case "client_id": valueBucket[item] = this.messageClientId; break; case "server_id": valueBucket[item] = this.messageServerId; break; case "create_time": valueBucket[item] = this.createTime; break; case "sender_id": valueBucket[item] = this.senderId; break; case "receiver_id": valueBucket[item] = this.receiverId; break; case "conversation_type": valueBucket[item] = this.conversationType; break; case "conversation_id": valueBucket[item] = this.conversationId; break; case "send_state": valueBucket[item] = this.sendingState === 3 ? V2NIMMessageSendingState .V2NIM_MESSAGE_SENDING_STATE_UNKNOWN : this.sendingState; break; case "message_type": valueBucket[item] = this.messageType; break; case "sub_type": if (this.subType !== undefined) { valueBucket[item] = this.subType; } break; case "text": if (this.text !== undefined) { valueBucket[item] = this.text; } break; case "modify_time": if (this.modifyTime !== undefined) { valueBucket[item] = this.modifyTime; } break; case "modify_account_id": if (this.modifyAccountId !== undefined) { valueBucket[item] = this.modifyAccountId; } break; case "attachment": valueBucket[item] = this.attachment?.raw; break; case "server_extension": if (this.serverExtension !== undefined) { valueBucket[item] = this.serverExtension; } break; case "is_self": valueBucket[item] = this.isSelf; break; case "local_extension": if (this.localExtension !== undefined) { valueBucket[item] = this.localExtension; } break; case "callback_extension": if (this.callbackExtension !== undefined) { valueBucket[item] = this.callbackExtension; } break; case "message_config": if (this.messageConfig !== undefined) { valueBucket[item] = JSON.stringify(this.messageConfig ?? {}); } break; case "route_config": if (this.routeConfig !== undefined) { valueBucket[item] = JSON.stringify(this.routeConfig ?? {}); } break; case "robot_config": if (this.robotConfig !== undefined) { valueBucket[item] = JSON.stringify(this.robotConfig ?? {}); } break; case "thread_root": valueBucket[item] = JSON.stringify(this.threadRoot); break; case "thread_root_id": if (this.threadRoot?.messageClientId !== undefined) { valueBucket[item] = this.threadRoot?.messageClientId; } break; case "thread_reply": valueBucket[item] = JSON.stringify(this.threadReply); break; case "thread_reply_id": if (this.threadRoot?.messageClientId !== undefined) { valueBucket[item] = this.threadRoot.messageClientId; } break; case "antispam_config": valueBucket[item] = JSON.stringify(this.antispamConfig); break; case "push_config": valueBucket[item] = JSON.stringify(this.pushConfig); break; case "ai_account_id": if (this.aiConfig?.accountId !== undefined) { valueBucket[item] = this.aiConfig?.accountId; } break; case "ai_status": if (this.aiConfig?.aiStatus !== undefined) { valueBucket[item] = this.aiConfig?.aiStatus; } break; case "read_receipt_state": if (this.messageStatus?.readReceiptSent !== undefined) { valueBucket[item] = this.messageStatus?.readReceiptSent; } break; case "config_enable_unread": const c48 = this.messageConfig?.unreadEnabled ?? true; valueBucket[item] = c48 ? EM_CONFIG_ENABLE_UNREAD.ON : EM_CONFIG_ENABLE_UNREAD.OFF; break; case "config_enable_last_message": const d48 = this.messageConfig?.lastMessageUpdateEnabled ?? true; valueBucket[item] = d48 ? EM_CONFIG_ENABLE_LAST_MESSAGE.ON : EM_CONFIG_ENABLE_LAST_MESSAGE.OFF; break; default: break; } }); return valueBucket; } implement(a48, b48) { this.messageClientId = a48.messageClientId; this.messageServerId = a48.messageServerId; this.createTime = a48.createTime; this.senderId = a48.senderId; this.receiverId = a48.receiverId; this.conversationType = a48.conversationType; this.conversationId = a48.conversationId; this.isSelf = a48.isSelf; this.sendingState = a48.sendingState; this.messageType = a48.messageType; this.modifyTime = a48.modifyTime; this.modifyAccountId = a48.modifyAccountId; this.text = a48.text; this.subType = a48.subType; this.serverExtension = a48.serverExtension; this.localExtension = a48.localExtension; this.callbackExtension = a48.callbackExtension; this._attachment = a48.attachment; this._antispamConfig = a48.antispamConfig ?? { antispamEnabled: true }; this._messageConfig = a48.messageConfig ?? { readReceiptEnabled: false, historyEnabled: true, roamingEnabled: true, onlineSyncEnabled: true, unreadEnabled: true, lastMessageUpdateEnabled: true, offlineEnabled: true }; this._pushConfig = a48.pushConfig ?? { pushEnabled: true, pushNickEnabled: true, forcePush: false, pushContent: '' }; this._routeConfig = a48.routeConfig ?? { routeEnabled: true }; if (b48 !== undefined && typeof b48.newMemberVisible === 'undefined') { b48.newMemberVisible = false; } this._targetConfig = b48; this._robotConfig = a48.robotConfig; this._threadRoot = a48.threadRoot; this._threadReply = a48.threadReply; this._aiConfig = a48.aiConfig; return this; } transform() { const z47 = {}; z47.messageClientId = this.messageClientId; z47.messageServerId = this.messageServerId; z47.createTime = this.createTime; z47.senderId = this.senderId; z47.receiverId = this.receiverId; z47.conversationType = this.conversationType; z47.conversationId = this.conversationId; z47.isSelf = this.isSelf; z47.attachmentUploadState = this.attachmentUploadState; z47.sendingState = this.sendingState; z47.messageType = this.messageType; z47.subType = this.subType; z47.text = this.text; z47.attachment = this.attachment; z47.serverExtension = this.serverExtension; z47.localExtension = this.localExtension; z47.callbackExtension = this.callbackExtension; z47.modifyTime = this.modifyTime; z47.modifyAccountId = this.modifyAccountId; z47.pushConfig = this.pushConfig; z47.routeConfig = this.routeConfig; z47.antispamConfig = this.antispamConfig; z47.robotConfig = this.robotConfig; z47.threadRoot = this.threadRoot; z47.threadReply = this.threadReply; z47.messageConfig = this.messageConfig; z47.aiConfig = this.aiConfig; z47.messageStatus = this.messageStatus; return z47; } formatAttachment(y47) { if (this.isIncludeAttachment(this.messageType) && y47) { try { this.attachment = JSON.parse(y47); this.formatAttachmentExt(); if (this.attachment) { this.attachment.raw = y47; } } catch (e) { this.attachment = {}; this.attachment.raw = y47; } } else if (y47) { this.attachment = {}; this.attachment.raw = y47; } } formatAttachmentExt() { const mediaTypes = [ V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO, V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO, V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE, V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE ]; if (mediaTypes.includes(this.messageType) && this.attachment) { const x47 = this.attachment; this.attachmentUploadState = x47.uploadState; x47.ext = x47.ext && x47.ext.indexOf('.') === -1 ? `.${x47.ext}` : x47.ext; if (typeof get(x47, 'w') !== 'undefined') { x47.width = get(x47, 'w'); unset(x47, 'w'); } if (typeof get(x47, 'h') !== 'undefined') { x47.height = get(x47, 'h'); unset(x47, 'h'); } if (typeof get(x47, 'dur') !== 'undefined') { x47.duration = get(x47, 'dur'); unset(x47, 'dur'); } set(x47, 'ext', x47.ext?.indexOf('.') === -1 ? `.${x47.ext}` : x47.ext); } else if (this.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_LOCATION) { const w47 = this.attachment; if (typeof get(w47, 'lat') !== 'undefined') { w47.latitude = get(w47, 'lat'); unset(w47, 'lat'); } if (typeof get(w47, 'lng') !== 'undefined') { w47.longitude = get(w47, 'lng'); unset(w47, 'lng'); } if (typeof get(w47, 'title') !== 'undefined') { w47.address = get(w47, 'title'); unset(w47, 'title'); } } else if (this.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL) { const v47 = this.attachment; v47.durations.map((duration) => { if (typeof get(duration, 'accid') !== 'undefined') { duration.accountId = get(duration, 'accid'); unset(duration, 'accid'); } }); } } isIncludeAttachment(type) { return type === V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE || type === V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO || type === V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO || type === V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE || type === V2NIMMessageType.V2NIM_MESSAGE_TYPE_LOCATION || type === V2NIMMessageType.V2NIM_MESSAGE_TYPE_NOTIFICATION || type === V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL; } } 