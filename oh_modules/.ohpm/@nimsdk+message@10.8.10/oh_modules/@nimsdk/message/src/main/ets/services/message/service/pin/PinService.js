import { cmdConfigMessagePin, cmdMapMessagePin, registerParser, V2NIMErrorCode, V2NIMErrorImpl, V2NIMMessagePinState, validate, validateConversationId } from '@nimsdk/base'; import { get } from '@nimsdk/vendor/'; import ConversationIdUtil from '../../utils/ConversationIdUtil'; import { transformMessage2Refer } from '../../utils/Tools'; import { msgReferRule, serverExtensionRule } from '../Rules'; import { PinCloud } from './PinCloud'; import { PinModel } from './PinModel'; const s41 = '[PinService]'; export class PinService { constructor(y62, z62) { this.core = y62; registerParser(y62, { cmdMap: cmdMapMessagePin, cmdConfig: cmdConfigMessagePin }); this.cloud = new PinCloud(y62); this.model = new PinModel(y62, z62); } async pinMessage(message, v62) { try { this.core.logger.info(s41, 'pinMessage', message, v62); validate(msgReferRule, message, 'message', true); validate(serverExtensionRule, { serverExtension: v62 }, '', true); const response = await this.cloud.pin(message, v62); const w62 = transformMessage2Refer(message); const x62 = { messageRefer: w62, createTime: response.createTime, updateTime: response.updateTime, operatorId: this.core.account, serverExtension: v62 }; await this.model.insert(x62); this.emitPinNotification(V2NIMMessagePinState.V2NIM_MESSAGE_PIN_STATE_PINNED, x62); } catch (e) { this.core.logger.error(s41, 'pinMessage', message, v62, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `pinMessage ${JSON.stringify(e)}`, rawError: e } }); } } } async unpinMessage(s62, t62) { try { this.core.logger.info(s41, 'unpinMessage', s62, t62); validate(msgReferRule, s62, 'messageRefer', true); validate(serverExtensionRule, { serverExtension: t62 }, '', true); const timestamp = await this.cloud.unpin(s62, t62); const u62 = { messageRefer: s62, serverExtension: t62, createTime: timestamp, updateTime: timestamp, operatorId: this.core.account }; await this.model.delete(u62); this.emitPinNotification(V2NIMMessagePinState.V2NIM_MESSAGE_PIN_STATE_NOT_PINNED, u62); } catch (e) { this.core.logger.error(s41, 'unpinMessage', s62, t62, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `unpinMessage ${JSON.stringify(e)}`, rawError: e } }); } } } async updatePinMessage(message, p62) { try { this.core.logger.info(s41, 'updatePinMessage', message, p62); validate(msgReferRule, message, 'message', true); validate(serverExtensionRule, { serverExtension: p62 }, '', true); const timestamp = await this.cloud.updatePin(message, p62); const q62 = await this.model.queryByClientId(message.conversationId, message.messageClientId); const r62 = { messageRefer: transformMessage2Refer(message), serverExtension: p62 ?? '', createTime: q62.createTime, updateTime: timestamp, operatorId: this.core.account }; await this.model.update(r62); this.emitPinNotification(V2NIMMessagePinState.V2NIM_MESSAGE_PIN_STATE_UPDATED, r62); } catch (e) { this.core.logger.error(s41, 'updatePinMessage', message, p62, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `updatePinMessage ${JSON.stringify(e)}`, rawError: e } }); } } } async getPinnedMessageList(n62) { try { this.core.logger.info(s41, 'getPinnedMessageList', n62); validateConversationId(this.core.account, n62); const timestamp = await this.model.getSyncTimestamp(n62); const o62 = await this.cloud.getPinnedList(n62, timestamp); if (o62.isChanged) { await this.model.deleteByConversationId(n62); if (o62.pinList.length > 0) { await this.model.insertList(o62.pinList); } return o62.pinList; } else { return await this.model.queryByConversationId(n62); } } catch (e) { this.core.logger.error(s41, 'getPinnedMessageList', n62, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getPinnedMessageList ${JSON.stringify(e)}`, rawError: e } }); } } } async onPinMessage(l62) { try { const m62 = this.pinMessageHandler(l62); await this.model.insert(m62); this.core.logger.info(s41, 'onPinMessage', m62); this.emitPinNotification(V2NIMMessagePinState.V2NIM_MESSAGE_PIN_STATE_PINNED, m62); } catch (e) { this.core.logger.error(s41, 'onPinMessage', l62, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getPinnedMessageList ${JSON.stringify(e)}`, rawError: e } }); } } } async onUnpinMessage(j62) { try { const k62 = this.pinMessageHandler(j62); await this.model.delete(k62); this.core.logger.info(s41, 'onUnpinMessage', k62); this.emitPinNotification(V2NIMMessagePinState.V2NIM_MESSAGE_PIN_STATE_NOT_PINNED, k62); } catch (e) { this.core.logger.error(s41, 'onUnpinMessage', j62, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getPinnedMessageList ${JSON.stringify(e)}`, rawError: e } }); } } } async onUpdateMessage(h62) { try { const i62 = this.pinMessageHandler(h62); await this.model.update(i62); this.core.logger.info(s41, 'onUpdateMessage', i62); this.emitPinNotification(V2NIMMessagePinState.V2NIM_MESSAGE_PIN_STATE_UPDATED, i62); } catch (e) { this.core.logger.error(s41, 'onUpdateMessage', h62, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getPinnedMessageList ${JSON.stringify(e)}`, rawError: e } }); } } } emitPinNotification(f62, g62) { const notification = { pinState: f62, pin: g62 }; this.core.messageService.emit('onMessagePinNotification', notification); } pinMessageHandler(b62) { const c62 = get(b62.content, 'msg'); const createTime = get(b62.content, 'pinInfo.createTime'); const updateTime = get(b62.content, 'pinInfo.updateTime'); const d62 = get(b62.content, 'pinInfo.accid'); const e62 = get(b62.content, 'pinInfo.serverExtension'); c62.conversationId = ConversationIdUtil.messageConversationId(this.core.account, c62.conversationType, c62.senderId, c62.receiverId); return { messageRefer: c62, serverExtension: e62 ?? '', createTime: createTime, updateTime: updateTime, operatorId: d62 }; } } 