import { cmdConfigMessageTranslate, cmdMapMessageTranslate, registerParser, V2NIMErrorCode, V2NIMErrorImpl, V2NIMStorageSceneConfig, validate } from '@nimsdk/base'; import { get } from '@nimsdk/vendor/'; import fs from '@ohos.file.fs'; import { VoiceToTextParams, VoiceToTextRequest } from '../../cloud/MessageRequest'; import { voiceToTextRule } from '../Rules'; const s41 = '[TranslateService]'; export class TranslateService { constructor(c68) { registerParser(c68, { cmdMap: cmdMapMessageTranslate, cmdConfig: cmdConfigMessageTranslate }); this.core = c68; } async voiceToText(params) { try { this.core.logger.info(s41, 'voiceToText', params); validate(voiceToTextRule, params, '', true); if (!params.voicePath && !params.voiceUrl) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'voiceToText: voicePath、voiceUrl、file cannot be empty at the same time' } }); } const x67 = params.voicePath; const mimeType = params.mimeType; const sampleRate = params.sampleRate; const duration = params.duration; const y67 = params.sceneName ?? V2NIMStorageSceneConfig.DEFAULT_IM(); let z67 = params.voiceUrl; if (!params.voiceUrl && x67) { const file = fs.openSync(x67); const result = await this.core.httpService.uploadFile({ file: file, nosScenes: y67 }); z67 = result.url; } const a68 = new VoiceToTextParams(z67, duration, mimeType, sampleRate); const b68 = await this.core.sendCmd('v2VoiceToText', new VoiceToTextRequest(a68)); const result = get(b68.content, 'data'); this.core.logger.info(s41, 'voiceToText result', result); return result; } catch (e) { this.core.logger.error(s41, 'voiceToText', params, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `voiceToText ${JSON.stringify(e)}`, rawError: e } }); } } } } 