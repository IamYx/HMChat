import { cmdConfigMessageComment, cmdMapMessageComment, registerParser, V2NIMErrorCode, V2NIMErrorImpl, V2NIMLoginStatus, V2NIMMessageQuickCommentType, validate } from '@nimsdk/base'; import { completeMessageRefer, formatMessageRefer, onQuickCommentNotificationHandler } from '../../utils/Format'; import { getQuickCommentRule, msgReferRule, quickCommentRule } from '../Rules'; import { CommentCloud } from './CommentCloud'; import { CommentModel, QuickCommentMessage } from './CommentModel'; const s41 = '[CommentService]'; export class CommentService { constructor(i52, j52) { this.core = i52; registerParser(i52, { cmdMap: cmdMapMessageComment, cmdConfig: cmdConfigMessageComment }); this.model = new CommentModel(i52, j52); this.cloud = new CommentCloud(i52); } async addQuickComment(message, index, f52, g52) { try { this.core.logger.info(s41, 'addQuickComment', message, index, f52, g52); validate(quickCommentRule, { message: message, index: index, serverExtension: f52, pushConfig: g52 }, '', true); const timestamp = await this.cloud.addQuickComment(message, index, f52, g52); const h52 = { messageRefer: formatMessageRefer(this.core, message), createTime: timestamp, index: index, serverExtension: f52 ?? '', operatorId: this.core.account }; await this.model.addComment(h52); this.core.preferenceSync.put(`${message.conversationId}_${message.messageClientId}`, timestamp); const notification = { operationType: V2NIMMessageQuickCommentType.V2NIM_QUICK_COMMENT_STATE_ADD, quickComment: h52 }; this.core.messageService.emit('onMessageQuickCommentNotification', notification); } catch (e) { this.core.logger.error(s41, 'addQuickComment', message, index, f52, g52, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `addQuickComment ${JSON.stringify(e)}`, rawError: e } }); } } } async removeQuickComment(b52, index, c52) { try { this.core.logger.info(s41, 'removeQuickComment', b52, index, c52); validate(msgReferRule, b52, 'messageRefer', true); validate({ index: { type: 'number', min: 1 } }, { index: index }, '', true); validate({ serverExtension: { type: 'string', required: false } }, { serverExtension: c52 }, '', true); const d52 = await this.cloud.removeQuickComment(b52, index, c52); const e52 = { messageRefer: formatMessageRefer(this.core, b52), createTime: d52, index: index, serverExtension: c52 || '', operatorId: this.core.account }; const notification = { operationType: V2NIMMessageQuickCommentType.V2NIM_QUICK_COMMENT_STATE_REMOVE, quickComment: e52 }; this.core.preferenceSync.put(`${b52.conversationId}_${b52.messageClientId}`, d52); this.model.removeComment(e52); this.core.messageService.emit('onMessageQuickCommentNotification', notification); } catch (e) { this.core.logger.error(s41, 'removeQuickComment', b52, index, c52, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `removeQuickComment ${JSON.stringify(e)}`, rawError: e } }); } } } async getQuickCommentList(q51) { try { this.core.logger.info(s41, 'getQuickCommentList', q51); validate(getQuickCommentRule, { messages: q51 }, '', true); if (this.core.loginService.getLoginStatus() !== V2NIMLoginStatus.V2NIM_LOGIN_STATUS_LOGINED) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE }); } const r51 = []; const s51 = []; for (const message of q51) { let a52 = await this.core.syncService.getRoamingMessageSyncTimestamp(); let timestamp = this.core.preferenceSync.get(`${message.conversationId}_${message.messageClientId}`, 0); if (timestamp === undefined || timestamp <= a52) { r51.push(message); } else { s51.push(message); } } const t51 = {}; if (r51.length > 0) { const v51 = r51.map(element => { const y51 = formatMessageRefer(this.core, element); const timestamp = this.core.preferenceSync.get(`${y51.conversationId}_${y51.messageClientId}`, 0); const z51 = new QuickCommentMessage(y51, timestamp); return z51; }); const w51 = await this.cloud.getQuickCommentList(v51); for (const element of w51) { this.core.preferenceSync.put(`${element.messageRefer.conversationId}_${element.messageRefer .messageClientId}`, element.createTime); if (element.modified) { this.model.removeAllComment(element.messageRefer.messageClientId); element.details.forEach((item) => this.model.addComment(item)); t51[element.messageRefer.messageClientId] = element.details; } else { const x51 = await this.model.queryAllComment(element.messageRefer.messageClientId); x51.map(comment => { comment.messageRefer = element.messageRefer; }); t51[element.messageRefer.messageClientId] = x51; } } } for (const message of s51) { let u51 = await this.model.queryAllComment(message.messageClientId); u51.map(comment => { comment.messageRefer = completeMessageRefer(this.core, message); }); t51[message.messageClientId] = u51; } this.core.logger.info(s41, 'getQuickCommentList result', t51); return t51; } catch (e) { this.core.logger.error(s41, 'getQuickCommentList', q51, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getQuickCommentList ${JSON.stringify(e)}`, rawError: e } }); } } } async onAddQuickComment(o51) { try { this.core.logger.info(s41, 'onAddQuickComment', o51); const p51 = onQuickCommentNotificationHandler(this.core, o51, V2NIMMessageQuickCommentType .V2NIM_QUICK_COMMENT_STATE_ADD); this.core.preferenceSync.put(`${p51.quickComment.messageRefer.conversationId}_${p51.quickComment.messageRefer.messageClientId}`, p51.quickComment.createTime); this.core.logger.info(s41, 'onAddQuickComment res', p51); await this.model.addComment(p51.quickComment); this.core.messageService.emit('onMessageQuickCommentNotification', p51); } catch (e) { this.core.logger.error(s41, 'onAddQuickComment', o51, e); } } async onRemoveQuick(m51) { try { this.core.logger.info(s41, 'onRemoveQuick', m51); const n51 = onQuickCommentNotificationHandler(this.core, m51, V2NIMMessageQuickCommentType .V2NIM_QUICK_COMMENT_STATE_REMOVE); this.core.preferenceSync.put(`${n51.quickComment.messageRefer.conversationId}_${n51.quickComment.messageRefer.messageClientId}`, n51.quickComment.createTime); await this.model.removeComment(n51.quickComment); this.core.logger.info(s41, 'onRemoveQuick res', n51); this.core.messageService.emit('onMessageQuickCommentNotification', n51); } catch (e) { this.core.logger.error(s41, 'onRemoveQuick', m51, e); } } } 