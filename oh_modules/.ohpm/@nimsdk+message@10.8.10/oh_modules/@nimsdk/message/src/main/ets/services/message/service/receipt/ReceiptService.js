import { cmdConfigMessageReceipt, cmdMapMessageReceipt, registerParser, V2NIMConversationType, V2NIMErrorCode, V2NIMErrorImpl, validate, validateConversationId, ValidateErrorV2 } from '@nimsdk/base'; import { get } from '@nimsdk/vendor/'; import ConversationIdUtil from '../../utils/ConversationIdUtil'; import { getConversationType } from '../../utils/Tools'; import { getTeamMessageReceiptsDetailRule, getTeamMessageReceiptsRule, sendP2PMessageReceiptRule, sendTeamMessageReceiptsRule } from '../Rules'; import { ReceiptCloud } from './ReceiptCloud'; import { ReceiptModel } from './ReceiptModel'; const s41 = '[ReceiptService]'; export class ReceiptService { constructor(f64, table) { this.core = f64; registerParser(f64, { cmdMap: cmdMapMessageReceipt, cmdConfig: cmdConfigMessageReceipt }); this.cloud = new ReceiptCloud(f64); this.model = new ReceiptModel(f64, table); } async sendP2PMessageReceipt(message) { try { this.core.logger.info(s41, 'sendP2PMessageReceipt', message); validate(sendP2PMessageReceiptRule, message, '', true); if (message.senderId === this.core.account) { throw new ValidateErrorV2({ detail: { reason: `sendP2PMessageReceipt. sender: ${message.senderId} is not allowed to send msg receipt` } }); } const e64 = this.model.getP2PMessageReceiptTime(message.conversationId); if (e64 < message.createTime) { await this.cloud.sendP2PMessageReceipt(message); this.model.setP2PMessageReceiptTime(message.conversationId, message.createTime); } } catch (e) { this.core.logger.error(s41, 'sendP2PMessageReceipt', message, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `sendP2PMessageReceipt ${JSON.stringify(e)}`, rawError: e } }); } } } isPeerRead(message) { this.core.logger.info(s41, 'isPeerRead', message); if (message.conversationType !== V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) { return false; } if (message.senderId !== this.core.account) { return false; } if (message.senderId === this.core.account && message.receiverId === this.core.account) { return true; } const c64 = ConversationIdUtil.messageConversationId(this.core.account, message.conversationType, message.senderId, message.receiverId); const timestamp = this.model.getP2PMessageReceiptTime(c64); const d64 = message.createTime <= timestamp; this.core.logger.info(s41, 'isPeerRead', message, d64); return d64; } async getP2PMessageReceipt(a64) { try { this.core.logger.info(s41, 'getP2PMessageReceipt', a64); validateConversationId(this.core.account, a64); const b64 = getConversationType(a64); if (b64 !== V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'getP2PMessageReceipt: conversationId is not p2p conversationId' } }); } const timestamp = this.model.getP2PMessageReceiptTime(a64); return { conversationId: a64, timestamp: timestamp }; } catch (e) { this.core.logger.error(s41, 'getP2PMessageReceipt', a64, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getP2PMessageReceipt ${JSON.stringify(e)}`, rawError: e } }); } } } async getTeamMessageReceipts(y63) { try { this.core.logger.info(s41, 'getTeamMessageReceipts', y63); validate(getTeamMessageReceiptsRule, { messages: y63 }, '', true); if (y63.some((message) => message.senderId !== this.core.account)) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'getTeamMessageReceipts: exist messages senderId is not current user' } }); } if (y63.some((message) => message.receiverId !== y63[0].receiverId)) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_MISUSE, detail: { reason: 'getTeamMessageReceipts: exist messages receiverId is not same' } }); } const z63 = await this.cloud.getTeamMessageReceipts(y63); return z63; } catch (e) { this.core.logger.error(s41, 'getTeamMessageReceipts', y63, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getTeamMessageReceipts ${JSON.stringify(e)}`, rawError: e } }); } } } async getTeamMessageReceiptDetail(message, x63) { try { this.core.logger.info(s41, 'getTeamMessageReceiptDetail', message, x63); validate(getTeamMessageReceiptsDetailRule, { message: message }, '', true); if (message.senderId !== this.core.account) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `getTeamMessageReceiptDetail::senderId ${message.senderId} incorrect` } }); } const detail = this.cloud.getTeamMessageReceiptDetail(message); return detail; } catch (e) { this.core.logger.error(s41, 'getTeamMessageReceiptDetail', message, x63, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getTeamMessageReceiptDetail ${JSON.stringify(e)}`, rawError: e } }); } } } async sendTeamMessageReceipts(v63) { try { this.core.logger.info(s41, 'sendTeamMessageReceipts', v63); validate(sendTeamMessageReceiptsRule, { messages: v63 }, '', true); if (v63.some((message) => message.senderId === this.core.account)) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'sendTeamMessageReceipts: exist messages senderId is not current user' } }); } if (v63.some((message) => message.receiverId !== v63[0].receiverId)) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_MISUSE, detail: { reason: 'sendTeamMessageReceipts: exist messages receiverId is not same' } }); } await this.cloud.sendTeamMessageReceipts(v63); const w63 = v63.map(item => item.messageClientId); await this.model.updateTeamMessageReceiptState(w63); } catch (e) { this.core.logger.error(s41, 'sendTeamMessageReceipts', v63, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `sendTeamMessageReceipts ${JSON.stringify(e)}`, rawError: e } }); } } } onP2PMessageReceiptsHandler(t63) { this.core.logger.info(s41, 'onP2PMessageReceiptsHandler', t63); const u63 = this.core.conversationIdUtil.p2pConversationId(get(t63.content, 'data.senderId')); const timestamp = get(t63.content, 'data.createTime'); this.core.logger.info(s41, `onP2PMessageReceiptsHandler ${u63} ${timestamp} }`); this.model.setP2PMessageReceiptTime(u63, timestamp); this.core.syncService.updateSyncTimestamp2(timestamp, 'msgReceipts'); this.core.messageService.emit('onReceiveP2PMessageReadReceipts', [{ conversationId: u63, timestamp: timestamp } ]); } onTeamMessageReceiptsHandler(p63) { this.core.logger.info(s41, 'onTeamMessageReceiptsHandler', p63); const q63 = get(p63.content, 'data').map((r63) => { const s63 = this.core.conversationIdUtil.teamConversationId(r63.receiverId); return { conversationId: s63, messageServerId: r63.messageServerId, messageClientId: r63.messageClientId, readCount: r63.readCount, unreadCount: r63.unreadCount, latestReadAccount: r63.latestReadAccount }; }); this.core.messageService.emit('onReceiveTeamMessageReadReceipts', q63); } async syncP2PMessageReceiptsHandler(l63) { this.core.logger.info(s41, 'syncP2PMessageReceiptsHandler', l63); const m63 = get(l63.content, 'data').map((item) => { const o63 = this.core.conversationIdUtil.p2pConversationId(item.senderId); const timestamp = item.createTime; this.model.setP2PMessageReceiptTime(o63, timestamp); return { conversationId: o63, timestamp: timestamp }; }); const n63 = get(l63.content, 'timetag'); await this.core.syncService.updateSyncTimestamp2(n63, 'msgReceipts'); this.core.messageService.emit('onReceiveP2PMessageReadReceipts', m63); } } 