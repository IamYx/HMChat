import { cmdConfigMessageModify, cmdMapMessageModify, registerParser, V2NIMClientAntispamOperateType, V2NIMConversationType, V2NIMErrorCode, V2NIMErrorImpl, V2NIMLoginStatus, V2NIMMessageType, validate } from '@nimsdk/base'; import { get } from '@nimsdk/vendor'; import { V2NIMMessageModel } from '../../model/V2NIMMessageModel'; import { callAttachmentToRaw, completeMessage, locationAttachmentToRaw, mediaAttachmentToRaw, prepareModifyMessage } from '../../utils/Format'; import { modifyMessageParamsRules, modifyMessageRules } from '../Rules'; import { ModifyCloud } from './ModifyCloud'; import { ModifyModel } from './ModifyModel'; const s41 = '[ModifyService]'; export class ModifyService { constructor(b60, table) { this.core = b60; registerParser(b60, { cmdMap: cmdMapMessageModify, cmdConfig: cmdConfigMessageModify }); this.model = new ModifyModel(b60, table); this.cloud = new ModifyCloud(b60); } async modifyMessage(message, params) { try { this.core.logger.info(s41, 'modifyMessage', message, params); if (this.core.loginService.getLoginStatus() !== V2NIMLoginStatus.V2NIM_LOGIN_STATUS_LOGINED) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE }); } validate(modifyMessageRules, message, 'message', true); validate(modifyMessageParamsRules, params, 'params', true); this.checkIfModify(message, params); const w59 = prepareModifyMessage(message, params); const model = new V2NIMMessageModel().implement(w59); const x59 = await this.model.queryMessage(message.messageClientId); if (x59 !== undefined) { const y59 = await this.clientAntispam(model, params); if (y59.clientAntispamResult?.operateType === V2NIMClientAntispamOperateType.V2NIM_CLIENT_ANTISPAM_OPERATE_CLIENT_SHIELD) { return { errorCode: V2NIMErrorCode.V2NIM_ERROR_CODE_CLIENT_ANTISPAM, antispamResult: y59.antispamResult, clientAntispamResult: y59.clientAntispamResult }; } else if (y59.clientAntispamResult?.operateType === V2NIMClientAntispamOperateType.V2NIM_CLIENT_ANTISPAM_OPERATE_SERVER_SHIELD) { y59.clientAntispamHit = true; } const response = await this.cloud.modifyMessage(y59); if (y59.clientAntispamHit && y59.clientAntispamResult?.operateType === V2NIMClientAntispamOperateType.V2NIM_CLIENT_ANTISPAM_OPERATE_SERVER_SHIELD) { return { errorCode: V2NIMErrorCode.V2NIM_ERROR_CODE_CLIENT_ANTISPAM, clientAntispamResult: y59.clientAntispamResult }; } if (response.antispamResult) { return { errorCode: V2NIMErrorCode.V2NIM_ERROR_CODE_SERVER_ANTISPAM, message: response.message, antispamResult: response.antispamResult, clientAntispamResult: response.clientAntispamResult }; } const updateTime = response.message.modifyTime; if (y59.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P || y59.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) { this.core.syncService.updateSyncTimestamp2(updateTime, 'p2pTeamModifyMessage'); } else if (y59.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM) { this.core.syncService.updateSyncTimestamp2(updateTime, 'superTeamModifyMessage'); } await this.model.updateModifyMessage(response.message); const z59 = await this.model.queryMessage(response.message.messageClientId); if (typeof z59 !== 'undefined') { const a60 = z59.transform(); this.core.localConversationService.onMessagesModify([a60]); return { errorCode: 200, message: a60, antispamResult: response.antispamResult, clientAntispamResult: y59.clientAntispamResult }; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `invalid parameter, message does not exist` } }); } } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `invalid parameter, message does not exist` } }); } } catch (e) { this.core.logger.error(s41, 'modifyMessage', message, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `isSavedMessage ${JSON.stringify(e)}`, rawError: e } }); } } } async onModifiedHandler(t59) { const message = completeMessage(this.core, get(t59.content, 'data')); const u59 = await this.model.queryMessage(message.messageClientId); if (u59 !== undefined) { await this.model.updateModifyMessage(message); const updateTime = message.modifyTime; if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P || message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) { this.core.syncService.updateSyncTimestamp2(updateTime, 'p2pTeamModifyMessage'); } else if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM) { this.core.syncService.updateSyncTimestamp2(updateTime, 'superTeamModifyMessage'); } const v59 = await this.model.queryMessage(message.messageClientId); this.core.localConversationService.onMessagesModify([v59?.transform()]); this.core.messageService.emit('onReceiveMessagesModified', [v59?.transform()]); } } async onSyncModifiedHandler(m59) { const n59 = await m59.content.u1.map((data) => { return completeMessage(this.core, data); }).filter(async (msg) => { const q59 = await this.model.getModifyTime(msg.messageClientId); const r59 = msg.modifyTime || 0; const s59 = await this.model.queryMessage(msg.messageServerId); return r59 > q59 && s59 !== undefined; }); if (n59.length > 0) { n59.map(message => { const updateTime = message.modifyTime; if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P || message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) { this.core.syncService.updateSyncTimestamp2(updateTime, 'p2pTeamModifyMessage'); } else if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM) { this.core.syncService.updateSyncTimestamp2(updateTime, 'superTeamModifyMessage'); } }); const o59 = []; for (const message of n59) { await this.model.updateModifyMessage(message); const model = await this.model.queryMessage(message.messageClientId); if (model) { const p59 = model.transform(); o59.push(p59); } } if (o59.length > 0) { this.core.localConversationService.onMessagesModify(o59); this.core.messageService.emit('onReceiveMessagesModified', o59); } } } checkIfModify(message, params) { if (message.messageServerId === '0') { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'modifyMessage: messageServerId cannot be empty' } }); } if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P && message.senderId !== this.core.account) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'modifyMessage: senderId should be self' } }); } if (![ V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT, V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE, V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO, V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO, V2NIMMessageType.V2NIM_MESSAGE_TYPE_LOCATION, V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE, V2NIMMessageType.V2NIM_MESSAGE_TYPE_TIPS, V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL, V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM ].includes(message.messageType)) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `modifyMessage: messageType ${message.messageType} not correct` } }); } if ([ V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT, V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE, V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO, V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO, V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE, V2NIMMessageType.V2NIM_MESSAGE_TYPE_TIPS, V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL ].includes(message.messageType) && params.attachment) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `modifyMessage: messageType ${message.messageType} can not modify attachment` } }); } const h59 = ['subType', 'text', 'serverExtension', 'attachment']; const i59 = h59.some((key) => typeof get(params, key) !== 'undefined'); if (!i59) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'modifyMessage: missing modified params' } }); } const j59 = h59.every((key) => { if (key === 'attachment') { if (message.attachment && params.attachment) { const k59 = attachmentToRaw(message.messageType, message.attachment); const l59 = attachmentToRaw(message.messageType, params.attachment); return k59 === l59; } else if (params.attachment) { return false; } else { return true; } } return get(message, key) === get(params, key); }); if (j59) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'modifyMessage: no change' } }); } } async clientAntispam(message, params) { this.core.logger.info(s41, 'clientAntispam', message, params); let f59; const g59 = message.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT || message.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_TIPS; if (params?.clientAntispamEnabled && g59 && message.text) { f59 = this.core.clientAntispamUtil.checkTextAntispam(message.text, params?.clientAntispamReplace); message.clientAntispamHit = false; switch (f59.operateType) { case V2NIMClientAntispamOperateType.V2NIM_CLIENT_ANTISPAM_OPERATE_REPLACE: message.text = f59.replacedText; break; case V2NIMClientAntispamOperateType.V2NIM_CLIENT_ANTISPAM_OPERATE_SERVER_SHIELD: case V2NIMClientAntispamOperateType.V2NIM_CLIENT_ANTISPAM_OPERATE_CLIENT_SHIELD: break; } } message.clientAntispamResult = f59; return message; } } export function attachmentToRaw(messageType, e59) { if (!e59) { return ''; } switch (messageType) { case V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM: return e59.raw || ''; case V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE: case V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO: case V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO: case V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE: return mediaAttachmentToRaw(e59); case V2NIMMessageType.V2NIM_MESSAGE_TYPE_LOCATION: return locationAttachmentToRaw(e59); case V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL: return callAttachmentToRaw(e59); default: return e59.raw || JSON.stringify(e59); } } 