import { V2NIMConversationType, V2NIMMessageType } from '@nimsdk/base'; import { cloneDeep, set, unset } from '@nimsdk/vendor/Index'; export function transformMessage2Refer(message) { const a76 = { messageClientId: message.messageClientId, messageServerId: message.messageServerId, senderId: message.senderId, receiverId: message.receiverId, createTime: message.createTime, conversationId: message.conversationId, conversationType: message.conversationType }; return a76; } export function getConversationId(x75, account, y75, z75) { if (x75 === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) { return y75 === account ? p2pConversationId(account, z75) : p2pConversationId(account, y75); } else if (x75 === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) { return teamConversationId(account, z75); } else { return superTeamConversationId(account, z75); } } export function getReceiveId(u75) { let v75 = u75.split('|').map(item => item.trim()); let w75 = v75[2]; return w75; } export function getConversationType(s75) { const t75 = s75.split('|').map(item => item.trim()); if (t75.length !== 3 || t75[0].length === 0 || t75[2].length === 0) { return V2NIMConversationType.V2NIM_CONVERSATION_TYPE_UNKNOWN; } const type = t75[1]; switch (type) { case '1': return V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P; case '2': return V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM; case '3': return V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM; default: return V2NIMConversationType.V2NIM_CONVERSATION_TYPE_UNKNOWN; } } export function getConversationTargetId(q75) { const r75 = q75.split('|').map(item => item.trim()); if (r75.length < 3) { return ''; } const targetId = r75[2]; if (!targetId) { return ''; } return targetId; } function p2pConversationId(account, p75) { return `${account}|${V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P}|${p75}`; } export function teamConversationId(account, o75) { return `${account}|${V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM}|${o75}`; } function superTeamConversationId(account, n75) { return `${account}|${V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM}|${n75}`; } export function receiveIdBySenderId(k75, l75, account) { const targetId = getConversationTargetId(l75); let m75 = ''; const type = getConversationType(l75); switch (type) { case V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P: if (k75 === targetId) { m75 = account; } else { m75 = targetId; } break; case V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM: case V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM: m75 = targetId; break; default: break; } return m75; } export function compatibleAttachmentRawWithV1(c75, messageType) { const d75 = cloneDeep(c75); if (messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL) { const j75 = d75; j75.durations.map((duration) => { set(duration, 'accid', duration.accountId); unset(duration, 'accountId'); }); } else if (messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_LOCATION) { const i75 = d75; set(i75, 'lat', i75.latitude); set(i75, 'lng', i75.longitude); set(i75, 'title', i75.address); unset(i75, 'latitude'); unset(i75, 'longitude'); unset(i75, 'address'); } else if (messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE) { const h75 = d75; set(h75, 'h', h75.height); set(h75, 'w', h75.width); set(h75, 'ext', h75.ext?.startsWith('.') ? h75.ext.substring(1) : h75.ext); unset(h75, 'height'); unset(h75, 'width'); } else if (messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO) { const g75 = d75; set(g75, 'h', g75.height); set(g75, 'w', g75.width); set(g75, 'dur', g75.duration); set(g75, 'ext', g75.ext?.startsWith('.') ? g75.ext.substring(1) : g75.ext); unset(g75, 'height'); unset(g75, 'width'); unset(g75, 'duration'); } else if (messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO) { const f75 = d75; set(f75, 'dur', f75.duration); unset(f75, 'duration'); set(f75, 'ext', f75.ext?.startsWith('.') ? f75.ext.substring(1) : f75.ext); } else if (messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE) { const e75 = d75; set(e75, 'ext', e75.ext?.startsWith('.') ? e75.ext.substring(1) : e75.ext); } return JSON.stringify(d75, (key, value) => { if (key === 'raw') { return undefined; } return value; }); } 