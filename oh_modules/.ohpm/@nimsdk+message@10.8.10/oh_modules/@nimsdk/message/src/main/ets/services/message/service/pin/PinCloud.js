import { V2NIMConversationType } from '@nimsdk/base'; import { get } from '@nimsdk/vendor/'; import { GetPinMessageListRequest } from '../../cloud/MessageRequest'; export class PinCloud { constructor(f61) { this.core = f61; } async pin(message, c61) { const d61 = {}; d61.msg = message; d61.msgPin = {}; d61.msgPin.serverExtension = c61; const e61 = await this.core.sendCmd('v2PinMessage', d61); const createTime = get(e61, 'content.timetag'); const updateTime = get(e61, 'content.timetag'); return { createTime: createTime, updateTime: updateTime }; } async unpin(y60, z60) { const a61 = {}; a61.msg = y60; a61.msgPin = {}; a61.msgPin.serverExtension = z60; const b61 = (await this.core.sendCmd('v2UnpinMessage', a61)); return get(b61, 'content.timetag'); } async updatePin(message, v60) { const w60 = {}; w60.msg = message; w60.msgPin = {}; w60.msgPin.serverExtension = v60; const x60 = (await this.core.sendCmd('v2UpdatePinMessage', w60)); return get(x60, 'content.timetag'); } async getPinnedList(p60, timestamp) { const q60 = {}; q60.conversationId = this.convertConversationId(p60); q60.timetag = timestamp; const r60 = await this.core.sendCmd('v2GetPinMessageList', new GetPinMessageListRequest(q60)); const time = get(r60, 'content.timetag'); const s60 = get(r60, 'content.changed'); const t60 = get(r60, 'content.data'); t60.forEach((u60) => { u60.messageRefer.conversationId = p60; }); return { timestamp: time, isChanged: s60, pinList: t60 }; } convertConversationId(n60) { const type = this.core.conversationIdUtil.parseConversationType(n60); const targetId = this.core.conversationIdUtil.parseConversationTargetId(n60); const o60 = type === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P ? 'p2p' : type === V2NIMConversationType .V2NIM_CONVERSATION_TYPE_TEAM ? 'team' : 'super_team'; return `${o60}|${targetId}`; } } 