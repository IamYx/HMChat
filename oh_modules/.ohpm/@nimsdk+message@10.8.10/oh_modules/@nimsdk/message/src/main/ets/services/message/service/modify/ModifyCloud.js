import { V2NIMConversationType, V2NIMErrorCode, V2NIMErrorImpl, ValidateErrorV2 } from "@nimsdk/base"; import { get } from "@nimsdk/vendor"; import { SendMessageRequest } from "../../cloud/MessageRequest"; import { formatModifyMessage } from "../../utils/Format"; const s41 = '[ModifyCloud]'; export class ModifyCloud { constructor(a59) { this.core = a59; } async modifyMessage(message) { try { let cmd; if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) { cmd = 'v2MessageP2pModify'; } else if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) { cmd = 'v2MessageTeamModify'; } else if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM) { cmd = 'v2MessageSuperTeamModify'; } else { throw new ValidateErrorV2({ detail: { reason: `conversationType: ${message.conversationType} is not supported` } }); } const sendMessage = new SendMessageRequest(message); const x58 = await this.core.sendCmd(cmd, sendMessage); const y58 = get(x58.content.data, 'antispamResult'); const z58 = formatModifyMessage(message.transform(), x58); return { message: z58, antispamResult: y58 }; } catch (e) { this.core.logger.error(s41, 'modifyMessage', message, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `modifyMessage ${JSON.stringify(e)}`, rawError: e } }); } } } } 