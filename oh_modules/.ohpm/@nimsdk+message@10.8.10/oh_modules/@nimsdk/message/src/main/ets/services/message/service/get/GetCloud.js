import { V2NIMConversationType, V2NIMErrorCode, V2NIMErrorImpl, V2NIMQueryDirection, V2NIMSortOrder } from '@nimsdk/base'; import { get } from '@nimsdk/vendor/'; import { completeMessage } from '../../utils/Format'; import { GetMessageListByRefersRequest, GetMessageListRequest, GetThreadMessageListRequest, GetThreadMessageListTag, SearchCloudMessagesRequest } from '../../cloud/MessageRequest'; import { getConversationTargetId, getConversationType } from '../../utils/Tools'; const s41 = '[GetCloud]'; export class GetCloud { constructor(g55) { this.core = g55; } async getMessageList(option) { const y54 = getConversationType(option.conversationId); const to = getConversationTargetId(option.conversationId); let z54 = option.beginTime || 0; let endTime = option.endTime || 0; if (z54 !== 0 && endTime !== 0 && z54 > endTime) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'getMessageList: beginTime cannot be greater than endTime' } }); } const direction = option.direction ?? V2NIMQueryDirection.V2NIM_QUERY_DIRECTION_DESC; if (option.anchorMessage) { const e55 = option.anchorMessage.createTime; if (option.direction === V2NIMQueryDirection.V2NIM_QUERY_DIRECTION_DESC) { if (endTime === 0) { endTime = e55; } else if (endTime !== e55) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'getMessageList: When providing anchorMessage, when sorting in descending order, endTime does not need to be provided, or endTime should be equal to anchorMessage.createTime' } }); } } else { const f55 = option.anchorMessage.createTime; if (z54 === 0) { z54 = f55; } else if (z54 !== f55) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'getMessageList: When providing anchorMessage, when sorting in ascending order, there is no need to provide beginTime, or beginTime should be equal to anchorMessage.createTime' } }); } } } const a55 = option.anchorMessage?.messageServerId; let cmd = 'v2GetMessageList'; if (y54 === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) { cmd = 'v2GetTeamMessageList'; } else if (y54 === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM) { cmd = 'v2GetSuperTeamMessageList'; } const b55 = new GetMessageListRequest(z54, endTime, a55 ? parseInt(a55) : 0, option.limit || 50, option.messageTypes ? option.messageTypes.slice() : [], to, direction); const c55 = await this.core.sendCmd(cmd, b55); let d55 = get(c55.content, 'msgs'); return d55; } async getMessageListByRefers(v54) { let w54 = []; const x54 = (await this.core.sendCmd('v2GetMessageListByRefers', new GetMessageListByRefersRequest(v54))); w54 = get(x54.content, 'msgs'); return w54; } async searchCloudMessages(params) { params.beginTime = params.beginTime || 0; params.endTime = params.endTime || 0; if (params.beginTime !== 0 && params.endTime !== 0 && params.beginTime > params.endTime) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'searchCloudMessages: beginTime cannot be greater than endTime' } }); } params.sortOrder = typeof params.sortOrder === 'undefined' ? V2NIMSortOrder.V2NIM_SORT_ORDER_DESC : params.sortOrder; params.conversationLimit = params.conversationLimit || 0; params.messageLimit = params.messageLimit || 10; const cmd = params.conversationLimit > 0 ? 'v2SearchCloudMessagesGroupByConversation' : 'v2SearchCloudMessages'; const t54 = await this.core.sendCmd(cmd, new SearchCloudMessagesRequest(params)); return get(t54.content, 'data').map((u54) => { return completeMessage(this.core, u54); }); } async getThreadMessageList(option) { const reverse = option.direction === V2NIMQueryDirection.V2NIM_QUERY_DIRECTION_ASC ? 1 : 0; const request = new GetThreadMessageListRequest(option.messageRefer, new GetThreadMessageListTag(option.beginTime, option.endTime, option.limit, reverse, option .excludeMessageServerId)); const n54 = (await this.core.sendCmd('v2GetThreadMessageList', request)); const message = get(n54.content, 'message'); const o54 = completeMessage(this.core, message); const p54 = this.core.messageService.v2IProcessMessageAttachment(o54); const timestamp = get(n54.content, 'replyResult.timestamp'); const q54 = get(n54.content, 'replyResult.total'); const r54 = get(n54.content, 'replyList').map((s54) => { const message = completeMessage(this.core, s54); return this.core.messageService.v2IProcessMessageAttachment(message); }); return { message: p54, timestamp: timestamp, replyCount: q54, replyList: r54 }; } } 