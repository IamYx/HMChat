import { get } from '@nimsdk/vendor/'; import { GetTeamMessageReceiptDetailRequest, GetTeamMessageReceiptsRequest, SendP2PMessageReceiptRequest, SendReceiptParams, SendTeamMessageReceiptsRequest } from '../../cloud/MessageRequest'; import { teamConversationId } from '../../utils/Tools'; export class ReceiptCloud { constructor(g63) { this.core = g63; } async sendP2PMessageReceipt(message) { const params = new SendReceiptParams(message.senderId, message.messageClientId, message.createTime); await this.core.sendCmd('v2SendP2PMessageReceipt', new SendP2PMessageReceiptRequest(params)); } async getTeamMessageReceipts(e63) { const f63 = (await this.core.sendCmd('v2GetTeamMessageReceipts', new GetTeamMessageReceiptsRequest(e63))); return get(f63.content, 'data').map((msg) => { return { conversationId: teamConversationId(this.core.account, msg.receiverId), messageServerId: msg.messageServerId, readCount: msg.readCount, unreadCount: msg.unreadCount, messageClientId: msg.messageClientId, latestReadAccount: msg.latestReadAccount }; }); } async getTeamMessageReceiptDetail(message) { const d63 = await this.core.sendCmd('v2GetTeamMessageReceiptDetail', new GetTeamMessageReceiptDetailRequest(message)); return { readReceipt: { conversationId: teamConversationId(this.core.account, message.receiverId), messageClientId: message.messageClientId, messageServerId: message.messageServerId, readCount: get(d63.content, 'readAccountList').length, unreadCount: get(d63.content, 'unreadAccountList').length }, readAccountList: get(d63.content, 'readAccountList'), unreadAccountList: get(d63.content, 'unreadAccountList') }; } async sendTeamMessageReceipts(a63) { const b63 = await this.core.sendCmd('v2SendTeamMessageReceipts', new SendTeamMessageReceiptsRequest(a63)); const c63 = get(b63.content, 'data').map((data) => { return { conversationId: this.core.conversationIdUtil.teamConversationId(data.receiverId), messageServerId: data.messageServerId, messageClientId: data.messageClientId, readCount: data.readCount, unreadCount: data.unreadCount, latestReadAccount: data.latestReadAccount }; }); return c63; } } 