import { cmdConfigMessageRevoke, cmdMapMessageRevoke, registerParser, V2NIMConversationType, V2NIMErrorCode, V2NIMErrorImpl, validate, validateConversationId } from '@nimsdk/base'; import { formatRevokeMessage } from '../../utils/Format'; import { revokeMessageRule } from '../Rules'; import { RevokeCloud } from './RevokeCloud'; import { RevokeModel } from './RevokeModel'; const s41 = '[RevokeService]'; export class RevokeService { constructor(d66, table) { this.core = d66; registerParser(d66, { cmdMap: cmdMapMessageRevoke, cmdConfig: cmdConfigMessageRevoke }); this.cloud = new RevokeCloud(d66); this.model = new RevokeModel(d66, table); } async revokeMessage(message, params) { try { this.core.logger.info(s41, 'revokeMessage', message, params); validate(revokeMessageRule, { message: message, params: params }, '', true); if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) { validateConversationId(this.core.account, message.conversationId); } else { const c66 = this.validParams(message.conversationId); if (c66 === false) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'revokeMessage: cannot revoke message with invalid messageServerId: ' + message.messageServerId } }); } } if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P && message.senderId !== this.core.account) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'revokeMessage: p2p message senderId is not current user' } }); } else if (!message.messageServerId || message.messageServerId === '0') { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'revokeMessage: cannot revoke message with invalid messageServerId: ' + message.messageServerId } }); } const b66 = await this.cloud.revokeMessage(message, params); await this.model.markRevoked(message.messageClientId); this.core.messageService.emit('onMessageRevokeNotifications', b66); this.core.eventBus.emit('V2NIMConversationService/revokeMessages', b66); await this.core.localConversationService.onMessagesRevoked(b66); } catch (e) { this.core.logger.error(s41, 'revokeMessage', message, params, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `revokeMessage ${JSON.stringify(e)}`, rawError: e } }); } } } async onRevokeMessage(y65) { try { this.core.logger.info(s41, 'onRevokeMessages', y65); const z65 = y65.map((data) => { return formatRevokeMessage(this.core, data); }); const notifications = []; for (const message of z65) { const a66 = await this.model.isRevoked(message.messageRefer.messageClientId); if (!a66) { await this.model.markRevoked(message.messageRefer.messageClientId); notifications.push(message); } } if (notifications.length > 0) { this.core.logger.info(s41, 'onMessageRevokeNotifications', notifications); this.core.messageService.emit('onMessageRevokeNotifications', notifications); this.core.eventBus.emit('V2NIMConversationService/revokeMessages', notifications); await this.core.localConversationService.onMessagesRevoked(notifications); } } catch (e) { this.core.logger.error(s41, 'onRevokeMessages', y65, e); if (e instanceof V2NIMErrorImpl || e.name === 'V2NIMError') { throw e; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `onRevokeMessage ${JSON.stringify(e)}`, rawError: e } }); } } } validParams(x65) { const target = x65.split('|'); if (target.length !== 3) { return false; } target.forEach(sub => { validate({ sub: { type: 'string', allowEmpty: false } }, { sub: sub }, '', true); }); return true; } } 