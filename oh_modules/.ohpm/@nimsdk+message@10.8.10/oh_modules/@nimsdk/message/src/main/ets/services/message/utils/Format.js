import { deserialize, invertSerializeItem, teamTag, userInfoTag, V2NIMConversationType, V2NIMMessageNotificationType, V2NIMMessageRevokeType, V2NIMMessageSendingState, V2NIMMessageType, V2NIMSystemMessageType, V2NIMTeamMessageMuteMode, V2NIMTeamType } from '@nimsdk/base'; import { get, set, unset } from '@nimsdk/vendor/'; import ConversationIdUtil from './ConversationIdUtil'; export function completeMessage(a75, message) { const b75 = { ...message, conversationId: ConversationIdUtil.messageConversationId(a75.account, message.conversationType, message.senderId, message.receiverId), isSelf: message.senderId === a75.account, sendingState: V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED, messageStatus: { errorCode: message?.messageStatus?.errorCode || 200, readReceiptSent: message?.messageStatus?.readReceiptSent || false } }; if (b75.threadReply) { b75.threadReply = { ...b75.threadReply, conversationType: b75.conversationType, conversationId: b75.conversationId }; } if (b75.threadRoot) { b75.threadRoot = { ...b75.threadRoot, conversationType: b75.conversationType, conversationId: b75.conversationId }; } if (b75.pushConfig?.pushEnabled === false) { b75.pushConfig.pushContent = b75.pushConfig.pushContent ?? ''; b75.pushConfig.pushPayload = b75.pushConfig.pushPayload ?? ''; } if (b75.pushConfig?.forcePush === false) { b75.pushConfig.forcePushContent = b75.pushConfig.forcePushContent ?? ''; b75.pushConfig.forcePushAccountIds = b75.pushConfig.forcePushAccountIds ?? []; } return b75; } export function completeMessageRefer(y74, z74) { return { ...z74, conversationId: ConversationIdUtil.messageConversationId(y74.account, z74.conversationType, z74.senderId, z74.receiverId) }; } export function formatMessageRefer(u74, message) { const { createTime: createTime, senderId: v74, receiverId: w74, conversationType: x74 } = message; return { conversationType: x74, conversationId: ConversationIdUtil.messageConversationId(u74.account, x74, v74, w74), senderId: message.senderId, receiverId: message.receiverId, messageServerId: message.messageServerId ?? "", createTime: createTime, messageClientId: message.messageClientId }; } export function formatRevokeNotification(r74, message, params) { const s74 = { [V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P]: V2NIMMessageRevokeType.V2NIM_MESSAGE_REVOKE_TYPE_P2P_BOTHWAY, [V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM]: V2NIMMessageRevokeType.V2NIM_MESSAGE_REVOKE_TYPE_TEAM_BOTHWAY, [V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM]: V2NIMMessageRevokeType.V2NIM_MESSAGE_REVOKE_TYPE_SUPERTEAM_BOTHWAY }; const t74 = [ JSON.parse(JSON.stringify({ postscript: params && params.postscript, revokeType: s74[message.conversationType], revokeAccountId: r74.account, serverExtension: params && params.serverExtension, messageRefer: formatMessageRefer(r74, message) })) ]; return t74; } export function formatSendRevokeMessage(o74, message, params) { const p74 = { [V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P]: V2NIMSystemMessageType.P2P_DELETE_MSG, [V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM]: V2NIMSystemMessageType.TEAM_DELETE_MSG, [V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM]: V2NIMSystemMessageType.SUPERTEAM_DELETE_MSG }; const q74 = { ...message, ...params, attach: params && params.serverExtension, sysMsgType: p74[message.conversationType], opeAccount: o74.account }; return q74; } export function formatRevokeMessage(j74, data) { const k74 = { 7: V2NIMMessageRevokeType.V2NIM_MESSAGE_REVOKE_TYPE_P2P_BOTHWAY, 8: V2NIMMessageRevokeType.V2NIM_MESSAGE_REVOKE_TYPE_TEAM_BOTHWAY, 12: V2NIMMessageRevokeType.V2NIM_MESSAGE_REVOKE_TYPE_SUPERTEAM_BOTHWAY, 13: V2NIMMessageRevokeType.V2NIM_MESSAGE_REVOKE_TYPE_P2P_ONEWAY, 14: V2NIMMessageRevokeType.V2NIM_MESSAGE_REVOKE_TYPE_TEAM_ONEWAY }; const l74 = { 7: V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P, 8: V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM, 12: V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM, 13: V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P, 14: V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM }; const m74 = l74[data.sysMsgType]; let n74 = { ...data, conversationType: m74, senderId: data.senderId, receiverId: data.receiverId }; return { postscript: data.postscript, revokeType: k74[data.sysMsgType] || V2NIMMessageRevokeType.V2NIM_MESSAGE_REVOKE_TYPE_UNDEFINED, revokeAccountId: data.opeAccount || data.senderId, callbackExtension: data.callbackExtension, serverExtension: data.attach || '', messageRefer: { conversationType: m74, conversationId: ConversationIdUtil.messageConversationId(j74.account, n74.conversationType, n74.senderId, n74.receiverId), senderId: data.senderId, receiverId: data.receiverId, messageServerId: data.messageServerId, createTime: data.deleteMsgCreatetime, messageClientId: data.messageClientId } }; } export function formatClientHistoryNotifications(g74, h74) { const i74 = get(h74.content, 'data').map((data) => formatClearHistoryNotification(g74, data)); return i74; } export function formatClearHistoryNotification(e74, data) { const f74 = data.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P ? e74.conversationIdUtil.p2pConversationId(data.receiverId) : data.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? e74.conversationIdUtil.teamConversationId(data.teamId) : e74.conversationIdUtil.superTeamConversationId(data.teamId); return { conversationId: f74, deleteTime: data.deleteTime, serverExtension: data.serverExtension }; } export function formatNotificationMessage(x73, message) { const y73 = message.attachment || {}; if (message.attachment && 'type' in message.attachment) { return message; } let z73 = undefined; if (get(y73, 'data.tinfo')) { const notificationType = get(y73, 'id'); const data = get(y73, 'data'); const b74 = notificationType > 400 ? V2NIMTeamType.V2NIM_TEAM_TYPE_SUPER : V2NIMTeamType.V2NIM_TEAM_TYPE_NORMAL; const c74 = b72(Object.assign({}, data), b74); const d74 = get(c74, 'tinfo'); z73 = d74; unset(z73, 'teamId'); } const a74 = { raw: get(y73, 'raw'), type: c72(x73, get(y73, 'id')), updatedTeamInfo: z73 ?? {}, targetIds: get(y73, 'data.ids') || (get(y73, 'data.id') ? [get(y73, 'data.id')] : []), serverExtension: typeof get(y73, 'data.attach') === 'string' ? get(y73, 'data.attach') : undefined, chatBanned: typeof get(y73, 'data.mute') === 'number' ? get(y73, 'data.mute') !== V2NIMTeamMessageMuteMode.V2NIM_TEAM_MESSAGE_MUTE_MODE_OFF : undefined }; return { ...message, attachment: a74 }; } function b72(q73, r73) { if (!q73) { return {}; } const s73 = q73; if (get(s73, 'tinfo')) { const w73 = formatTeamFromTinfo(get(s73, 'tinfo')); set(s73, 'tinfo', w73); set(s73, 'tinfo.teamType', r73); } if (get(s73, 'uinfos')) { const u73 = get(s73, 'uinfos').map((v73) => deserialize(v73, invertSerializeItem(userInfoTag))); set(s73, 'uinfos', u73); } if (typeof get(s73, 'mute') !== 'undefined') { const t73 = parseInt(get(s73, 'mute')); set(s73, 'mute', t73); } return s73; } export function formatTeamFromTinfo(p73) { return deserialize(p73, invertSerializeItem(teamTag)); } function c72(o73, type) { switch (type) { case 0: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE; case 401: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE; case 1: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_KICK; case 402: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_KICK; case 2: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_LEAVE; case 403: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_LEAVE; case 3: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_UPDATE_TINFO; case 404: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_UPDATE_TINFO; case 4: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_DISMISS; case 405: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_DISMISS; case 5: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_APPLY_PASS; case 410: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_APPLY_PASS; case 6: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_OWNER_TRANSFER; case 406: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_OWNER_TRANSFER; case 7: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_ADD_MANAGER; case 407: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_ADD_MANAGER; case 8: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_REMOVE_MANAGER; case 408: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_REMOVE_MANAGER; case 9: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE_ACCEPT; case 411: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE_ACCEPT; case 10: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_BANNED_TEAM_MEMBER; case 409: return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_BANNED_TEAM_MEMBER; default: { o73.logger.warn(`[V2NIMMessageService] switch a undefined notification type: ${type}`); return V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_UNDEFINED; } } } export function formatReceiveMessageAttachment(message) { const mediaTypes = [ V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO, V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO, V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE, V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE ]; if (mediaTypes.includes(message.messageType) && message.attachment) { const n73 = message.attachment; message.attachmentUploadState = n73.uploadState; if (typeof get(n73, 'w') !== 'undefined') { message.attachment.width = get(n73, 'w'); unset(n73, 'w'); } if (typeof get(n73, 'h') !== 'undefined') { message.attachment.height = get(n73, 'h'); unset(n73, 'h'); } if (typeof get(n73, 'dur') !== 'undefined') { message.attachment.duration = get(n73, 'dur'); unset(n73, 'dur'); } set(n73, 'ext', n73.ext?.indexOf('.') === -1 ? `.${n73.ext}` : n73.ext); } else if (message.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_LOCATION) { const m73 = message.attachment; if (typeof get(m73, 'lat') !== 'undefined') { message.attachment.latitude = get(m73, 'lat'); unset(m73, 'lat'); } if (typeof get(m73, 'lng') !== 'undefined') { message.attachment.longitude = get(m73, 'lng'); unset(m73, 'lng'); } if (typeof get(m73, 'title') !== 'undefined') { message.attachment.address = get(m73, 'title'); unset(m73, 'title'); } } else if (message.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL) { const l73 = message.attachment; l73.durations.map((duration) => { if (typeof get(duration, 'accid') !== 'undefined') { duration.accountId = get(duration, 'accid'); unset(duration, 'accid'); } }); } return message; } export function formatCustomMessage(message, g73) { if (typeof message.attachment?.raw === 'string' && g73?.length > 0) { const subType = message.subType || 0; const h73 = g73; const i73 = message.attachment.raw; h73.some((j73) => { try { const k73 = j73(subType, i73); if (isPlainObject(k73)) { k73.raw = i73; message.attachment = k73; return true; } } catch (err) { this.core.logger.warn(`customAttachmentParser: subType ${subType}, raw: ${i73}. parse error with ${err}`); return false; } return false; }); } return message; } export function onQuickCommentNotificationHandler(d73, e73, type) { const f73 = { operationType: type, quickComment: { messageRefer: { ...get(e73.content, 'message'), conversationId: d72(d73, get(e73.content, 'message')) }, ...get(e73.content, 'quickComment') } }; return f73; } function d72(c73, message) { if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) { return message.senderId === c73.account ? c73.conversationIdUtil.p2pConversationId(message.receiverId) : c73.conversationIdUtil.p2pConversationId(message.senderId); } else if (message.conversationType === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) { return c73.conversationIdUtil.teamConversationId(message.receiverId); } else { return c73.conversationIdUtil.superTeamConversationId(message.receiverId); } } export function messageConversationId(y72, z72, a73, b73) { if (z72 === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) { return a73 === y72.account ? this.p2pConversationId(b73) : this.p2pConversationId(a73); } else if (z72 === V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) { return this.teamConversationId(b73); } else { return this.superTeamConversationId(b73); } } export function mediaAttachmentToRaw(r72) { const { width: width, height: height, duration: duration, path: path, file: file, raw: s72, ctx: ctx, payload: payload, bucketName: t72, objectName: u72, token: token, ext: v72, ...w72 } = r72; const x72 = typeof v72 === 'string' && v72[0] === '.' ? v72.slice(1) : v72; return JSON.stringify({ ...w72, ...(typeof v72 === 'undefined' ? {} : { ext: x72 }), ...(typeof width === 'undefined' ? {} : { w: width }), ...(typeof height === 'undefined' ? {} : { h: height }), ...(typeof duration === 'undefined' ? {} : { dur: duration }) }); } export function locationAttachmentToRaw(q72) { return JSON.stringify({ v1: q72.latitude, w1: q72.longitude, title: q72.address }); } export function callAttachmentToRaw(n72) { const { raw: o72, ...p72 } = n72; try { return JSON.stringify({ ...p72, durations: n72.durations.map((d) => { return { accid: d.accountId, duration: d.duration }; }) }); } catch (err) { return JSON.stringify(n72); } } export function generateModifyMessage(message, params) { const m72 = { messageConfig: { lastMessageUpdateEnabled: message.messageConfig?.lastMessageUpdateEnabled }, routeConfig: { routeEnabled: true, ...params.routeConfig }, pushConfig: { pushEnabled: true, pushNickEnabled: true, forcePush: false, ...params.pushConfig }, antispamConfig: { antispamEnabled: true, ...params.antispamConfig }, ...(params.attachment ? { attachment: params.attachment } : {}), conversationType: message.conversationType, senderId: message.senderId, receiverId: message.receiverId, createTime: message.createTime, messageClientId: message.messageClientId, messageServerId: message.messageServerId, messageType: message.messageType, subType: params.subType, text: params.text, serverExtension: params.serverExtension }; return m72; } export function formatModifyMessage(message, result) { return { ...message, ...result.content.data }; } export function prepareModifyMessage(message, params) { const l72 = e72(message, params); return l72; } export function formatAIMessageConfig(message, g72) { let h72 = {}; let i72 = {}; if (g72) { const j72 = get(g72, 'content.msg'); const k72 = get(g72, 'content.type') || 0; if (j72) { i72 = { msg: j72, type: k72 }; } else if (typeof j72 === 'undefined' && message.messageType === V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT) { i72 = { msg: message.text || '', type: k72 }; } h72 = { ...g72 }; h72.aiStatus = 1; if (typeof i72.msg !== 'undefined') { h72.content = i72; } } return h72; } function e72(message, params) { const f72 = { messageConfig: { lastMessageUpdateEnabled: message.messageConfig?.lastMessageUpdateEnabled }, routeConfig: { routeEnabled: true, ...params.routeConfig }, pushConfig: { pushEnabled: true, pushNickEnabled: true, forcePush: false, ...params.pushConfig }, antispamConfig: { antispamEnabled: true, ...params.antispamConfig }, ...(params.attachment ? { attachment: params.attachment } : {}), conversationType: message.conversationType, senderId: message.senderId, receiverId: message.receiverId, createTime: message.createTime, messageClientId: message.messageClientId, messageServerId: message.messageServerId, messageType: message.messageType, subType: params.subType, text: params.text, serverExtension: params.serverExtension }; return f72; } function isPlainObject(obj) { return obj != null && typeof obj == 'object' && Object.getPrototypeOf(obj) == Object.prototype; } 