import { Context } from '@kit.AbilityKit';
import { ValueType } from '@kit.ArkData';
import { ColumnInfo, NIM, RdbPredicates, RdbStoreInterface, ReporterServiceInternal } from '@nimsdk/base';
import RStore from '@ohos.data.relationalStore';
export declare class RdbStoreImpl implements RdbStoreInterface {
    private databaseName;
    rdbStore: RStore.RdbStore;
    private tablesInfoMap;
    private reporterService?;
    private context;
    private sequenceRunner;
    private storeConfig;
    constructor(l43: NIM, m43: RStore.StoreConfig, n43?: ReporterServiceInternal);
    getDbName(): string;
    getRdb(h43: Context): Promise<RdbStoreInterface>;
    getRdbStore(): RStore.RdbStore;
    backup(d43: string): Promise<void>;
    restore(z42: string): Promise<void>;
    rollBack(): Promise<void>;
    beginTransaction(): Promise<void>;
    commit(): Promise<void>;
    close(): Promise<void>;
    upgradeVersion(k42: string, l42: ColumnInfo): Promise<void>;
    execute(f42: string, g42: ValueType[]): Promise<RStore.ValueType>;
    createTable(x41: string, y41: string | boolean, z41: ColumnInfo[], a42?: string[]): Promise<void>;
    createTableIndex(q41: string, r41: string, s41: string[]): Promise<void>;
    createTableUniqueIndex(j41: string, k41: string, l41: string[]): Promise<void>;
    deleteTable(e41: string): Promise<void>;
    clearTable(z40: string): Promise<void>;
    insert(t40: string, u40: RStore.ValuesBucket[]): Promise<number>;
    insertOrReplace(n40: string, o40: RStore.ValuesBucket[]): Promise<number>;
    update(g40: RStore.ValuesBucket, h40: RdbPredicates): Promise<number>;
    query(a40: RdbPredicates, b40: string[]): Promise<RStore.ValuesBucket[]>;
    querys(u39: string): Promise<RStore.ValuesBucket[]>;
    querySql(o39: string, p39: RStore.ValueType[]): Promise<RStore.ValuesBucket[]>;
    delete(i39: RdbPredicates): Promise<number>;
    deletes(a39: string, b39: RdbPredicates[]): Promise<void>;
    private loadTableInfo;
    private queryTableInfo;
    private addTableColumn;
}
