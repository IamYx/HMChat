import { getEnumValues, V2NIMFriendAddApplicationStatus, V2NIMFriendAddMode } from '@nimsdk/base'; export const addFriendRule = { accountId: { type: 'string', required: true, allowEmpty: false }, params: { type: 'object', required: true, rules: { addMode: { type: 'enum', required: true, values: getEnumValues(V2NIMFriendAddMode) }, postscript: { type: 'string', required: false, allowEmpty: true } } } }; export const deleteFriendRule = { accountId: { type: 'string', required: true, allowEmpty: false }, params: { type: 'object', required: false, rules: { deleteAlias: { type: 'boolean', required: false } } } }; export const setFriendInfoRule = { accountId: { type: 'string', required: true, allowEmpty: false }, params: { type: 'object', required: true, rules: { alias: { type: 'string', required: false, allowEmpty: true }, serverExtension: { type: 'string', required: false, allowEmpty: true } } } }; export const applicationRule = { applicantAccountId: { type: 'string', required: true, allowEmpty: false }, recipientAccountId: { type: 'string', required: true, allowEmpty: false }, operatorAccountId: { type: 'string', required: true, allowEmpty: false }, postscript: { type: 'string', required: false, allowEmpty: true }, status: { type: 'enum', required: false, values: getEnumValues(V2NIMFriendAddApplicationStatus) }, timestamp: { type: 'number', required: false } }; export const deleteApplicationRule = { applicantAccountId: { type: 'string', required: true, allowEmpty: false }, recipientAccountId: { type: 'string', required: true, allowEmpty: false }, operatorAccountId: { type: 'string', required: false, allowEmpty: false }, postscript: { type: 'string', required: false, allowEmpty: true }, status: { type: 'enum', required: false }, timestamp: { type: 'number', min: 1, required: true } }; export const getAddApplicationListRule = { offset: { type: 'number', required: false }, limit: { type: 'number', required: false }, status: { type: 'array', itemType: 'enum', required: false, values: getEnumValues(V2NIMFriendAddApplicationStatus) } }; 