import { NIMBaseImpl } from '@nimsdk/base'; import { COL_NAME, FRIEND_TABLE } from '../table/FriendTable'; export class V2NIMFriendImpl extends NIMBaseImpl { constructor() { super(); this._accountId = ''; this._alias = undefined; this._serverExtension = undefined; this._customerExtension = undefined; this._createTime = undefined; this._updateTime = undefined; this._source = undefined; this._userProfile = undefined; this.__flag = 0; this.__beflag = 0; } get accountId() { return this._accountId; } get alias() { return this._alias; } get serverExtension() { return this._serverExtension; } get customerExtension() { return this._customerExtension; } get createTime() { return this._createTime; } get updateTime() { return this._updateTime; } get source() { return this._source; } get userProfile() { return this._userProfile; } get flag() { return this.__flag; } get beflag() { return this.__beflag; } set accountId(a5) { this._accountId = a5; } set alias(z4) { this._alias = z4; } set serverExtension(y4) { this._serverExtension = y4; } set customerExtension(x4) { this._customerExtension = x4; } set createTime(w4) { this._createTime = w4; } set updateTime(v4) { this._updateTime = v4; } set source(u4) { this._source = u4; } set userProfile(t4) { this._userProfile = t4; } set flag(s4) { this.__flag = s4; } set beflag(r4) { this.__beflag = r4; } static buildFromParams(h4, i4, j4, k4, l4, m4, n4, o4, p4, q4) { return V2NIMFriendImpl.initByParams(() => new V2NIMFriendImpl(), h4, i4, j4, k4, l4, m4, n4, o4, p4, q4); } static buildFromCloud(g4) { return V2NIMFriendImpl.initByCloud(() => new V2NIMFriendImpl(), g4); } static buildFromValueBucket(f4) { return V2NIMFriendImpl.initByValueBucket(() => new V2NIMFriendImpl(), f4); } fromParams(v3, w3, x3, y3, z3, a4, b4, c4, d4, e4) { this.accountId = v3; this.alias = w3; this.serverExtension = x3; this.customerExtension = y3; this.createTime = z3; this.updateTime = a4; this.source = b4; this.userProfile = c4; this.flag = d4; this.flag = e4; } fromCloud(u3) { this.accountId = u3.accountId; this.alias = u3.alias; this.serverExtension = u3.serverExtension; this.customerExtension = u3.customerExtension; this.createTime = u3.createTime; this.updateTime = u3.updateTime; this.source = u3.source; this.userProfile = u3.userProfile; this.flag = 1; this.beflag = 1; } fromValueBucket(t3) { this.accountId = t3[COL_NAME.ACCOUNT_ID]; this.alias = t3[COL_NAME.ALIAS]; this.serverExtension = t3[COL_NAME.SERVER_EXTENSION]; this.customerExtension = t3[COL_NAME.CUSTOMER_EXTENSION]; this.createTime = t3[COL_NAME.CREATE_TIME]; this.updateTime = t3[COL_NAME.UPDATE_TIME]; this.source = t3[COL_NAME.SOURCE]; this.userProfile = undefined; this.flag = t3[COL_NAME.FLAG]; this.beflag = t3[COL_NAME.BE_FLAG]; } static parseArrayFromCloud(q3) { const r3 = new Array(q3.length); for (let s3 = 0; s3 < q3.length; s3++) { r3[s3] = V2NIMFriendImpl.buildFromCloud(q3[s3]); } return r3; } generateBucket() { let o3 = {}; FRIEND_TABLE.columns.forEach((p3) => { switch (p3) { case COL_NAME.ACCOUNT_ID: o3[p3] = this.accountId; break; case COL_NAME.FLAG: o3[p3] = this.flag; break; case COL_NAME.BE_FLAG: o3[p3] = this.beflag; break; case COL_NAME.SOURCE: if (this.source !== undefined) { o3[p3] = this.source; } break; case COL_NAME.ALIAS: if (this.alias !== undefined) { o3[p3] = this.alias; } break; case COL_NAME.SERVER_EXTENSION: if (this.serverExtension !== undefined) { o3[p3] = this.serverExtension; } break; case COL_NAME.CUSTOMER_EXTENSION: if (this.customerExtension !== undefined) { o3[p3] = this.customerExtension; } break; case COL_NAME.CREATE_TIME: if (this.createTime !== undefined) { o3[p3] = this.createTime; } break; case COL_NAME.UPDATE_TIME: if (this.updateTime !== undefined) { o3[p3] = this.updateTime; } break; default: break; } }); return o3; } generateFriendUpdateBucket() { let m3 = {}; FRIEND_TABLE.columns.forEach((n3) => { switch (n3) { case COL_NAME.SOURCE: if (this.source !== undefined) { m3[n3] = this.source; } break; case COL_NAME.ALIAS: if (this.alias !== undefined) { m3[n3] = this.alias; } break; case COL_NAME.SERVER_EXTENSION: if (this.serverExtension !== undefined) { m3[n3] = this.serverExtension; } break; case COL_NAME.CUSTOMER_EXTENSION: if (this.customerExtension !== undefined) { m3[n3] = this.customerExtension; } break; case COL_NAME.UPDATE_TIME: if (this.updateTime !== undefined) { m3[n3] = this.updateTime; } break; default: break; } }); return m3; } toJSON() { return { accountId: this.accountId, alias: this.alias, serverExtension: this.serverExtension, customerExtension: this.customerExtension, createTime: this.createTime, updateTime: this.updateTime, source: this.source, userProfile: this.userProfile, }; } } export function getNullableString(i3, j3) { try { if (i3.isColumnNull(j3)) { return undefined; } else { return i3.getString(j3); } } catch (k3) { const l3 = k3; if (l3.code == 14800013) { return undefined; } else { throw k3; } } } 