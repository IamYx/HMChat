import HashMap from "@ohos.util.HashMap"; import { cmdConfigFriend, cmdMapFriend, NIM_DATABASE_NAME_MAIN, registerParser, V2NIMErrorCode, V2NIMErrorImpl, V2NIMFriendAddApplicationStatus, V2NIMFriendAddMode, V2NIMFriendDeletionType, V2NIMFriendVerifyType, V2Service, validate } from '@nimsdk/base'; import { get } from '@nimsdk/vendor'; import { registerAspect } from './Aspect'; import { FriendCloud } from './FriendCloud'; import { FriendModel } from './FriendModel'; import { addFriendRule, applicationRule, deleteApplicationRule, deleteFriendRule, getAddApplicationListRule, setFriendInfoRule } from './Rules'; import { V2NIMFriendImpl } from './V2NIMFriendImpl'; const TAG = '[FriendService]'; export default class V2NIMFriendServiceImpl extends V2Service { constructor(d10, e10, f10) { super(e10, d10); registerParser(d10, { cmdMap: cmdMapFriend, cmdConfig: cmdConfigFriend }); this.setListener(); registerAspect(V2NIMFriendServiceImpl, d10); } get model() { if (this._model) { return this._model; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: `V2NIMFriendService model is unavailable` } }); } } get cloud() { if (this._cloud) { return this._cloud; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: 'V2NIMFriendService cloud is unavailable' } }); } } async onLoginStart(b10) { try { this.core.logger.info(TAG, 'onLoginStart', b10); this.registerInnerService(this.core); await this.loadOnLogin(); } catch (c10) { this.core.logger.error(TAG, 'onLoginStart', c10); } } async onLoginFinished(a10) { this.core.logger.info(TAG, 'onLoginFinished', a10); } onLogout() { this.core.logger.info(TAG, 'onLogout'); this.unRegisterInnerService(); } async loadOnLogin() { try { await this.model.loadAllFriends(); } catch (y9) { this.core.logger.error(TAG, `loadOnLogin catch error`, y9); const z9 = y9; this.core.reporterService?.addException({ action: 6, code: z9.code, description: z9.message, operationType: 0, context: z9.stack, target: `V2NIMFriendServiceImpl loadOnLogin.` }); } return; } async addFriend(v9, w9) { try { this.core.logger.info(TAG, 'call API addFriend', v9, w9); if (v9 === this.core.account) { this.core.logger.error(TAG, `addFriend: Cannot add yourself`); throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'Cannot add yourself' } }); } validate(addFriendRule, { accountId: v9, params: w9 }, '', true); await this.cloud.addFriend(v9, w9.addMode, w9.postscript); if (w9.addMode === V2NIMFriendAddMode.V2NIM_FRIEND_MODE_TYPE_ADD) { this.handleAddFriend(v9); } } catch (x9) { this.core.logger.error(TAG, 'addFriend', x9); if (x9 instanceof V2NIMErrorImpl || x9.name === 'V2NIMError') { throw x9; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `addFriend ${JSON.stringify(x9)}`, rawError: x9 } }); } } } async deleteFriend(p9, q9) { try { this.core.logger.info(TAG, 'call API deleteFriend', p9, q9); if (p9 === this.core.account) { this.core.logger.error(TAG, `deleteFriend: Cannot delete yourself`); throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'Cannot delete yourself' } }); } validate(deleteFriendRule, { accountId: p9, params: q9 }, '', true); const s9 = await this.cloud.deleteFriend(p9, q9).catch((t9) => { const u9 = t9; if (u9.code === V2NIMErrorCode.V2NIM_ERROR_CODE_FRIEND_NOT_EXIST) { this.handleDeleteFriend(p9, V2NIMFriendDeletionType.V2NIM_FRIEND_DELETION_TYPE_BY_SELF, q9.deleteAlias); } throw t9; }); await this.handleDeleteFriend(p9, V2NIMFriendDeletionType.V2NIM_FRIEND_DELETION_TYPE_BY_SELF, q9.deleteAlias); } catch (r9) { this.core.logger.error(TAG, 'deleteFriend', r9); if (r9 instanceof V2NIMErrorImpl || r9.name === 'V2NIMError') { throw r9; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `deleteFriend ${JSON.stringify(r9)}`, rawError: r9 } }); } } } async setFriendInfo(m9, n9) { try { this.core.logger.info(TAG, 'call API setFriendInfo', m9, n9); validate(setFriendInfoRule, { accountId: m9, params: n9 }, '', true); if (m9 === this.core.account) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'Cannot set yourself' } }); } this.core.loginService.checkIllegalState(); await this.cloud.setFriendInfo(m9, n9); await this.handleSetFriendInfo(m9, n9); } catch (o9) { this.core.logger.error(TAG, 'setFriendInfo', o9); if (o9 instanceof V2NIMErrorImpl || o9.name === 'V2NIMError') { throw o9; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `setFriendInfo ${JSON.stringify(o9)}`, rawError: o9 } }); } } } async getFriendList() { try { this.core.logger.info(TAG, 'call API getFriendList'); const c9 = await this.model.getFriendList(); const d9 = new HashMap(); const e9 = c9.map(l9 => { d9.set(l9.accountId, l9); return l9.accountId; }); const f9 = await this.core.userService.v2IGetUsers(e9); const g9 = new HashMap(); for (const k9 of f9) { g9.set(k9.accountId, k9); } const h9 = []; e9.map((i9) => { const j9 = d9.get(i9); if (j9) { j9.userProfile = g9.get(i9); h9.push(j9); } }); this.core.logger.info(TAG, 'getFriendList ret', h9); return h9; } catch (b9) { this.core.logger.error(TAG, 'getFriendList', b9); if (b9 instanceof V2NIMErrorImpl || b9.name === 'V2NIMError') { throw b9; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getFriendList ${JSON.stringify(b9)}`, rawError: b9 } }); } } } async getFriendByIds(r8) { try { this.core.logger.info(TAG, 'call API getFriendByIds', r8); validate({ accountIds: { type: 'array', itemType: 'string', required: true, min: 1 } }, { accountIds: r8 }, '', true); const t8 = await this.model.getFriendByIds(r8); this.core.logger.info(TAG, 'getFriendByIds local', t8); await Promise.all(t8.map(async (z8) => { const a9 = await this.core.userService.v2IGetUser(z8.accountId); if (typeof a9 !== 'undefined') { z8.userProfile = a9; } })); const u8 = []; const v8 = new HashMap(); t8.map((y8) => { v8.set(y8.accountId, y8); }); r8.map((w8) => { const x8 = v8.get(w8); if (x8) { u8.push(x8); } }); return u8; } catch (s8) { this.core.logger.error(TAG, 'getFriendByIds', s8); if (s8 instanceof V2NIMErrorImpl || s8.name === 'V2NIMError') { throw s8; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getFriendByIds ${JSON.stringify(s8)}`, rawError: s8 } }); } } } async checkFriend(m8) { try { this.core.logger.info(TAG, 'call API checkFriend', m8); validate({ accountIds: { type: 'array', itemType: 'string', required: true, min: 1 } }, { accountIds: m8 }, '', true); const o8 = {}; await Promise.all(m8.map(async (p8) => { const q8 = await this.model.checkFriend(p8); o8[p8] = q8; })); this.core.logger.info(TAG, 'checkFriend ret', o8); return o8; } catch (n8) { this.core.logger.error(TAG, 'checkFriend', n8); if (n8 instanceof V2NIMErrorImpl || n8.name === 'V2NIMError') { throw n8; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `checkFriend ${JSON.stringify(n8)}`, rawError: n8 } }); } } } async getAddApplicationList(k8) { try { this.core.logger.info(TAG, 'call API getAddApplicationList', k8); validate(getAddApplicationListRule, k8, '', true); return await this.model.getAddApplicationList(k8); } catch (l8) { this.core.logger.error(TAG, 'getAddApplicationList', l8); if (l8 instanceof V2NIMErrorImpl || l8.name === 'V2NIMError') { throw l8; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getAddApplicationList ${JSON.stringify(l8)}`, rawError: l8 } }); } } } async acceptAddApplication(h8) { try { this.core.logger.info(TAG, 'call API acceptAddApplication', h8); this.core.loginService.checkIllegalState(); validate(applicationRule, h8, '', true); const j8 = V2NIMFriendVerifyType.V2NIM_FRIEND_VERIFY_TYPE_ACCEPT; await this.cloud.addFriend(h8.applicantAccountId, j8); this.handlePassFriendApply(h8.applicantAccountId); } catch (i8) { this.handlePassFriendApply(h8.applicantAccountId, i8); this.core.logger.error(TAG, 'acceptAddApplication', i8); if (i8 instanceof V2NIMErrorImpl || i8.name === 'V2NIMError') { throw i8; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `acceptAddApplication ${JSON.stringify(i8)}`, rawError: i8 } }); } } } async rejectAddApplication(a8, b8) { try { this.core.logger.info(TAG, 'call API rejectAddApplication', a8, b8); validate(applicationRule, a8, '', true); const f8 = V2NIMFriendVerifyType.V2NIM_FRIEND_VERIFY_TYPE_REJECT; await this.cloud.addFriend(a8.operatorAccountId, f8, b8 || ''); const g8 = {}; g8.applicantAccountId = a8.applicantAccountId; g8.recipientAccountId = a8.recipientAccountId; g8.operatorAccountId = this.core.account; g8.postscript = b8 || ''; g8.timestamp = Date.now(); g8.read = true; g8.status = V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_REJECTED; this.handleRejectFriendApply(g8); } catch (c8) { this.core.logger.error(TAG, 'rejectAddApplication', c8); const d8 = {}; d8.applicantAccountId = a8.applicantAccountId; d8.recipientAccountId = a8.recipientAccountId; d8.operatorAccountId = this.core.account; d8.postscript = b8 || ''; d8.timestamp = Date.now(); d8.read = true; d8.status = V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_EXPIRED; this.handleRejectFriendApply(d8, c8); if (c8 instanceof V2NIMErrorImpl || c8.name === 'V2NIMError') { let e8 = c8; throw e8; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `rejectAddApplication ${JSON.stringify(c8)}`, rawError: c8 } }); } } } async clearAllAddApplication() { try { this.core.logger.info(TAG, 'call API clearAllAddApplication'); return await this.model.clearAllAddApplication(); } catch (z7) { this.core.logger.error(TAG, 'clearAllAddApplication', z7); if (z7 instanceof V2NIMErrorImpl || z7.name === 'V2NIMError') { throw z7; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `clearAllAddApplication ${JSON.stringify(z7)}`, rawError: z7 } }); } } } async deleteAddApplication(x7) { try { this.core.logger.info(TAG, 'call API deleteAddApplication', x7); validate(deleteApplicationRule, x7, '', true); if (x7.applicantAccountId !== this.core.account && x7.recipientAccountId !== this.core.account) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'The applicant and recipient are not youself' } }); } await this.model.deleteAddApplication(x7.applicantAccountId, x7.recipientAccountId, x7.timestamp); } catch (y7) { this.core.logger.error(TAG, 'deleteAddApplication', y7); if (y7 instanceof V2NIMErrorImpl || y7.name === 'V2NIMError') { throw y7; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `deleteAddApplication ${JSON.stringify(y7)}`, rawError: y7 } }); } } } async setAddApplicationRead() { try { this.core.logger.info(TAG, 'call API setAddApplicationRead'); await this.model.setAddApplicationRead(); } catch (w7) { this.core.logger.error(TAG, 'setAddApplicationRead', w7); if (w7 instanceof V2NIMErrorImpl || w7.name === 'V2NIMError') { throw w7; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `setAddApplicationRead ${JSON.stringify(w7)}`, rawError: w7 } }); } } } async getAddApplicationUnreadCount() { try { this.core.logger.info(TAG, 'call API getAddApplicationUnreadCount'); const v7 = await this.model.getAddApplicationUnreadCount(); this.core.logger.info(TAG, 'getAddApplicationUnreadCount', v7); return v7; } catch (u7) { this.core.logger.error(TAG, 'getAddApplicationUnreadCount', u7); if (u7 instanceof V2NIMErrorImpl || u7.name === 'V2NIMError') { throw u7; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `getAddApplicationUnreadCount ${JSON.stringify(u7)}`, rawError: u7 } }); } } } async searchFriendByOption(m7) { try { this.core.logger.info(TAG, 'call API searchFriendByOption', m7); validate({ keyword: { type: 'string', allowEmpty: false }, searchAccountId: { type: 'boolean', required: false } }, m7, '', true); const p7 = m7.searchAlias === undefined ? true : m7.searchAlias; if (!p7 && !m7.searchAccountId) { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: 'searchAlias and searchAccountId cannot be false at the same time' } }); } const q7 = await this.model.searchFriendByOption(m7.keyword, p7, m7.searchAccountId); const r7 = []; await Promise.all(q7.map(async (s7) => { const t7 = await this.core.userService.v2IGetUser(s7.accountId); if (typeof t7 !== 'undefined') { s7.userProfile = t7; r7.push(s7); } })); this.core.logger.info(TAG, 'searchFriendByOption ret', r7); return r7; } catch (n7) { this.core.logger.error(TAG, 'searchFriendByOption', n7); if (n7 instanceof V2NIMErrorImpl || n7.name === 'V2NIMError') { let o7 = n7; throw o7; } else { throw new V2NIMErrorImpl({ code: V2NIMErrorCode.V2NIM_ERROR_CODE_UNKNOWN, detail: { reason: `rejectAddApplication ${JSON.stringify(n7)}`, rawError: n7 } }); } } } async handleAddFriend(g7) { const h7 = await this.cloud.getFriend(this.model.getFriendTimetag()); const i7 = h7.get('friends'); const j7 = h7.get('timetag'); await this.model.addFriends(i7, j7); const k7 = await this.model.queryFriend(g7); if (k7) { const l7 = await this.core.userService.v2IGetUser(k7.accountId); if (typeof l7 !== 'undefined') { k7.userProfile = l7; } this.emit('onFriendAdded', k7); } } async handleDeleteFriend(b7, c7, d7) { const e7 = await this.cloud.getFriend(this.model.getFriendTimetag()); const f7 = e7.get('timetag'); c7 = c7 ?? V2NIMFriendDeletionType.V2NIM_FRIEND_DELETION_TYPE_BY_SELF; await this.model.deleteFriend(b7, d7); this.model.setFriendTimetag(f7); this.core.syncService.updateSyncTimestamp(f7, 'friends'); this.emit('onFriendDeleted', b7, c7); } async v2IGetFriend(y6) { const z6 = await this.model.queryFriend(y6); if (typeof z6 !== 'undefined') { const a7 = await this.core.userService.v2IGetUser(y6); z6.userProfile = a7; } return z6; } async v2IGetLocalFriendAlias(w6) { const x6 = await this.model.queryFriend(w6); if (typeof x6 !== 'undefined') { return x6.alias; } else { return undefined; } } async v2IGetLocalFriendAliasBatch(p6) { const q6 = await this.model.getFriendByIds(p6); const r6 = new HashMap(); for (const v6 of q6) { r6.set(v6.accountId, v6); } const s6 = new HashMap(); for (const t6 of p6) { const u6 = r6.get(t6); if (typeof u6 !== 'undefined') { s6.set(t6, u6.alias); } else { s6.set(t6, undefined); } } return s6; } async v2ISyncFriendListHandler(l6) { this.core.logger.info('SyncService', 'v2ISyncFriendListHandler start'); const m6 = get(l6.content, 'friends'); const n6 = V2NIMFriendImpl.parseArrayFromCloud(m6); const o6 = get(l6.content, 'timetag'); await this.model.addFriendsBySync(n6, o6); this.core.logger.info('SyncService', 'v2ISyncFriendListHandler end'); } async v2ISyncFriendUserListHandler(i6) { this.core.logger.info('SyncService', 'v2ISyncFriendListHandler start'); const j6 = get(i6.content, 'users'); const k6 = get(i6.content, 'timetag'); this.core.logger.info(TAG, '12_6 v2SyncFriendUserListHandler', j6, k6); await this.core.userService.v2ISetUsersBySync(j6, k6); this.core.logger.info('SyncService', 'v2ISyncFriendUserListHandler end'); } setListener() { this.core.eventBus.on('V2NIMNotificationService/sysNotification', async (a6) => { if (a6.type === 6) { const h6 = a6.senderId; this.handleDeleteFriend(h6, V2NIMFriendDeletionType.V2NIM_FRIEND_DELETION_TYPE_BY_PEER); } else if (a6.type === 5) { try { const c6 = JSON.parse(a6.content); if (c6?.vt === V2NIMFriendVerifyType.V2NIM_FRIEND_VERIFY_TYPE_ADD) { this.handleAddFriend(a6.senderId); const g6 = { applicantAccountId: a6.senderId, recipientAccountId: a6.receiverId, operatorAccountId: a6.senderId, postscript: a6.postscript, timestamp: a6.timestamp, status: V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_DIRECT_ADD, read: true }; await this.model.appendFriendAddApplication(g6); await this.model.updateFriendAddStatus(g6.applicantAccountId, V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_DIRECT_ADD, g6.applicantAccountId); } else if (c6?.vt === V2NIMFriendVerifyType.V2NIM_FRIEND_VERIFY_TYPE_APPLY) { const f6 = { applicantAccountId: a6.senderId, recipientAccountId: a6.receiverId, operatorAccountId: a6.senderId, postscript: a6.postscript, timestamp: a6.timestamp, status: V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_INIT, read: false }; await this.model.appendFriendAddApplication(f6); this.emit('onFriendAddApplication', f6); } else if (c6?.vt === V2NIMFriendVerifyType.V2NIM_FRIEND_VERIFY_TYPE_ACCEPT) { this.handleAddFriend(a6.senderId); const e6 = { applicantAccountId: a6.receiverId, recipientAccountId: a6.senderId, operatorAccountId: a6.senderId, timestamp: a6.timestamp, postscript: a6.postscript, status: V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_AGREED, read: true }; await this.model.appendFriendAddApplication(e6); } else if (c6?.vt === V2NIMFriendVerifyType.V2NIM_FRIEND_VERIFY_TYPE_REJECT) { const d6 = { applicantAccountId: a6.receiverId, recipientAccountId: a6.senderId, operatorAccountId: a6.senderId, timestamp: a6.timestamp, postscript: a6.postscript, status: V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_REJECTED, read: true }; await this.model.appendFriendAddApplication(d6); this.emit('onFriendAddRejected', d6); } } catch (b6) { this.core.logger.warn('V2NIMFriendNotificationImpl::processSysNotification, parse content error:', b6); } } }); } v2OnAddFriendHandler(u5) { this.core.logger.info(TAG, 'call Handler v2OnAddFriendHandler', u5); const v5 = get(u5.content, 'accountId'); const w5 = get(u5.content, 'verifyType'); const x5 = get(u5.content, 'postscript'); this.core.logger.info(TAG, `v2OnAddFriendHandler: ${v5}  ${w5}`); if (w5 === V2NIMFriendVerifyType.V2NIM_FRIEND_VERIFY_TYPE_ADD) { this.handleAddFriend(v5); } else if (w5 === V2NIMFriendVerifyType.V2NIM_FRIEND_VERIFY_TYPE_APPLY) { const z5 = { applicantAccountId: this.core.account, recipientAccountId: v5, operatorAccountId: this.core.account, postscript: x5, timestamp: Date.now(), status: V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_INIT, read: false }; this.emit('onFriendAddApplication', z5); } else if (w5 === V2NIMFriendVerifyType.V2NIM_FRIEND_VERIFY_TYPE_ACCEPT) { this.handlePassFriendApply(v5); } else if (w5 === V2NIMFriendVerifyType.V2NIM_FRIEND_VERIFY_TYPE_REJECT) { const y5 = { applicantAccountId: v5, recipientAccountId: this.core.account, operatorAccountId: this.core.account, postscript: x5, timestamp: Date.now(), status: V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_REJECTED, read: true }; this.handleRejectFriendApply(y5); } } v2OnDeleteFriendHandler(s5) { this.core.logger.info(TAG, 'call Handler v2OnDeleteFriendHandler', s5); const t5 = get(s5.content, 'accountId'); this.core.logger.info(TAG, `v2OnDeleteFriendHandler: ${t5}`); this.handleDeleteFriend(t5); } async v2OnUpdateFriendInfoHandler(n5) { this.core.logger.info(TAG, 'call Handler v2OnUpdateFriendInfoHandler', n5); const o5 = get(n5.content, 'data'); const p5 = V2NIMFriendImpl.buildFromCloud(o5); const q5 = await this.model.updateFriendInfo(p5); if (typeof q5 === 'undefined') { this.core.logger.error(TAG, `v2OnUpdateFriendInfoHandler, but friend is undefined`); return; } const r5 = await this.core.userService.v2IGetUser(q5.accountId); if (typeof r5 !== 'undefined') { q5.userProfile = r5; } this.core.logger.info(TAG, `v2OnUpdateFriendInfoHandler: ${q5}`); this.emit('onFriendInfoChanged', q5); } async handleSetFriendInfo(j5, k5) { this.core.logger.info(TAG, 'handleSetFriendInfo', k5, j5); await this.model.update(j5, k5.alias, k5.serverExtension); const l5 = await this.model.queryFriend(j5); if (l5 !== undefined) { const m5 = await this.core.userService.v2IGetUser(l5.accountId); if (typeof m5 !== 'undefined') { l5.userProfile = m5; } } this.emit('onFriendInfoChanged', l5); } async handlePassFriendApply(g5, h5) { const i5 = h5 ? h5?.code : 200; if (i5 >= 190000 || i5 === V2NIMErrorCode.V2NIM_ERROR_CODE_FRIEND_OPERATION_RATE_LIMIT) { return; } else if (i5 === 200 || i5 === V2NIMErrorCode.V2NIM_ERROR_CODE_FRIEND_ALREADY_EXIST) { await this.model.updateFriendAddStatus(g5, V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_AGREED, this.core.account); await this.handleAddFriend(g5); } else if (i5 >= 500 && i5 <= 599 && i5 !== 509) { return; } else { await this.model.updateFriendAddStatus(g5, V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_EXPIRED, this.core.account); } } async handleRejectFriendApply(d5, e5) { const f5 = e5 ? e5?.code : 200; if (f5 >= 190000 || f5 === V2NIMErrorCode.V2NIM_ERROR_CODE_FRIEND_OPERATION_RATE_LIMIT) { return; } else if (f5 === 200) { await this.model.updateFriendAddStatus(d5.applicantAccountId, V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_REJECTED, this.core.account); this.emit('onFriendAddRejected', d5); } else if (f5 === V2NIMErrorCode.V2NIM_ERROR_CODE_FRIEND_ALREADY_EXIST) { await this.model.updateFriendAddStatus(d5.applicantAccountId, V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_AGREED, this.core.account); } else if (f5 >= 500 && f5 <= 599 && f5 !== 509) { return; } else { await this.model.updateFriendAddStatus(d5.applicantAccountId, V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_EXPIRED, this.core.account); } } registerInnerService(b5) { let c5 = b5.databaseService.getDatabase(b5, NIM_DATABASE_NAME_MAIN); this._model = new FriendModel(b5, c5); this._cloud = new FriendCloud(b5); } unRegisterInnerService() { this._model = undefined; this._cloud = undefined; } } 