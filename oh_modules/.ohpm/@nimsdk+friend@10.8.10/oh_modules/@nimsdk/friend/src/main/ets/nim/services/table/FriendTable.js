import { ColumnInfo, ColumnType, RdbPredicates, RdbTableImpl, V2NIMErrorImpl, V2NIMErrorMap } from '@nimsdk/base'; import { registerAspect } from './Aspect'; import { V2NIMFriendImpl } from '../service/V2NIMFriendImpl'; export var COL_NAME; (function (u14) { u14["ACCOUNT_ID"] = "account_id"; u14["FLAG"] = "flag"; u14["BE_FLAG"] = "beflag"; u14["SOURCE"] = "source"; u14["ALIAS"] = "alias"; u14["SERVER_EXTENSION"] = "server_extension"; u14["CUSTOMER_EXTENSION"] = "customer_extension"; u14["CREATE_TIME"] = "create_time"; u14["UPDATE_TIME"] = "update_time"; })(COL_NAME || (COL_NAME = {})); ; export const FRIEND_TABLE = { tableName: 'friend_table', columns: [ COL_NAME.ACCOUNT_ID, COL_NAME.FLAG, COL_NAME.BE_FLAG, COL_NAME.SOURCE, COL_NAME.ALIAS, COL_NAME.SERVER_EXTENSION, COL_NAME.CUSTOMER_EXTENSION, COL_NAME.CREATE_TIME, COL_NAME.UPDATE_TIME ] }; export const FriendColumns = [ new ColumnInfo(COL_NAME.ACCOUNT_ID, ColumnType.TEXT, -1, false), new ColumnInfo(COL_NAME.FLAG, ColumnType.INTEGER, -1, false), new ColumnInfo(COL_NAME.BE_FLAG, ColumnType.INTEGER, -1, false), new ColumnInfo(COL_NAME.SOURCE, ColumnType.INTEGER, -1, true), new ColumnInfo(COL_NAME.ALIAS, ColumnType.TEXT, -1, true), new ColumnInfo(COL_NAME.SERVER_EXTENSION, ColumnType.TEXT, -1, true), new ColumnInfo(COL_NAME.CUSTOMER_EXTENSION, ColumnType.TEXT, -1, true), new ColumnInfo(COL_NAME.CREATE_TIME, ColumnType.INTEGER, -1, false), new ColumnInfo(COL_NAME.UPDATE_TIME, ColumnType.INTEGER, -1, true) ]; const TAG = '[FriendTable]'; export class FriendTable extends RdbTableImpl { constructor(s14, t14) { super(s14); this.tableName = FRIEND_TABLE.tableName; this.logger = t14.logger; registerAspect(FRIEND_TABLE.tableName, FriendTable, t14); } async createTable() { try { this.createTableError = null; const p14 = { tableName: FRIEND_TABLE.tableName, indexName: 'friend_account_index', columns: [COL_NAME.ACCOUNT_ID] }; const q14 = { tableName: FRIEND_TABLE.tableName, indexName: 'friend_flag_account_index', columns: [COL_NAME.FLAG, COL_NAME.BE_FLAG, COL_NAME.ACCOUNT_ID] }; const r14 = { tableName: FRIEND_TABLE.tableName, indexName: 'friend_update_time_index', columns: [COL_NAME.UPDATE_TIME] }; await Promise.all([ await this.rdbStoreManager.createTable(FRIEND_TABLE.tableName, false, FriendColumns), await this.rdbStoreManager.createTableUniqueIndex(p14), await this.rdbStoreManager.createTableIndex(q14), await this.rdbStoreManager.createTableIndex(r14) ]); } catch (o14) { this.logger.error(TAG, 'create table data', o14); this.createTableError = o14; } } async addFriends(j14) { try { if (typeof j14 === 'undefined' || j14.length <= 0) { this.logger.info(TAG, `addFriends friends is illegal: ${j14}`); return; } await this.ensureCreateTable(); this.logger.info(TAG, 'addFriends', j14.map((n14) => { return n14.accountId; })); const l14 = []; j14.map((m14) => { l14.push(m14.generateBucket()); }); await this.rdbStoreManager.insertOrReplace(FRIEND_TABLE.tableName, l14); } catch (k14) { this.logger.error(TAG, 'addFriends', j14, k14); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `addFriends ${j14}`, rawError: k14 } }); } } async updateInfo(f14) { try { await this.ensureCreateTable(); this.logger.info(TAG, 'updateInfo', f14); const h14 = f14.generateFriendUpdateBucket(); const i14 = new RdbPredicates(this.tableName) .equalTo(COL_NAME.ACCOUNT_ID, f14.accountId); return await this.rdbStoreManager.update(h14, i14); } catch (g14) { this.logger.error(TAG, 'updateInfo', f14, g14); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `updateInfo ${f14}`, rawError: g14 } }); } } async update(z13, a14, b14) { try { await this.ensureCreateTable(); this.logger.info(TAG, 'update', z13, a14, b14); const d14 = {}; if (typeof a14 !== 'undefined') { d14[COL_NAME.ALIAS] = a14; } if (typeof b14 !== 'undefined') { d14[COL_NAME.SERVER_EXTENSION] = b14; } const e14 = new RdbPredicates(FRIEND_TABLE.tableName) .equalTo(COL_NAME.ACCOUNT_ID, z13); return await this.rdbStoreManager.update(d14, e14); } catch (c14) { this.logger.error(TAG, 'update', z13, a14, b14, c14); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `update ${z13}`, rawError: c14 } }); } } async queryByAccount(u13) { try { await this.ensureCreateTable(); const w13 = new RdbPredicates(this.tableName) .equalTo(COL_NAME.ACCOUNT_ID, u13) .equalTo(COL_NAME.FLAG, 1) .equalTo(COL_NAME.BE_FLAG, 1); const x13 = await this.rdbStoreManager.query(w13); let y13 = undefined; if (x13.length > 0) { y13 = V2NIMFriendImpl.buildFromValueBucket(x13[0]); } return y13; } catch (v13) { this.logger.error(TAG, 'queryByAccount', u13, v13); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryByAccount ${u13}`, rawError: v13 } }); } } async queryByAccounts(n13) { try { await this.ensureCreateTable(); this.logger.info(TAG, 'queryByAccounts', n13); const p13 = new RdbPredicates(this.tableName) .in(COL_NAME.ACCOUNT_ID, n13) .equalTo(COL_NAME.FLAG, 1) .equalTo(COL_NAME.BE_FLAG, 1) .orderByDesc(COL_NAME.UPDATE_TIME); const q13 = await this.rdbStoreManager.query(p13); const r13 = []; q13.map((s13) => { const t13 = V2NIMFriendImpl.buildFromValueBucket(s13); r13.push(t13); }); return r13; } catch (o13) { this.logger.error(TAG, 'queryByAccounts', n13, o13); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryByAccounts ${n13}`, rawError: o13 } }); } } async queryAllFriends(g13) { try { await this.ensureCreateTable(); this.logger.info(TAG, 'queryAllFriends'); const i13 = new RdbPredicates(this.tableName) .equalTo(COL_NAME.FLAG, 1) .equalTo(COL_NAME.BE_FLAG, 1) .orderByDesc(COL_NAME.UPDATE_TIME); if (g13) { i13.limitAs(g13); } const j13 = await this.rdbStoreManager.query(i13); const k13 = []; j13.map((l13) => { const m13 = V2NIMFriendImpl.buildFromValueBucket(l13); k13.push(m13); }); return k13; } catch (h13) { this.logger.error(TAG, 'queryAllFriends', h13); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryAllFriends`, rawError: h13 } }); } } async queryFriendCount() { try { await this.ensureCreateTable(); this.logger.info(TAG, 'queryFriendCount'); const e13 = new RdbPredicates(this.tableName) .equalTo(COL_NAME.FLAG, 1) .equalTo(COL_NAME.BE_FLAG, 1); const f13 = await this.rdbStoreManager.query(e13); return f13.length; } catch (d13) { this.logger.error(TAG, 'queryFriendCount', d13); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryFriendCount`, rawError: d13 } }); } } async queryFriendCountFaster() { try { await this.ensureCreateTable(); this.logger.info(TAG, 'queryFriendCountFaster'); let a13 = `
        SELECT COUNT(*) FROM ${this.tableName}
        WHERE ${COL_NAME.FLAG} = 1
        AND ${COL_NAME.BE_FLAG} = 1
      `; const b13 = await this.rdbStoreManager.queryBySql(a13); if (b13.length > 0) { const c13 = b13[0]['COUNT(*)']; return c13; } else { return 0; } } catch (z12) { this.logger.error(TAG, 'queryFriendCountFaster', z12); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `queryFriendCountFaster`, rawError: z12 } }); } } async deleteFriend(u12, v12) { try { await this.ensureCreateTable(); this.logger.info(TAG, 'deleteFriend', u12, v12); const x12 = {}; if (v12) { x12[COL_NAME.ALIAS] = ''; } x12[COL_NAME.FLAG] = 0; x12[COL_NAME.BE_FLAG] = 0; const y12 = new RdbPredicates(FRIEND_TABLE.tableName) .equalTo(COL_NAME.ACCOUNT_ID, u12); await this.rdbStoreManager.update(x12, y12); } catch (w12) { this.logger.error(TAG, 'deleteFriend', u12, v12, w12); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `deleteFriend`, rawError: w12 } }); } } async searchFriendByOption(k12, l12, m12) { try { await this.ensureCreateTable(); this.logger.info(TAG, 'searchFriendByOption', k12, l12, m12); const o12 = new RdbPredicates(FRIEND_TABLE.tableName); const p12 = []; const q12 = `%${k12}%`; if (l12 && m12) { o12.like(COL_NAME.ALIAS, q12).or().like(COL_NAME.ACCOUNT_ID, q12); } else if (l12) { o12.like(COL_NAME.ALIAS, q12); } else if (m12) { o12.like(COL_NAME.ACCOUNT_ID, q12); } else { return p12; } const r12 = await this.rdbStoreManager.query(o12); r12.map((s12) => { const t12 = V2NIMFriendImpl.buildFromValueBucket(s12); if (t12.beflag === 1 && t12.flag === 1) { p12.push(t12); } }); return p12; } catch (n12) { this.logger.error(TAG, 'searchFriendByOption', k12, l12, m12, n12); throw new V2NIMErrorImpl({ code: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.code, desc: V2NIMErrorMap.V2NIM_ERROR_CODE_UNKNOWN.message, detail: { reason: `searchFriendByOption`, rawError: n12 } }); } } } 