import { FriendNotificationTable } from '../table/FriendNotificationTable'; import { FriendTable } from '../table/FriendTable'; import HashMap from "@ohos.util.HashMap"; const FriendTimeTag = 'friend_time_tag'; const TAG = '[FriendModel]'; export class FriendModel { constructor(g3, h3) { this.core = g3; this.friendCache = new HashMap(); this.friendTable = new FriendTable(h3, g3); this.notificationTable = new FriendNotificationTable(h3, g3); } async loadAllFriends() { this.friendCache.clear(); const d3 = 5000; const e3 = await this.friendTable.queryAllFriends(d3); e3.map((f3) => { this.friendCache.set(f3.accountId, f3); }); this.core.logger.info(TAG, `loadAllFriends done, total: ${e3.length}`); } async update(y2, z2, a3) { const b3 = await this.friendTable.update(y2, z2, a3); this.core.logger.info(TAG, `update friend affectedRows: ${b3}`, y2, z2, a3); const c3 = await this.friendTable.queryByAccount(y2); if (c3) { this.friendCache.set(c3.accountId, c3); } else { this.friendCache.remove(y2); } } async updateFriendInfo(v2) { const w2 = await this.friendTable.updateInfo(v2); this.core.logger.info(TAG, `updateFriendInfo friend affectedRows: ${w2}`, v2); const x2 = await this.friendTable.queryByAccount(v2.accountId); if (x2) { this.friendCache.set(x2.accountId, x2); return x2; } else { this.friendCache.remove(v2.accountId); return undefined; } } async addFriends(s2, t2) { s2.map((u2) => { this.friendCache.set(u2.accountId, u2); }); await this.friendTable.addFriends(s2); this.setFriendTimetag(t2); this.core.syncService.updateSyncTimestamp(t2, 'friends'); return; } async addFriendsBySync(o2, p2) { o2.map((r2) => { this.friendCache.set(r2.accountId, r2); }); this.friendTable.addFriends(o2).then(() => { this.setFriendTimetag(p2); this.core.syncService.updateSyncTimestamp(p2, 'friends'); }).catch((q2) => { this.core.logger.error(TAG, 'addFriendsBySync, table addFriends catch error:', q2, 'timetag: ', p2); }); return; } async deleteFriend(m2, n2) { this.friendCache.remove(m2); await this.friendTable.deleteFriend(m2, n2); return; } async checkFriend(k2) { if (this.friendCache.hasKey(k2)) { return true; } const l2 = await this.friendTable.queryByAccount(k2); if (l2) { this.friendCache.set(l2.accountId, l2); return true; } else { this.friendCache.remove(k2); return false; } } async getFriendList() { const f2 = await this.friendTable.queryFriendCountFaster(); const g2 = this.friendCache.length; if (f2 === g2) { this.core.logger.info(TAG, `getFriendList use friendCache`); const j2 = Array.from(this.friendCache.values()); return j2; } else { this.core.logger.info(TAG, `getFriendList use dbFriends`); const h2 = await this.friendTable.queryAllFriends(); h2.map((i2) => { this.friendCache.set(i2.accountId, i2); }); return h2; } } async queryFriend(c2) { if (this.friendCache.hasKey(c2)) { const e2 = this.friendCache.get(c2); if (e2) { return e2; } else { } } const d2 = await this.friendTable.queryByAccount(c2); if (d2) { this.core.logger.info(TAG, `backfill friend from db to cache: ${JSON.stringify(d2)}`); this.friendCache.set(d2.accountId, d2); } return d2; } async getFriendByIds(v1) { const w1 = []; const x1 = []; v1.map((a2) => { if (this.friendCache.hasKey(a2)) { const b2 = this.friendCache.get(a2); if (b2) { w1.push(b2); } else { x1.push(a2); } } else { x1.push(a2); } }); if (x1.length > 0) { const y1 = await this.friendTable.queryByAccounts(x1); y1.map((z1) => { this.core.logger.info(TAG, `backfill friends from db to cache: ${JSON.stringify(z1)}`); this.friendCache.set(z1.accountId, z1); }); return w1.concat(y1); } else { return w1; } } async getAddApplicationList(p1) { const q1 = p1 && p1.status && p1.status.length > 0 ? p1.status : [0, 1, 2, 3, 4]; const r1 = p1.limit || 50; const s1 = p1.offset ?? 0; const t1 = await this.notificationTable.queryApplicationList(q1, r1 + 1, s1); const u1 = {}; if (t1.length <= r1) { u1.finished = true; } else { u1.finished = false; t1.pop(); } u1.infos = t1; u1.offset = u1.finished ? 0 : s1 + t1.length; return u1; } async appendFriendAddApplication(o1) { await this.notificationTable.addApplication(o1); } async updateFriendAddStatus(l1, m1, n1) { await this.notificationTable.updateStatus(m1, l1, n1); } async clearAllAddApplication() { await this.notificationTable.clearAllAddApplication(); } async deleteAddApplication(i1, j1, k1) { await this.notificationTable.deleteAddApplication(i1, j1, k1); } async setAddApplicationRead() { await this.notificationTable.setAddApplicationRead(); } async getAddApplicationUnreadCount() { return await this.notificationTable.queryApplicationUnreadCount(); } async searchFriendByOption(f1, g1, h1) { return await this.friendTable.searchFriendByOption(f1, g1, h1); } setFriendTimetag(e1) { this.core.preferenceSync.put(FriendTimeTag, e1); } getFriendTimetag() { return this.core.preferenceSync.get(FriendTimeTag, 0); } } 